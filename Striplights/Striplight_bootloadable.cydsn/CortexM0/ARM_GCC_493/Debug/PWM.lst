ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PWM.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	PWM_initVar
  18              		.bss
  19              		.type	PWM_initVar, %object
  20              		.size	PWM_initVar, 1
  21              	PWM_initVar:
  22 0000 00       		.space	1
  23              		.section	.text.PWM_Init,"ax",%progbits
  24              		.align	2
  25              		.global	PWM_Init
  26              		.code	16
  27              		.thumb_func
  28              		.type	PWM_Init, %function
  29              	PWM_Init:
  30              	.LFB0:
  31              		.file 1 ".\\Generated_Source\\PSoC4\\PWM.c"
   1:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/PWM.c **** * File Name: PWM.c
   3:.\Generated_Source\PSoC4/PWM.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/PWM.c **** *
   5:.\Generated_Source\PSoC4/PWM.c **** * Description:
   6:.\Generated_Source\PSoC4/PWM.c **** *  This file provides the source code to the API for the PWM
   7:.\Generated_Source\PSoC4/PWM.c **** *  component
   8:.\Generated_Source\PSoC4/PWM.c **** *
   9:.\Generated_Source\PSoC4/PWM.c **** * Note:
  10:.\Generated_Source\PSoC4/PWM.c **** *  None
  11:.\Generated_Source\PSoC4/PWM.c **** *
  12:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
  13:.\Generated_Source\PSoC4/PWM.c **** * Copyright 2013-2014, Cypress Semiconductor Corporation.  All rights reserved.
  14:.\Generated_Source\PSoC4/PWM.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:.\Generated_Source\PSoC4/PWM.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:.\Generated_Source\PSoC4/PWM.c **** * the software package with which this file was provided.
  17:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
  18:.\Generated_Source\PSoC4/PWM.c **** 
  19:.\Generated_Source\PSoC4/PWM.c **** #include "PWM.h"
  20:.\Generated_Source\PSoC4/PWM.c **** 
  21:.\Generated_Source\PSoC4/PWM.c **** uint8 PWM_initVar = 0u;
  22:.\Generated_Source\PSoC4/PWM.c **** 
  23:.\Generated_Source\PSoC4/PWM.c **** 
  24:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
  25:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Init
  26:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 2


  27:.\Generated_Source\PSoC4/PWM.c **** *
  28:.\Generated_Source\PSoC4/PWM.c **** * Summary:
  29:.\Generated_Source\PSoC4/PWM.c **** *  Initialize/Restore default PWM configuration.
  30:.\Generated_Source\PSoC4/PWM.c **** *
  31:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
  32:.\Generated_Source\PSoC4/PWM.c **** *  None
  33:.\Generated_Source\PSoC4/PWM.c **** *
  34:.\Generated_Source\PSoC4/PWM.c **** * Return:
  35:.\Generated_Source\PSoC4/PWM.c **** *  None
  36:.\Generated_Source\PSoC4/PWM.c **** *
  37:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
  38:.\Generated_Source\PSoC4/PWM.c **** void PWM_Init(void)
  39:.\Generated_Source\PSoC4/PWM.c **** {
  32              		.loc 1 39 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  40:.\Generated_Source\PSoC4/PWM.c **** 
  41:.\Generated_Source\PSoC4/PWM.c ****     /* Set values from customizer to CTRL */
  42:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM__QUAD == PWM_CONFIG)
  43:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL_REG = PWM_CTRL_QUAD_BASE_CONFIG;
  44:.\Generated_Source\PSoC4/PWM.c ****         
  45:.\Generated_Source\PSoC4/PWM.c ****         /* Set values from customizer to CTRL1 */
  46:.\Generated_Source\PSoC4/PWM.c ****         PWM_TRIG_CONTROL1_REG  = PWM_QUAD_SIGNALS_MODES;
  47:.\Generated_Source\PSoC4/PWM.c **** 
  48:.\Generated_Source\PSoC4/PWM.c ****         /* Set values from customizer to INTR */
  49:.\Generated_Source\PSoC4/PWM.c ****         PWM_SetInterruptMode(PWM_QUAD_INTERRUPT_MASK);
  50:.\Generated_Source\PSoC4/PWM.c ****         
  51:.\Generated_Source\PSoC4/PWM.c ****          /* Set other values */
  52:.\Generated_Source\PSoC4/PWM.c ****         PWM_SetCounterMode(PWM_COUNT_DOWN);
  53:.\Generated_Source\PSoC4/PWM.c ****         PWM_WritePeriod(PWM_QUAD_PERIOD_INIT_VALUE);
  54:.\Generated_Source\PSoC4/PWM.c ****         PWM_WriteCounter(PWM_QUAD_PERIOD_INIT_VALUE);
  55:.\Generated_Source\PSoC4/PWM.c ****     #endif  /* (PWM__QUAD == PWM_CONFIG) */
  56:.\Generated_Source\PSoC4/PWM.c **** 
  57:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM__TIMER == PWM_CONFIG)
  58:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL_REG = PWM_CTRL_TIMER_BASE_CONFIG;
  59:.\Generated_Source\PSoC4/PWM.c ****         
  60:.\Generated_Source\PSoC4/PWM.c ****         /* Set values from customizer to CTRL1 */
  61:.\Generated_Source\PSoC4/PWM.c ****         PWM_TRIG_CONTROL1_REG  = PWM_TIMER_SIGNALS_MODES;
  62:.\Generated_Source\PSoC4/PWM.c ****     
  63:.\Generated_Source\PSoC4/PWM.c ****         /* Set values from customizer to INTR */
  64:.\Generated_Source\PSoC4/PWM.c ****         PWM_SetInterruptMode(PWM_TC_INTERRUPT_MASK);
  65:.\Generated_Source\PSoC4/PWM.c ****         
  66:.\Generated_Source\PSoC4/PWM.c ****         /* Set other values from customizer */
  67:.\Generated_Source\PSoC4/PWM.c ****         PWM_WritePeriod(PWM_TC_PERIOD_VALUE );
  68:.\Generated_Source\PSoC4/PWM.c **** 
  69:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM__COMPARE == PWM_TC_COMP_CAP_MODE)
  70:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteCompare(PWM_TC_COMPARE_VALUE);
  71:.\Generated_Source\PSoC4/PWM.c **** 
  72:.\Generated_Source\PSoC4/PWM.c ****             #if (1u == PWM_TC_COMPARE_SWAP)
  73:.\Generated_Source\PSoC4/PWM.c ****                 PWM_SetCompareSwap(1u);
  74:.\Generated_Source\PSoC4/PWM.c ****                 PWM_WriteCompareBuf(PWM_TC_COMPARE_BUF_VALUE);
  75:.\Generated_Source\PSoC4/PWM.c ****             #endif  /* (1u == PWM_TC_COMPARE_SWAP) */
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 3


  76:.\Generated_Source\PSoC4/PWM.c ****         #endif  /* (PWM__COMPARE == PWM_TC_COMP_CAP_MODE) */
  77:.\Generated_Source\PSoC4/PWM.c **** 
  78:.\Generated_Source\PSoC4/PWM.c ****         /* Initialize counter value */
  79:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_CY_TCPWM_V2 && PWM_TIMER_UPDOWN_CNT_USED && !PWM_CY_TCPWM_4000)
  80:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteCounter(1u);
  81:.\Generated_Source\PSoC4/PWM.c ****         #elif(PWM__COUNT_DOWN == PWM_TC_COUNTER_MODE)
  82:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteCounter(PWM_TC_PERIOD_VALUE);
  83:.\Generated_Source\PSoC4/PWM.c ****         #else
  84:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteCounter(0u);
  85:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_CY_TCPWM_V2 && PWM_TIMER_UPDOWN_CNT_USED && !PWM_CY_TCPWM_4000) */
  86:.\Generated_Source\PSoC4/PWM.c ****     #endif  /* (PWM__TIMER == PWM_CONFIG) */
  87:.\Generated_Source\PSoC4/PWM.c **** 
  88:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM__PWM_SEL == PWM_CONFIG)
  89:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL_REG = PWM_CTRL_PWM_BASE_CONFIG;
  40              		.loc 1 89 0
  41 0004 134B     		ldr	r3, .L2
  42 0006 8422     		mov	r2, #132
  43 0008 D204     		lsl	r2, r2, #19
  44 000a 1A60     		str	r2, [r3]
  90:.\Generated_Source\PSoC4/PWM.c **** 
  91:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM__PWM_PR == PWM_PWM_MODE)
  92:.\Generated_Source\PSoC4/PWM.c ****             PWM_CONTROL_REG |= PWM_CTRL_PWM_RUN_MODE;
  93:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteCounter(PWM_PWM_PR_INIT_VALUE);
  94:.\Generated_Source\PSoC4/PWM.c ****         #else
  95:.\Generated_Source\PSoC4/PWM.c ****             PWM_CONTROL_REG |= PWM_CTRL_PWM_ALIGN | PWM_CTRL_PWM_KILL_EVENT;
  45              		.loc 1 95 0
  46 000c 114B     		ldr	r3, .L2
  47 000e 114A     		ldr	r2, .L2
  48 0010 1268     		ldr	r2, [r2]
  49 0012 8021     		mov	r1, #128
  50 0014 4902     		lsl	r1, r1, #9
  51 0016 0A43     		orr	r2, r1
  52 0018 1A60     		str	r2, [r3]
  96:.\Generated_Source\PSoC4/PWM.c ****             
  97:.\Generated_Source\PSoC4/PWM.c ****             /* Initialize counter value */
  98:.\Generated_Source\PSoC4/PWM.c ****             #if (PWM_CY_TCPWM_V2 && PWM_PWM_UPDOWN_CNT_USED && !PWM_CY_TCPWM_4000)
  99:.\Generated_Source\PSoC4/PWM.c ****                 PWM_WriteCounter(1u);
 100:.\Generated_Source\PSoC4/PWM.c ****             #elif (PWM__RIGHT == PWM_PWM_ALIGN)
 101:.\Generated_Source\PSoC4/PWM.c ****                 PWM_WriteCounter(PWM_PWM_PERIOD_VALUE);
  53              		.loc 1 101 0
  54 001a 0F4B     		ldr	r3, .L2+4
  55 001c 181C     		mov	r0, r3
  56 001e FFF7FEFF 		bl	PWM_WriteCounter
 102:.\Generated_Source\PSoC4/PWM.c ****             #else 
 103:.\Generated_Source\PSoC4/PWM.c ****                 PWM_WriteCounter(0u);
 104:.\Generated_Source\PSoC4/PWM.c ****             #endif  /* (PWM_CY_TCPWM_V2 && PWM_PWM_UPDOWN_CNT_USED && !PWM_CY_TCPWM_4000) */
 105:.\Generated_Source\PSoC4/PWM.c ****         #endif  /* (PWM__PWM_PR == PWM_PWM_MODE) */
 106:.\Generated_Source\PSoC4/PWM.c **** 
 107:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM__PWM_DT == PWM_PWM_MODE)
 108:.\Generated_Source\PSoC4/PWM.c ****             PWM_CONTROL_REG |= PWM_CTRL_PWM_DEAD_TIME_CYCLE;
 109:.\Generated_Source\PSoC4/PWM.c ****         #endif  /* (PWM__PWM_DT == PWM_PWM_MODE) */
 110:.\Generated_Source\PSoC4/PWM.c **** 
 111:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM__PWM == PWM_PWM_MODE)
 112:.\Generated_Source\PSoC4/PWM.c ****             PWM_CONTROL_REG |= PWM_CTRL_PWM_PRESCALER;
  57              		.loc 1 112 0
  58 0022 0C4B     		ldr	r3, .L2
  59 0024 0B4A     		ldr	r2, .L2
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 4


  60 0026 1268     		ldr	r2, [r2]
  61 0028 1A60     		str	r2, [r3]
 113:.\Generated_Source\PSoC4/PWM.c ****         #endif  /* (PWM__PWM == PWM_PWM_MODE) */
 114:.\Generated_Source\PSoC4/PWM.c **** 
 115:.\Generated_Source\PSoC4/PWM.c ****         /* Set values from customizer to CTRL1 */
 116:.\Generated_Source\PSoC4/PWM.c ****         PWM_TRIG_CONTROL1_REG  = PWM_PWM_SIGNALS_MODES;
  62              		.loc 1 116 0
  63 002a 0C4B     		ldr	r3, .L2+8
  64 002c C322     		mov	r2, #195
  65 002e 9200     		lsl	r2, r2, #2
  66 0030 1A60     		str	r2, [r3]
 117:.\Generated_Source\PSoC4/PWM.c ****     
 118:.\Generated_Source\PSoC4/PWM.c ****         /* Set values from customizer to INTR */
 119:.\Generated_Source\PSoC4/PWM.c ****         PWM_SetInterruptMode(PWM_PWM_INTERRUPT_MASK);
  67              		.loc 1 119 0
  68 0032 0020     		mov	r0, #0
  69 0034 FFF7FEFF 		bl	PWM_SetInterruptMode
 120:.\Generated_Source\PSoC4/PWM.c **** 
 121:.\Generated_Source\PSoC4/PWM.c ****         /* Set values from customizer to CTRL2 */
 122:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM__PWM_PR == PWM_PWM_MODE)
 123:.\Generated_Source\PSoC4/PWM.c ****             PWM_TRIG_CONTROL2_REG =
 124:.\Generated_Source\PSoC4/PWM.c ****                     (PWM_CC_MATCH_NO_CHANGE    |
 125:.\Generated_Source\PSoC4/PWM.c ****                     PWM_OVERLOW_NO_CHANGE      |
 126:.\Generated_Source\PSoC4/PWM.c ****                     PWM_UNDERFLOW_NO_CHANGE);
 127:.\Generated_Source\PSoC4/PWM.c ****         #else
 128:.\Generated_Source\PSoC4/PWM.c ****             #if (PWM__LEFT == PWM_PWM_ALIGN)
 129:.\Generated_Source\PSoC4/PWM.c ****                 PWM_TRIG_CONTROL2_REG = PWM_PWM_MODE_LEFT;
 130:.\Generated_Source\PSoC4/PWM.c ****             #endif  /* ( PWM_PWM_LEFT == PWM_PWM_ALIGN) */
 131:.\Generated_Source\PSoC4/PWM.c **** 
 132:.\Generated_Source\PSoC4/PWM.c ****             #if (PWM__RIGHT == PWM_PWM_ALIGN)
 133:.\Generated_Source\PSoC4/PWM.c ****                 PWM_TRIG_CONTROL2_REG = PWM_PWM_MODE_RIGHT;
  70              		.loc 1 133 0
  71 0038 094B     		ldr	r3, .L2+12
  72 003a 1C22     		mov	r2, #28
  73 003c 1A60     		str	r2, [r3]
 134:.\Generated_Source\PSoC4/PWM.c ****             #endif  /* ( PWM_PWM_RIGHT == PWM_PWM_ALIGN) */
 135:.\Generated_Source\PSoC4/PWM.c **** 
 136:.\Generated_Source\PSoC4/PWM.c ****             #if (PWM__CENTER == PWM_PWM_ALIGN)
 137:.\Generated_Source\PSoC4/PWM.c ****                 PWM_TRIG_CONTROL2_REG = PWM_PWM_MODE_CENTER;
 138:.\Generated_Source\PSoC4/PWM.c ****             #endif  /* ( PWM_PWM_CENTER == PWM_PWM_ALIGN) */
 139:.\Generated_Source\PSoC4/PWM.c **** 
 140:.\Generated_Source\PSoC4/PWM.c ****             #if (PWM__ASYMMETRIC == PWM_PWM_ALIGN)
 141:.\Generated_Source\PSoC4/PWM.c ****                 PWM_TRIG_CONTROL2_REG = PWM_PWM_MODE_ASYM;
 142:.\Generated_Source\PSoC4/PWM.c ****             #endif  /* (PWM__ASYMMETRIC == PWM_PWM_ALIGN) */
 143:.\Generated_Source\PSoC4/PWM.c ****         #endif  /* (PWM__PWM_PR == PWM_PWM_MODE) */
 144:.\Generated_Source\PSoC4/PWM.c **** 
 145:.\Generated_Source\PSoC4/PWM.c ****         /* Set other values from customizer */
 146:.\Generated_Source\PSoC4/PWM.c ****         PWM_WritePeriod(PWM_PWM_PERIOD_VALUE );
  74              		.loc 1 146 0
  75 003e 064B     		ldr	r3, .L2+4
  76 0040 181C     		mov	r0, r3
  77 0042 FFF7FEFF 		bl	PWM_WritePeriod
 147:.\Generated_Source\PSoC4/PWM.c ****         PWM_WriteCompare(PWM_PWM_COMPARE_VALUE);
  78              		.loc 1 147 0
  79 0046 074B     		ldr	r3, .L2+16
  80 0048 181C     		mov	r0, r3
  81 004a FFF7FEFF 		bl	PWM_WriteCompare
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 5


 148:.\Generated_Source\PSoC4/PWM.c **** 
 149:.\Generated_Source\PSoC4/PWM.c ****         #if (1u == PWM_PWM_COMPARE_SWAP)
 150:.\Generated_Source\PSoC4/PWM.c ****             PWM_SetCompareSwap(1u);
 151:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteCompareBuf(PWM_PWM_COMPARE_BUF_VALUE);
 152:.\Generated_Source\PSoC4/PWM.c ****         #endif  /* (1u == PWM_PWM_COMPARE_SWAP) */
 153:.\Generated_Source\PSoC4/PWM.c **** 
 154:.\Generated_Source\PSoC4/PWM.c ****         #if (1u == PWM_PWM_PERIOD_SWAP)
 155:.\Generated_Source\PSoC4/PWM.c ****             PWM_SetPeriodSwap(1u);
 156:.\Generated_Source\PSoC4/PWM.c ****             PWM_WritePeriodBuf(PWM_PWM_PERIOD_BUF_VALUE);
 157:.\Generated_Source\PSoC4/PWM.c ****         #endif  /* (1u == PWM_PWM_PERIOD_SWAP) */
 158:.\Generated_Source\PSoC4/PWM.c ****     #endif  /* (PWM__PWM_SEL == PWM_CONFIG) */
 159:.\Generated_Source\PSoC4/PWM.c ****     
 160:.\Generated_Source\PSoC4/PWM.c **** }
  82              		.loc 1 160 0
  83 004e BD46     		mov	sp, r7
  84              		@ sp needed
  85 0050 80BD     		pop	{r7, pc}
  86              	.L3:
  87 0052 C046     		.align	2
  88              	.L2:
  89 0054 00010540 		.word	1074069760
  90 0058 DC050000 		.word	1500
  91 005c 24010540 		.word	1074069796
  92 0060 28010540 		.word	1074069800
  93 0064 EE020000 		.word	750
  94              		.cfi_endproc
  95              	.LFE0:
  96              		.size	PWM_Init, .-PWM_Init
  97              		.section	.text.PWM_Enable,"ax",%progbits
  98              		.align	2
  99              		.global	PWM_Enable
 100              		.code	16
 101              		.thumb_func
 102              		.type	PWM_Enable, %function
 103              	PWM_Enable:
 104              	.LFB1:
 161:.\Generated_Source\PSoC4/PWM.c **** 
 162:.\Generated_Source\PSoC4/PWM.c **** 
 163:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 164:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Enable
 165:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 166:.\Generated_Source\PSoC4/PWM.c **** *
 167:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 168:.\Generated_Source\PSoC4/PWM.c **** *  Enables the PWM.
 169:.\Generated_Source\PSoC4/PWM.c **** *
 170:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 171:.\Generated_Source\PSoC4/PWM.c **** *  None
 172:.\Generated_Source\PSoC4/PWM.c **** *
 173:.\Generated_Source\PSoC4/PWM.c **** * Return:
 174:.\Generated_Source\PSoC4/PWM.c **** *  None
 175:.\Generated_Source\PSoC4/PWM.c **** *
 176:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 177:.\Generated_Source\PSoC4/PWM.c **** void PWM_Enable(void)
 178:.\Generated_Source\PSoC4/PWM.c **** {
 105              		.loc 1 178 0
 106              		.cfi_startproc
 107 0000 90B5     		push	{r4, r7, lr}
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 6


 108              		.cfi_def_cfa_offset 12
 109              		.cfi_offset 4, -12
 110              		.cfi_offset 7, -8
 111              		.cfi_offset 14, -4
 112 0002 83B0     		sub	sp, sp, #12
 113              		.cfi_def_cfa_offset 24
 114 0004 00AF     		add	r7, sp, #0
 115              		.cfi_def_cfa_register 7
 179:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 180:.\Generated_Source\PSoC4/PWM.c **** 
 181:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 116              		.loc 1 181 0
 117 0006 FC1D     		add	r4, r7, #7
 118 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 119 000c 031C     		mov	r3, r0
 120 000e 2370     		strb	r3, [r4]
 182:.\Generated_Source\PSoC4/PWM.c ****     PWM_BLOCK_CONTROL_REG |= PWM_MASK;
 121              		.loc 1 182 0
 122 0010 064B     		ldr	r3, .L5
 123 0012 064A     		ldr	r2, .L5
 124 0014 1268     		ldr	r2, [r2]
 125 0016 0121     		mov	r1, #1
 126 0018 0A43     		orr	r2, r1
 127 001a 1A60     		str	r2, [r3]
 183:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 128              		.loc 1 183 0
 129 001c FB1D     		add	r3, r7, #7
 130 001e 1B78     		ldrb	r3, [r3]
 131 0020 181C     		mov	r0, r3
 132 0022 FFF7FEFF 		bl	CyExitCriticalSection
 184:.\Generated_Source\PSoC4/PWM.c **** 
 185:.\Generated_Source\PSoC4/PWM.c ****     /* Start Timer or PWM if start input is absent */
 186:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM__PWM_SEL == PWM_CONFIG)
 187:.\Generated_Source\PSoC4/PWM.c ****         #if (0u == PWM_PWM_START_SIGNAL_PRESENT)
 188:.\Generated_Source\PSoC4/PWM.c ****             PWM_TriggerCommand(PWM_MASK, PWM_CMD_START);
 189:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (0u == PWM_PWM_START_SIGNAL_PRESENT) */
 190:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM__PWM_SEL == PWM_CONFIG) */
 191:.\Generated_Source\PSoC4/PWM.c **** 
 192:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM__TIMER == PWM_CONFIG)
 193:.\Generated_Source\PSoC4/PWM.c ****         #if (0u == PWM_TC_START_SIGNAL_PRESENT)
 194:.\Generated_Source\PSoC4/PWM.c ****             PWM_TriggerCommand(PWM_MASK, PWM_CMD_START);
 195:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (0u == PWM_TC_START_SIGNAL_PRESENT) */
 196:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM__TIMER == PWM_CONFIG) */
 197:.\Generated_Source\PSoC4/PWM.c **** }
 133              		.loc 1 197 0
 134 0026 BD46     		mov	sp, r7
 135 0028 03B0     		add	sp, sp, #12
 136              		@ sp needed
 137 002a 90BD     		pop	{r4, r7, pc}
 138              	.L6:
 139              		.align	2
 140              	.L5:
 141 002c 00000540 		.word	1074069504
 142              		.cfi_endproc
 143              	.LFE1:
 144              		.size	PWM_Enable, .-PWM_Enable
 145              		.section	.text.PWM_Start,"ax",%progbits
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 7


 146              		.align	2
 147              		.global	PWM_Start
 148              		.code	16
 149              		.thumb_func
 150              		.type	PWM_Start, %function
 151              	PWM_Start:
 152              	.LFB2:
 198:.\Generated_Source\PSoC4/PWM.c **** 
 199:.\Generated_Source\PSoC4/PWM.c **** 
 200:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 201:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Start
 202:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 203:.\Generated_Source\PSoC4/PWM.c **** *
 204:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 205:.\Generated_Source\PSoC4/PWM.c **** *  Initializes the PWM with default customizer
 206:.\Generated_Source\PSoC4/PWM.c **** *  values when called the first time and enables the PWM.
 207:.\Generated_Source\PSoC4/PWM.c **** *  For subsequent calls the configuration is left unchanged and the component is
 208:.\Generated_Source\PSoC4/PWM.c **** *  just enabled.
 209:.\Generated_Source\PSoC4/PWM.c **** *
 210:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 211:.\Generated_Source\PSoC4/PWM.c **** *  None
 212:.\Generated_Source\PSoC4/PWM.c **** *
 213:.\Generated_Source\PSoC4/PWM.c **** * Return:
 214:.\Generated_Source\PSoC4/PWM.c **** *  None
 215:.\Generated_Source\PSoC4/PWM.c **** *
 216:.\Generated_Source\PSoC4/PWM.c **** * Global variables:
 217:.\Generated_Source\PSoC4/PWM.c **** *  PWM_initVar: global variable is used to indicate initial
 218:.\Generated_Source\PSoC4/PWM.c **** *  configuration of this component.  The variable is initialized to zero and set
 219:.\Generated_Source\PSoC4/PWM.c **** *  to 1 the first time PWM_Start() is called. This allows
 220:.\Generated_Source\PSoC4/PWM.c **** *  enabling/disabling a component without re-initialization in all subsequent
 221:.\Generated_Source\PSoC4/PWM.c **** *  calls to the PWM_Start() routine.
 222:.\Generated_Source\PSoC4/PWM.c **** *
 223:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 224:.\Generated_Source\PSoC4/PWM.c **** void PWM_Start(void)
 225:.\Generated_Source\PSoC4/PWM.c **** {
 153              		.loc 1 225 0
 154              		.cfi_startproc
 155 0000 80B5     		push	{r7, lr}
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 7, -8
 158              		.cfi_offset 14, -4
 159 0002 00AF     		add	r7, sp, #0
 160              		.cfi_def_cfa_register 7
 226:.\Generated_Source\PSoC4/PWM.c ****     if (0u == PWM_initVar)
 161              		.loc 1 226 0
 162 0004 064B     		ldr	r3, .L9
 163 0006 1B78     		ldrb	r3, [r3]
 164 0008 002B     		cmp	r3, #0
 165 000a 04D1     		bne	.L8
 227:.\Generated_Source\PSoC4/PWM.c ****     {
 228:.\Generated_Source\PSoC4/PWM.c ****         PWM_Init();
 166              		.loc 1 228 0
 167 000c FFF7FEFF 		bl	PWM_Init
 229:.\Generated_Source\PSoC4/PWM.c ****         PWM_initVar = 1u;
 168              		.loc 1 229 0
 169 0010 034B     		ldr	r3, .L9
 170 0012 0122     		mov	r2, #1
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 8


 171 0014 1A70     		strb	r2, [r3]
 172              	.L8:
 230:.\Generated_Source\PSoC4/PWM.c ****     }
 231:.\Generated_Source\PSoC4/PWM.c **** 
 232:.\Generated_Source\PSoC4/PWM.c ****     PWM_Enable();
 173              		.loc 1 232 0
 174 0016 FFF7FEFF 		bl	PWM_Enable
 233:.\Generated_Source\PSoC4/PWM.c **** }
 175              		.loc 1 233 0
 176 001a BD46     		mov	sp, r7
 177              		@ sp needed
 178 001c 80BD     		pop	{r7, pc}
 179              	.L10:
 180 001e C046     		.align	2
 181              	.L9:
 182 0020 00000000 		.word	PWM_initVar
 183              		.cfi_endproc
 184              	.LFE2:
 185              		.size	PWM_Start, .-PWM_Start
 186              		.section	.text.PWM_Stop,"ax",%progbits
 187              		.align	2
 188              		.global	PWM_Stop
 189              		.code	16
 190              		.thumb_func
 191              		.type	PWM_Stop, %function
 192              	PWM_Stop:
 193              	.LFB3:
 234:.\Generated_Source\PSoC4/PWM.c **** 
 235:.\Generated_Source\PSoC4/PWM.c **** 
 236:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 237:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Stop
 238:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 239:.\Generated_Source\PSoC4/PWM.c **** *
 240:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 241:.\Generated_Source\PSoC4/PWM.c **** *  Disables the PWM.
 242:.\Generated_Source\PSoC4/PWM.c **** *
 243:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 244:.\Generated_Source\PSoC4/PWM.c **** *  None
 245:.\Generated_Source\PSoC4/PWM.c **** *
 246:.\Generated_Source\PSoC4/PWM.c **** * Return:
 247:.\Generated_Source\PSoC4/PWM.c **** *  None
 248:.\Generated_Source\PSoC4/PWM.c **** *
 249:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 250:.\Generated_Source\PSoC4/PWM.c **** void PWM_Stop(void)
 251:.\Generated_Source\PSoC4/PWM.c **** {
 194              		.loc 1 251 0
 195              		.cfi_startproc
 196 0000 90B5     		push	{r4, r7, lr}
 197              		.cfi_def_cfa_offset 12
 198              		.cfi_offset 4, -12
 199              		.cfi_offset 7, -8
 200              		.cfi_offset 14, -4
 201 0002 83B0     		sub	sp, sp, #12
 202              		.cfi_def_cfa_offset 24
 203 0004 00AF     		add	r7, sp, #0
 204              		.cfi_def_cfa_register 7
 252:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 9


 253:.\Generated_Source\PSoC4/PWM.c **** 
 254:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 205              		.loc 1 254 0
 206 0006 FC1D     		add	r4, r7, #7
 207 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 208 000c 031C     		mov	r3, r0
 209 000e 2370     		strb	r3, [r4]
 255:.\Generated_Source\PSoC4/PWM.c **** 
 256:.\Generated_Source\PSoC4/PWM.c ****     PWM_BLOCK_CONTROL_REG &= (uint32)~PWM_MASK;
 210              		.loc 1 256 0
 211 0010 064B     		ldr	r3, .L12
 212 0012 064A     		ldr	r2, .L12
 213 0014 1268     		ldr	r2, [r2]
 214 0016 0121     		mov	r1, #1
 215 0018 8A43     		bic	r2, r1
 216 001a 1A60     		str	r2, [r3]
 257:.\Generated_Source\PSoC4/PWM.c **** 
 258:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 217              		.loc 1 258 0
 218 001c FB1D     		add	r3, r7, #7
 219 001e 1B78     		ldrb	r3, [r3]
 220 0020 181C     		mov	r0, r3
 221 0022 FFF7FEFF 		bl	CyExitCriticalSection
 259:.\Generated_Source\PSoC4/PWM.c **** }
 222              		.loc 1 259 0
 223 0026 BD46     		mov	sp, r7
 224 0028 03B0     		add	sp, sp, #12
 225              		@ sp needed
 226 002a 90BD     		pop	{r4, r7, pc}
 227              	.L13:
 228              		.align	2
 229              	.L12:
 230 002c 00000540 		.word	1074069504
 231              		.cfi_endproc
 232              	.LFE3:
 233              		.size	PWM_Stop, .-PWM_Stop
 234              		.section	.text.PWM_SetMode,"ax",%progbits
 235              		.align	2
 236              		.global	PWM_SetMode
 237              		.code	16
 238              		.thumb_func
 239              		.type	PWM_SetMode, %function
 240              	PWM_SetMode:
 241              	.LFB4:
 260:.\Generated_Source\PSoC4/PWM.c **** 
 261:.\Generated_Source\PSoC4/PWM.c **** 
 262:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 263:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetMode
 264:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 265:.\Generated_Source\PSoC4/PWM.c **** *
 266:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 267:.\Generated_Source\PSoC4/PWM.c **** *  Sets the operation mode of the PWM. This function is used when
 268:.\Generated_Source\PSoC4/PWM.c **** *  configured as a generic PWM and the actual mode of operation is
 269:.\Generated_Source\PSoC4/PWM.c **** *  set at runtime. The mode must be set while the component is disabled.
 270:.\Generated_Source\PSoC4/PWM.c **** *
 271:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 272:.\Generated_Source\PSoC4/PWM.c **** *  mode: Mode for the PWM to operate in
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 10


 273:.\Generated_Source\PSoC4/PWM.c **** *   Values:
 274:.\Generated_Source\PSoC4/PWM.c **** *   - PWM_MODE_TIMER_COMPARE - Timer / Counter with
 275:.\Generated_Source\PSoC4/PWM.c **** *                                                 compare capability
 276:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_TIMER_CAPTURE - Timer / Counter with
 277:.\Generated_Source\PSoC4/PWM.c **** *                                                 capture capability
 278:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_QUAD - Quadrature decoder
 279:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_PWM - PWM
 280:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_PWM_DT - PWM with dead time
 281:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_PWM_PR - PWM with pseudo random capability
 282:.\Generated_Source\PSoC4/PWM.c **** *
 283:.\Generated_Source\PSoC4/PWM.c **** * Return:
 284:.\Generated_Source\PSoC4/PWM.c **** *  None
 285:.\Generated_Source\PSoC4/PWM.c **** *
 286:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 287:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetMode(uint32 mode)
 288:.\Generated_Source\PSoC4/PWM.c **** {
 242              		.loc 1 288 0
 243              		.cfi_startproc
 244 0000 90B5     		push	{r4, r7, lr}
 245              		.cfi_def_cfa_offset 12
 246              		.cfi_offset 4, -12
 247              		.cfi_offset 7, -8
 248              		.cfi_offset 14, -4
 249 0002 85B0     		sub	sp, sp, #20
 250              		.cfi_def_cfa_offset 32
 251 0004 00AF     		add	r7, sp, #0
 252              		.cfi_def_cfa_register 7
 253 0006 7860     		str	r0, [r7, #4]
 289:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 290:.\Generated_Source\PSoC4/PWM.c **** 
 291:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 254              		.loc 1 291 0
 255 0008 0F23     		mov	r3, #15
 256 000a FC18     		add	r4, r7, r3
 257 000c FFF7FEFF 		bl	CyEnterCriticalSection
 258 0010 031C     		mov	r3, r0
 259 0012 2370     		strb	r3, [r4]
 292:.\Generated_Source\PSoC4/PWM.c **** 
 293:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_MODE_MASK;
 260              		.loc 1 293 0
 261 0014 0A4B     		ldr	r3, .L15
 262 0016 0A4A     		ldr	r2, .L15
 263 0018 1268     		ldr	r2, [r2]
 264 001a 0A49     		ldr	r1, .L15+4
 265 001c 0A40     		and	r2, r1
 266 001e 1A60     		str	r2, [r3]
 294:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= mode;
 267              		.loc 1 294 0
 268 0020 074B     		ldr	r3, .L15
 269 0022 074A     		ldr	r2, .L15
 270 0024 1168     		ldr	r1, [r2]
 271 0026 7A68     		ldr	r2, [r7, #4]
 272 0028 0A43     		orr	r2, r1
 273 002a 1A60     		str	r2, [r3]
 295:.\Generated_Source\PSoC4/PWM.c **** 
 296:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 274              		.loc 1 296 0
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 11


 275 002c 0F23     		mov	r3, #15
 276 002e FB18     		add	r3, r7, r3
 277 0030 1B78     		ldrb	r3, [r3]
 278 0032 181C     		mov	r0, r3
 279 0034 FFF7FEFF 		bl	CyExitCriticalSection
 297:.\Generated_Source\PSoC4/PWM.c **** }
 280              		.loc 1 297 0
 281 0038 BD46     		mov	sp, r7
 282 003a 05B0     		add	sp, sp, #20
 283              		@ sp needed
 284 003c 90BD     		pop	{r4, r7, pc}
 285              	.L16:
 286 003e C046     		.align	2
 287              	.L15:
 288 0040 00010540 		.word	1074069760
 289 0044 FFFFFFF8 		.word	-117440513
 290              		.cfi_endproc
 291              	.LFE4:
 292              		.size	PWM_SetMode, .-PWM_SetMode
 293              		.section	.text.PWM_SetQDMode,"ax",%progbits
 294              		.align	2
 295              		.global	PWM_SetQDMode
 296              		.code	16
 297              		.thumb_func
 298              		.type	PWM_SetQDMode, %function
 299              	PWM_SetQDMode:
 300              	.LFB5:
 298:.\Generated_Source\PSoC4/PWM.c **** 
 299:.\Generated_Source\PSoC4/PWM.c **** 
 300:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 301:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetQDMode
 302:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 303:.\Generated_Source\PSoC4/PWM.c **** *
 304:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 305:.\Generated_Source\PSoC4/PWM.c **** *  Sets the the Quadrature Decoder to one of the 3 supported modes.
 306:.\Generated_Source\PSoC4/PWM.c **** *  Its functionality is only applicable to Quadrature Decoder operation.
 307:.\Generated_Source\PSoC4/PWM.c **** *
 308:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 309:.\Generated_Source\PSoC4/PWM.c **** *  qdMode: Quadrature Decoder mode
 310:.\Generated_Source\PSoC4/PWM.c **** *   Values:
 311:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_X1 - Counts on phi 1 rising
 312:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_X2 - Counts on both edges of phi1 (2x faster)
 313:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_MODE_X4 - Counts on both edges of phi1 and phi2
 314:.\Generated_Source\PSoC4/PWM.c **** *                                        (4x faster)
 315:.\Generated_Source\PSoC4/PWM.c **** *
 316:.\Generated_Source\PSoC4/PWM.c **** * Return:
 317:.\Generated_Source\PSoC4/PWM.c **** *  None
 318:.\Generated_Source\PSoC4/PWM.c **** *
 319:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 320:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetQDMode(uint32 qdMode)
 321:.\Generated_Source\PSoC4/PWM.c **** {
 301              		.loc 1 321 0
 302              		.cfi_startproc
 303 0000 90B5     		push	{r4, r7, lr}
 304              		.cfi_def_cfa_offset 12
 305              		.cfi_offset 4, -12
 306              		.cfi_offset 7, -8
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 12


 307              		.cfi_offset 14, -4
 308 0002 85B0     		sub	sp, sp, #20
 309              		.cfi_def_cfa_offset 32
 310 0004 00AF     		add	r7, sp, #0
 311              		.cfi_def_cfa_register 7
 312 0006 7860     		str	r0, [r7, #4]
 322:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 323:.\Generated_Source\PSoC4/PWM.c **** 
 324:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 313              		.loc 1 324 0
 314 0008 0F23     		mov	r3, #15
 315 000a FC18     		add	r4, r7, r3
 316 000c FFF7FEFF 		bl	CyEnterCriticalSection
 317 0010 031C     		mov	r3, r0
 318 0012 2370     		strb	r3, [r4]
 325:.\Generated_Source\PSoC4/PWM.c **** 
 326:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_QUAD_MODE_MASK;
 319              		.loc 1 326 0
 320 0014 0A4B     		ldr	r3, .L18
 321 0016 0A4A     		ldr	r2, .L18
 322 0018 1268     		ldr	r2, [r2]
 323 001a 0A49     		ldr	r1, .L18+4
 324 001c 0A40     		and	r2, r1
 325 001e 1A60     		str	r2, [r3]
 327:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= qdMode;
 326              		.loc 1 327 0
 327 0020 074B     		ldr	r3, .L18
 328 0022 074A     		ldr	r2, .L18
 329 0024 1168     		ldr	r1, [r2]
 330 0026 7A68     		ldr	r2, [r7, #4]
 331 0028 0A43     		orr	r2, r1
 332 002a 1A60     		str	r2, [r3]
 328:.\Generated_Source\PSoC4/PWM.c **** 
 329:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 333              		.loc 1 329 0
 334 002c 0F23     		mov	r3, #15
 335 002e FB18     		add	r3, r7, r3
 336 0030 1B78     		ldrb	r3, [r3]
 337 0032 181C     		mov	r0, r3
 338 0034 FFF7FEFF 		bl	CyExitCriticalSection
 330:.\Generated_Source\PSoC4/PWM.c **** }
 339              		.loc 1 330 0
 340 0038 BD46     		mov	sp, r7
 341 003a 05B0     		add	sp, sp, #20
 342              		@ sp needed
 343 003c 90BD     		pop	{r4, r7, pc}
 344              	.L19:
 345 003e C046     		.align	2
 346              	.L18:
 347 0040 00010540 		.word	1074069760
 348 0044 FFFF8FFF 		.word	-7340033
 349              		.cfi_endproc
 350              	.LFE5:
 351              		.size	PWM_SetQDMode, .-PWM_SetQDMode
 352              		.section	.text.PWM_SetPrescaler,"ax",%progbits
 353              		.align	2
 354              		.global	PWM_SetPrescaler
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 13


 355              		.code	16
 356              		.thumb_func
 357              		.type	PWM_SetPrescaler, %function
 358              	PWM_SetPrescaler:
 359              	.LFB6:
 331:.\Generated_Source\PSoC4/PWM.c **** 
 332:.\Generated_Source\PSoC4/PWM.c **** 
 333:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 334:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetPrescaler
 335:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 336:.\Generated_Source\PSoC4/PWM.c **** *
 337:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 338:.\Generated_Source\PSoC4/PWM.c **** *  Sets the prescaler value that is applied to the clock input.  Not applicable
 339:.\Generated_Source\PSoC4/PWM.c **** *  to a PWM with the dead time mode or Quadrature Decoder mode.
 340:.\Generated_Source\PSoC4/PWM.c **** *
 341:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 342:.\Generated_Source\PSoC4/PWM.c **** *  prescaler: Prescaler divider value
 343:.\Generated_Source\PSoC4/PWM.c **** *   Values:
 344:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY1    - Divide by 1 (no prescaling)
 345:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY2    - Divide by 2
 346:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY4    - Divide by 4
 347:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY8    - Divide by 8
 348:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY16   - Divide by 16
 349:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY32   - Divide by 32
 350:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY64   - Divide by 64
 351:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_PRESCALE_DIVBY128  - Divide by 128
 352:.\Generated_Source\PSoC4/PWM.c **** *
 353:.\Generated_Source\PSoC4/PWM.c **** * Return:
 354:.\Generated_Source\PSoC4/PWM.c **** *  None
 355:.\Generated_Source\PSoC4/PWM.c **** *
 356:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 357:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetPrescaler(uint32 prescaler)
 358:.\Generated_Source\PSoC4/PWM.c **** {
 360              		.loc 1 358 0
 361              		.cfi_startproc
 362 0000 90B5     		push	{r4, r7, lr}
 363              		.cfi_def_cfa_offset 12
 364              		.cfi_offset 4, -12
 365              		.cfi_offset 7, -8
 366              		.cfi_offset 14, -4
 367 0002 85B0     		sub	sp, sp, #20
 368              		.cfi_def_cfa_offset 32
 369 0004 00AF     		add	r7, sp, #0
 370              		.cfi_def_cfa_register 7
 371 0006 7860     		str	r0, [r7, #4]
 359:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 360:.\Generated_Source\PSoC4/PWM.c **** 
 361:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 372              		.loc 1 361 0
 373 0008 0F23     		mov	r3, #15
 374 000a FC18     		add	r4, r7, r3
 375 000c FFF7FEFF 		bl	CyEnterCriticalSection
 376 0010 031C     		mov	r3, r0
 377 0012 2370     		strb	r3, [r4]
 362:.\Generated_Source\PSoC4/PWM.c **** 
 363:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_PRESCALER_MASK;
 378              		.loc 1 363 0
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 14


 379 0014 0A4B     		ldr	r3, .L21
 380 0016 0A4A     		ldr	r2, .L21
 381 0018 1268     		ldr	r2, [r2]
 382 001a 0A49     		ldr	r1, .L21+4
 383 001c 0A40     		and	r2, r1
 384 001e 1A60     		str	r2, [r3]
 364:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= prescaler;
 385              		.loc 1 364 0
 386 0020 074B     		ldr	r3, .L21
 387 0022 074A     		ldr	r2, .L21
 388 0024 1168     		ldr	r1, [r2]
 389 0026 7A68     		ldr	r2, [r7, #4]
 390 0028 0A43     		orr	r2, r1
 391 002a 1A60     		str	r2, [r3]
 365:.\Generated_Source\PSoC4/PWM.c **** 
 366:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 392              		.loc 1 366 0
 393 002c 0F23     		mov	r3, #15
 394 002e FB18     		add	r3, r7, r3
 395 0030 1B78     		ldrb	r3, [r3]
 396 0032 181C     		mov	r0, r3
 397 0034 FFF7FEFF 		bl	CyExitCriticalSection
 367:.\Generated_Source\PSoC4/PWM.c **** }
 398              		.loc 1 367 0
 399 0038 BD46     		mov	sp, r7
 400 003a 05B0     		add	sp, sp, #20
 401              		@ sp needed
 402 003c 90BD     		pop	{r4, r7, pc}
 403              	.L22:
 404 003e C046     		.align	2
 405              	.L21:
 406 0040 00010540 		.word	1074069760
 407 0044 FF00FFFF 		.word	-65281
 408              		.cfi_endproc
 409              	.LFE6:
 410              		.size	PWM_SetPrescaler, .-PWM_SetPrescaler
 411              		.section	.text.PWM_SetOneShot,"ax",%progbits
 412              		.align	2
 413              		.global	PWM_SetOneShot
 414              		.code	16
 415              		.thumb_func
 416              		.type	PWM_SetOneShot, %function
 417              	PWM_SetOneShot:
 418              	.LFB7:
 368:.\Generated_Source\PSoC4/PWM.c **** 
 369:.\Generated_Source\PSoC4/PWM.c **** 
 370:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 371:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetOneShot
 372:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 373:.\Generated_Source\PSoC4/PWM.c **** *
 374:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 375:.\Generated_Source\PSoC4/PWM.c **** *  Writes the register that controls whether the PWM runs
 376:.\Generated_Source\PSoC4/PWM.c **** *  continuously or stops when terminal count is reached.  By default the
 377:.\Generated_Source\PSoC4/PWM.c **** *  PWM operates in the continuous mode.
 378:.\Generated_Source\PSoC4/PWM.c **** *
 379:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 380:.\Generated_Source\PSoC4/PWM.c **** *  oneShotEnable
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 15


 381:.\Generated_Source\PSoC4/PWM.c **** *   Values:
 382:.\Generated_Source\PSoC4/PWM.c **** *     - 0 - Continuous
 383:.\Generated_Source\PSoC4/PWM.c **** *     - 1 - Enable One Shot
 384:.\Generated_Source\PSoC4/PWM.c **** *
 385:.\Generated_Source\PSoC4/PWM.c **** * Return:
 386:.\Generated_Source\PSoC4/PWM.c **** *  None
 387:.\Generated_Source\PSoC4/PWM.c **** *
 388:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 389:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetOneShot(uint32 oneShotEnable)
 390:.\Generated_Source\PSoC4/PWM.c **** {
 419              		.loc 1 390 0
 420              		.cfi_startproc
 421 0000 90B5     		push	{r4, r7, lr}
 422              		.cfi_def_cfa_offset 12
 423              		.cfi_offset 4, -12
 424              		.cfi_offset 7, -8
 425              		.cfi_offset 14, -4
 426 0002 85B0     		sub	sp, sp, #20
 427              		.cfi_def_cfa_offset 32
 428 0004 00AF     		add	r7, sp, #0
 429              		.cfi_def_cfa_register 7
 430 0006 7860     		str	r0, [r7, #4]
 391:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 392:.\Generated_Source\PSoC4/PWM.c **** 
 393:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 431              		.loc 1 393 0
 432 0008 0F23     		mov	r3, #15
 433 000a FC18     		add	r4, r7, r3
 434 000c FFF7FEFF 		bl	CyEnterCriticalSection
 435 0010 031C     		mov	r3, r0
 436 0012 2370     		strb	r3, [r4]
 394:.\Generated_Source\PSoC4/PWM.c **** 
 395:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_ONESHOT_MASK;
 437              		.loc 1 395 0
 438 0014 0B4B     		ldr	r3, .L24
 439 0016 0B4A     		ldr	r2, .L24
 440 0018 1268     		ldr	r2, [r2]
 441 001a 0B49     		ldr	r1, .L24+4
 442 001c 0A40     		and	r2, r1
 443 001e 1A60     		str	r2, [r3]
 396:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= ((uint32)((oneShotEnable & PWM_1BIT_MASK) <<
 444              		.loc 1 396 0
 445 0020 084B     		ldr	r3, .L24
 446 0022 084A     		ldr	r2, .L24
 447 0024 1168     		ldr	r1, [r2]
 448 0026 7A68     		ldr	r2, [r7, #4]
 449 0028 0120     		mov	r0, #1
 450 002a 0240     		and	r2, r0
 451 002c 9204     		lsl	r2, r2, #18
 452 002e 0A43     		orr	r2, r1
 453 0030 1A60     		str	r2, [r3]
 397:.\Generated_Source\PSoC4/PWM.c ****                                                                PWM_ONESHOT_SHIFT));
 398:.\Generated_Source\PSoC4/PWM.c **** 
 399:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 454              		.loc 1 399 0
 455 0032 0F23     		mov	r3, #15
 456 0034 FB18     		add	r3, r7, r3
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 16


 457 0036 1B78     		ldrb	r3, [r3]
 458 0038 181C     		mov	r0, r3
 459 003a FFF7FEFF 		bl	CyExitCriticalSection
 400:.\Generated_Source\PSoC4/PWM.c **** }
 460              		.loc 1 400 0
 461 003e BD46     		mov	sp, r7
 462 0040 05B0     		add	sp, sp, #20
 463              		@ sp needed
 464 0042 90BD     		pop	{r4, r7, pc}
 465              	.L25:
 466              		.align	2
 467              	.L24:
 468 0044 00010540 		.word	1074069760
 469 0048 FFFFFBFF 		.word	-262145
 470              		.cfi_endproc
 471              	.LFE7:
 472              		.size	PWM_SetOneShot, .-PWM_SetOneShot
 473              		.section	.text.PWM_SetPWMMode,"ax",%progbits
 474              		.align	2
 475              		.global	PWM_SetPWMMode
 476              		.code	16
 477              		.thumb_func
 478              		.type	PWM_SetPWMMode, %function
 479              	PWM_SetPWMMode:
 480              	.LFB8:
 401:.\Generated_Source\PSoC4/PWM.c **** 
 402:.\Generated_Source\PSoC4/PWM.c **** 
 403:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 404:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetPWMMode
 405:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 406:.\Generated_Source\PSoC4/PWM.c **** *
 407:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 408:.\Generated_Source\PSoC4/PWM.c **** *  Writes the control register that determines what mode of operation the PWM
 409:.\Generated_Source\PSoC4/PWM.c **** *  output lines are driven in.  There is a setting for what to do on a
 410:.\Generated_Source\PSoC4/PWM.c **** *  comparison match (CC_MATCH), on an overflow (OVERFLOW) and on an underflow
 411:.\Generated_Source\PSoC4/PWM.c **** *  (UNDERFLOW).  The value for each of the three must be ORed together to form
 412:.\Generated_Source\PSoC4/PWM.c **** *  the mode.
 413:.\Generated_Source\PSoC4/PWM.c **** *
 414:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 415:.\Generated_Source\PSoC4/PWM.c **** *  modeMask: A combination of three mode settings.  Mask must include a value
 416:.\Generated_Source\PSoC4/PWM.c **** *  for each of the three or use one of the preconfigured PWM settings.
 417:.\Generated_Source\PSoC4/PWM.c **** *   Values:
 418:.\Generated_Source\PSoC4/PWM.c **** *     - CC_MATCH_SET        - Set on comparison match
 419:.\Generated_Source\PSoC4/PWM.c **** *     - CC_MATCH_CLEAR      - Clear on comparison match
 420:.\Generated_Source\PSoC4/PWM.c **** *     - CC_MATCH_INVERT     - Invert on comparison match
 421:.\Generated_Source\PSoC4/PWM.c **** *     - CC_MATCH_NO_CHANGE  - No change on comparison match
 422:.\Generated_Source\PSoC4/PWM.c **** *     - OVERLOW_SET         - Set on overflow
 423:.\Generated_Source\PSoC4/PWM.c **** *     - OVERLOW_CLEAR       - Clear on  overflow
 424:.\Generated_Source\PSoC4/PWM.c **** *     - OVERLOW_INVERT      - Invert on overflow
 425:.\Generated_Source\PSoC4/PWM.c **** *     - OVERLOW_NO_CHANGE   - No change on overflow
 426:.\Generated_Source\PSoC4/PWM.c **** *     - UNDERFLOW_SET       - Set on underflow
 427:.\Generated_Source\PSoC4/PWM.c **** *     - UNDERFLOW_CLEAR     - Clear on underflow
 428:.\Generated_Source\PSoC4/PWM.c **** *     - UNDERFLOW_INVERT    - Invert on underflow
 429:.\Generated_Source\PSoC4/PWM.c **** *     - UNDERFLOW_NO_CHANGE - No change on underflow
 430:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_MODE_LEFT       - Setting for left aligned PWM.  Should be combined
 431:.\Generated_Source\PSoC4/PWM.c **** *                             with up counting mode
 432:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_MODE_RIGHT      - Setting for right aligned PWM.  Should be combined
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 17


 433:.\Generated_Source\PSoC4/PWM.c **** *                             with down counting mode
 434:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_MODE_CENTER     - Setting for center aligned PWM.  Should be
 435:.\Generated_Source\PSoC4/PWM.c **** *                             combined with up/down 0 mode
 436:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_MODE_ASYM       - Setting for asymmetric PWM.  Should be combined
 437:.\Generated_Source\PSoC4/PWM.c **** *                             with up/down 1 mode
 438:.\Generated_Source\PSoC4/PWM.c **** *
 439:.\Generated_Source\PSoC4/PWM.c **** * Return:
 440:.\Generated_Source\PSoC4/PWM.c **** *  None
 441:.\Generated_Source\PSoC4/PWM.c **** *
 442:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 443:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetPWMMode(uint32 modeMask)
 444:.\Generated_Source\PSoC4/PWM.c **** {
 481              		.loc 1 444 0
 482              		.cfi_startproc
 483 0000 80B5     		push	{r7, lr}
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 7, -8
 486              		.cfi_offset 14, -4
 487 0002 82B0     		sub	sp, sp, #8
 488              		.cfi_def_cfa_offset 16
 489 0004 00AF     		add	r7, sp, #0
 490              		.cfi_def_cfa_register 7
 491 0006 7860     		str	r0, [r7, #4]
 445:.\Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL2_REG = (modeMask & PWM_6BIT_MASK);
 492              		.loc 1 445 0
 493 0008 034B     		ldr	r3, .L27
 494 000a 7A68     		ldr	r2, [r7, #4]
 495 000c 3F21     		mov	r1, #63
 496 000e 0A40     		and	r2, r1
 497 0010 1A60     		str	r2, [r3]
 446:.\Generated_Source\PSoC4/PWM.c **** }
 498              		.loc 1 446 0
 499 0012 BD46     		mov	sp, r7
 500 0014 02B0     		add	sp, sp, #8
 501              		@ sp needed
 502 0016 80BD     		pop	{r7, pc}
 503              	.L28:
 504              		.align	2
 505              	.L27:
 506 0018 28010540 		.word	1074069800
 507              		.cfi_endproc
 508              	.LFE8:
 509              		.size	PWM_SetPWMMode, .-PWM_SetPWMMode
 510              		.section	.text.PWM_SetPWMSyncKill,"ax",%progbits
 511              		.align	2
 512              		.global	PWM_SetPWMSyncKill
 513              		.code	16
 514              		.thumb_func
 515              		.type	PWM_SetPWMSyncKill, %function
 516              	PWM_SetPWMSyncKill:
 517              	.LFB9:
 447:.\Generated_Source\PSoC4/PWM.c **** 
 448:.\Generated_Source\PSoC4/PWM.c **** 
 449:.\Generated_Source\PSoC4/PWM.c **** 
 450:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 451:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetPWMSyncKill
 452:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 18


 453:.\Generated_Source\PSoC4/PWM.c **** *
 454:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 455:.\Generated_Source\PSoC4/PWM.c **** *  Writes the register that controls whether the PWM kill signal (stop input)
 456:.\Generated_Source\PSoC4/PWM.c **** *  causes asynchronous or synchronous kill operation.  By default the kill
 457:.\Generated_Source\PSoC4/PWM.c **** *  operation is asynchronous.  This functionality is only applicable to the PWM
 458:.\Generated_Source\PSoC4/PWM.c **** *  and PWM with dead time modes.
 459:.\Generated_Source\PSoC4/PWM.c **** *
 460:.\Generated_Source\PSoC4/PWM.c **** *  For Synchronous mode the kill signal disables both the line and line_n
 461:.\Generated_Source\PSoC4/PWM.c **** *  signals until the next terminal count.
 462:.\Generated_Source\PSoC4/PWM.c **** *
 463:.\Generated_Source\PSoC4/PWM.c **** *  For Asynchronous mode the kill signal disables both the line and line_n
 464:.\Generated_Source\PSoC4/PWM.c **** *  signals when the kill signal is present.  This mode should only be used
 465:.\Generated_Source\PSoC4/PWM.c **** *  when the kill signal (stop input) is configured in the pass through mode
 466:.\Generated_Source\PSoC4/PWM.c **** *  (Level sensitive signal).
 467:.\Generated_Source\PSoC4/PWM.c **** 
 468:.\Generated_Source\PSoC4/PWM.c **** *
 469:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 470:.\Generated_Source\PSoC4/PWM.c **** *  syncKillEnable
 471:.\Generated_Source\PSoC4/PWM.c **** *   Values:
 472:.\Generated_Source\PSoC4/PWM.c **** *     - 0 - Asynchronous
 473:.\Generated_Source\PSoC4/PWM.c **** *     - 1 - Synchronous
 474:.\Generated_Source\PSoC4/PWM.c **** *
 475:.\Generated_Source\PSoC4/PWM.c **** * Return:
 476:.\Generated_Source\PSoC4/PWM.c **** *  None
 477:.\Generated_Source\PSoC4/PWM.c **** *
 478:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 479:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetPWMSyncKill(uint32 syncKillEnable)
 480:.\Generated_Source\PSoC4/PWM.c **** {
 518              		.loc 1 480 0
 519              		.cfi_startproc
 520 0000 90B5     		push	{r4, r7, lr}
 521              		.cfi_def_cfa_offset 12
 522              		.cfi_offset 4, -12
 523              		.cfi_offset 7, -8
 524              		.cfi_offset 14, -4
 525 0002 85B0     		sub	sp, sp, #20
 526              		.cfi_def_cfa_offset 32
 527 0004 00AF     		add	r7, sp, #0
 528              		.cfi_def_cfa_register 7
 529 0006 7860     		str	r0, [r7, #4]
 481:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 482:.\Generated_Source\PSoC4/PWM.c **** 
 483:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 530              		.loc 1 483 0
 531 0008 0F23     		mov	r3, #15
 532 000a FC18     		add	r4, r7, r3
 533 000c FFF7FEFF 		bl	CyEnterCriticalSection
 534 0010 031C     		mov	r3, r0
 535 0012 2370     		strb	r3, [r4]
 484:.\Generated_Source\PSoC4/PWM.c **** 
 485:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_PWM_SYNC_KILL_MASK;
 536              		.loc 1 485 0
 537 0014 0B4B     		ldr	r3, .L30
 538 0016 0B4A     		ldr	r2, .L30
 539 0018 1268     		ldr	r2, [r2]
 540 001a 0421     		mov	r1, #4
 541 001c 8A43     		bic	r2, r1
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 19


 542 001e 1A60     		str	r2, [r3]
 486:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= ((uint32)((syncKillEnable & PWM_1BIT_MASK)  <<
 543              		.loc 1 486 0
 544 0020 084B     		ldr	r3, .L30
 545 0022 084A     		ldr	r2, .L30
 546 0024 1168     		ldr	r1, [r2]
 547 0026 7A68     		ldr	r2, [r7, #4]
 548 0028 0120     		mov	r0, #1
 549 002a 0240     		and	r2, r0
 550 002c 9200     		lsl	r2, r2, #2
 551 002e 0A43     		orr	r2, r1
 552 0030 1A60     		str	r2, [r3]
 487:.\Generated_Source\PSoC4/PWM.c ****                                                PWM_PWM_SYNC_KILL_SHIFT));
 488:.\Generated_Source\PSoC4/PWM.c **** 
 489:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 553              		.loc 1 489 0
 554 0032 0F23     		mov	r3, #15
 555 0034 FB18     		add	r3, r7, r3
 556 0036 1B78     		ldrb	r3, [r3]
 557 0038 181C     		mov	r0, r3
 558 003a FFF7FEFF 		bl	CyExitCriticalSection
 490:.\Generated_Source\PSoC4/PWM.c **** }
 559              		.loc 1 490 0
 560 003e BD46     		mov	sp, r7
 561 0040 05B0     		add	sp, sp, #20
 562              		@ sp needed
 563 0042 90BD     		pop	{r4, r7, pc}
 564              	.L31:
 565              		.align	2
 566              	.L30:
 567 0044 00010540 		.word	1074069760
 568              		.cfi_endproc
 569              	.LFE9:
 570              		.size	PWM_SetPWMSyncKill, .-PWM_SetPWMSyncKill
 571              		.section	.text.PWM_SetPWMStopOnKill,"ax",%progbits
 572              		.align	2
 573              		.global	PWM_SetPWMStopOnKill
 574              		.code	16
 575              		.thumb_func
 576              		.type	PWM_SetPWMStopOnKill, %function
 577              	PWM_SetPWMStopOnKill:
 578              	.LFB10:
 491:.\Generated_Source\PSoC4/PWM.c **** 
 492:.\Generated_Source\PSoC4/PWM.c **** 
 493:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 494:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetPWMStopOnKill
 495:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 496:.\Generated_Source\PSoC4/PWM.c **** *
 497:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 498:.\Generated_Source\PSoC4/PWM.c **** *  Writes the register that controls whether the PWM kill signal (stop input)
 499:.\Generated_Source\PSoC4/PWM.c **** *  causes the PWM counter to stop.  By default the kill operation does not stop
 500:.\Generated_Source\PSoC4/PWM.c **** *  the counter.  This functionality is only applicable to the three PWM modes.
 501:.\Generated_Source\PSoC4/PWM.c **** *
 502:.\Generated_Source\PSoC4/PWM.c **** *
 503:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 504:.\Generated_Source\PSoC4/PWM.c **** *  stopOnKillEnable
 505:.\Generated_Source\PSoC4/PWM.c **** *   Values:
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 20


 506:.\Generated_Source\PSoC4/PWM.c **** *     - 0 - Don't stop
 507:.\Generated_Source\PSoC4/PWM.c **** *     - 1 - Stop
 508:.\Generated_Source\PSoC4/PWM.c **** *
 509:.\Generated_Source\PSoC4/PWM.c **** * Return:
 510:.\Generated_Source\PSoC4/PWM.c **** *  None
 511:.\Generated_Source\PSoC4/PWM.c **** *
 512:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 513:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetPWMStopOnKill(uint32 stopOnKillEnable)
 514:.\Generated_Source\PSoC4/PWM.c **** {
 579              		.loc 1 514 0
 580              		.cfi_startproc
 581 0000 90B5     		push	{r4, r7, lr}
 582              		.cfi_def_cfa_offset 12
 583              		.cfi_offset 4, -12
 584              		.cfi_offset 7, -8
 585              		.cfi_offset 14, -4
 586 0002 85B0     		sub	sp, sp, #20
 587              		.cfi_def_cfa_offset 32
 588 0004 00AF     		add	r7, sp, #0
 589              		.cfi_def_cfa_register 7
 590 0006 7860     		str	r0, [r7, #4]
 515:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 516:.\Generated_Source\PSoC4/PWM.c **** 
 517:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 591              		.loc 1 517 0
 592 0008 0F23     		mov	r3, #15
 593 000a FC18     		add	r4, r7, r3
 594 000c FFF7FEFF 		bl	CyEnterCriticalSection
 595 0010 031C     		mov	r3, r0
 596 0012 2370     		strb	r3, [r4]
 518:.\Generated_Source\PSoC4/PWM.c **** 
 519:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_PWM_STOP_KILL_MASK;
 597              		.loc 1 519 0
 598 0014 0B4B     		ldr	r3, .L33
 599 0016 0B4A     		ldr	r2, .L33
 600 0018 1268     		ldr	r2, [r2]
 601 001a 0821     		mov	r1, #8
 602 001c 8A43     		bic	r2, r1
 603 001e 1A60     		str	r2, [r3]
 520:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= ((uint32)((stopOnKillEnable & PWM_1BIT_MASK)  <<
 604              		.loc 1 520 0
 605 0020 084B     		ldr	r3, .L33
 606 0022 084A     		ldr	r2, .L33
 607 0024 1168     		ldr	r1, [r2]
 608 0026 7A68     		ldr	r2, [r7, #4]
 609 0028 0120     		mov	r0, #1
 610 002a 0240     		and	r2, r0
 611 002c D200     		lsl	r2, r2, #3
 612 002e 0A43     		orr	r2, r1
 613 0030 1A60     		str	r2, [r3]
 521:.\Generated_Source\PSoC4/PWM.c ****                                                          PWM_PWM_STOP_KILL_SHIFT));
 522:.\Generated_Source\PSoC4/PWM.c **** 
 523:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 614              		.loc 1 523 0
 615 0032 0F23     		mov	r3, #15
 616 0034 FB18     		add	r3, r7, r3
 617 0036 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 21


 618 0038 181C     		mov	r0, r3
 619 003a FFF7FEFF 		bl	CyExitCriticalSection
 524:.\Generated_Source\PSoC4/PWM.c **** }
 620              		.loc 1 524 0
 621 003e BD46     		mov	sp, r7
 622 0040 05B0     		add	sp, sp, #20
 623              		@ sp needed
 624 0042 90BD     		pop	{r4, r7, pc}
 625              	.L34:
 626              		.align	2
 627              	.L33:
 628 0044 00010540 		.word	1074069760
 629              		.cfi_endproc
 630              	.LFE10:
 631              		.size	PWM_SetPWMStopOnKill, .-PWM_SetPWMStopOnKill
 632              		.section	.text.PWM_SetPWMDeadTime,"ax",%progbits
 633              		.align	2
 634              		.global	PWM_SetPWMDeadTime
 635              		.code	16
 636              		.thumb_func
 637              		.type	PWM_SetPWMDeadTime, %function
 638              	PWM_SetPWMDeadTime:
 639              	.LFB11:
 525:.\Generated_Source\PSoC4/PWM.c **** 
 526:.\Generated_Source\PSoC4/PWM.c **** 
 527:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 528:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetPWMDeadTime
 529:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 530:.\Generated_Source\PSoC4/PWM.c **** *
 531:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 532:.\Generated_Source\PSoC4/PWM.c **** *  Writes the dead time control value.  This value delays the rising edge of
 533:.\Generated_Source\PSoC4/PWM.c **** *  both the line and line_n signals the designated number of cycles resulting
 534:.\Generated_Source\PSoC4/PWM.c **** *  in both signals being inactive for that many cycles.  This functionality is
 535:.\Generated_Source\PSoC4/PWM.c **** *  only applicable to the PWM in the dead time mode.
 536:.\Generated_Source\PSoC4/PWM.c **** 
 537:.\Generated_Source\PSoC4/PWM.c **** *
 538:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 539:.\Generated_Source\PSoC4/PWM.c **** *  Dead time to insert
 540:.\Generated_Source\PSoC4/PWM.c **** *   Values: 0 to 255
 541:.\Generated_Source\PSoC4/PWM.c **** *
 542:.\Generated_Source\PSoC4/PWM.c **** * Return:
 543:.\Generated_Source\PSoC4/PWM.c **** *  None
 544:.\Generated_Source\PSoC4/PWM.c **** *
 545:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 546:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetPWMDeadTime(uint32 deadTime)
 547:.\Generated_Source\PSoC4/PWM.c **** {
 640              		.loc 1 547 0
 641              		.cfi_startproc
 642 0000 90B5     		push	{r4, r7, lr}
 643              		.cfi_def_cfa_offset 12
 644              		.cfi_offset 4, -12
 645              		.cfi_offset 7, -8
 646              		.cfi_offset 14, -4
 647 0002 85B0     		sub	sp, sp, #20
 648              		.cfi_def_cfa_offset 32
 649 0004 00AF     		add	r7, sp, #0
 650              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 22


 651 0006 7860     		str	r0, [r7, #4]
 548:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 549:.\Generated_Source\PSoC4/PWM.c **** 
 550:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 652              		.loc 1 550 0
 653 0008 0F23     		mov	r3, #15
 654 000a FC18     		add	r4, r7, r3
 655 000c FFF7FEFF 		bl	CyEnterCriticalSection
 656 0010 031C     		mov	r3, r0
 657 0012 2370     		strb	r3, [r4]
 551:.\Generated_Source\PSoC4/PWM.c **** 
 552:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_PRESCALER_MASK;
 658              		.loc 1 552 0
 659 0014 0B4B     		ldr	r3, .L36
 660 0016 0B4A     		ldr	r2, .L36
 661 0018 1268     		ldr	r2, [r2]
 662 001a 0B49     		ldr	r1, .L36+4
 663 001c 0A40     		and	r2, r1
 664 001e 1A60     		str	r2, [r3]
 553:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= ((uint32)((deadTime & PWM_8BIT_MASK) <<
 665              		.loc 1 553 0
 666 0020 084B     		ldr	r3, .L36
 667 0022 084A     		ldr	r2, .L36
 668 0024 1168     		ldr	r1, [r2]
 669 0026 7A68     		ldr	r2, [r7, #4]
 670 0028 1202     		lsl	r2, r2, #8
 671 002a 1204     		lsl	r2, r2, #16
 672 002c 120C     		lsr	r2, r2, #16
 673 002e 0A43     		orr	r2, r1
 674 0030 1A60     		str	r2, [r3]
 554:.\Generated_Source\PSoC4/PWM.c ****                                                           PWM_PRESCALER_SHIFT));
 555:.\Generated_Source\PSoC4/PWM.c **** 
 556:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 675              		.loc 1 556 0
 676 0032 0F23     		mov	r3, #15
 677 0034 FB18     		add	r3, r7, r3
 678 0036 1B78     		ldrb	r3, [r3]
 679 0038 181C     		mov	r0, r3
 680 003a FFF7FEFF 		bl	CyExitCriticalSection
 557:.\Generated_Source\PSoC4/PWM.c **** }
 681              		.loc 1 557 0
 682 003e BD46     		mov	sp, r7
 683 0040 05B0     		add	sp, sp, #20
 684              		@ sp needed
 685 0042 90BD     		pop	{r4, r7, pc}
 686              	.L37:
 687              		.align	2
 688              	.L36:
 689 0044 00010540 		.word	1074069760
 690 0048 FF00FFFF 		.word	-65281
 691              		.cfi_endproc
 692              	.LFE11:
 693              		.size	PWM_SetPWMDeadTime, .-PWM_SetPWMDeadTime
 694              		.section	.text.PWM_SetPWMInvert,"ax",%progbits
 695              		.align	2
 696              		.global	PWM_SetPWMInvert
 697              		.code	16
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 23


 698              		.thumb_func
 699              		.type	PWM_SetPWMInvert, %function
 700              	PWM_SetPWMInvert:
 701              	.LFB12:
 558:.\Generated_Source\PSoC4/PWM.c **** 
 559:.\Generated_Source\PSoC4/PWM.c **** 
 560:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 561:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetPWMInvert
 562:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 563:.\Generated_Source\PSoC4/PWM.c **** *
 564:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 565:.\Generated_Source\PSoC4/PWM.c **** *  Writes the bits that control whether the line and line_n outputs are
 566:.\Generated_Source\PSoC4/PWM.c **** *  inverted from their normal output values.  This functionality is only
 567:.\Generated_Source\PSoC4/PWM.c **** *  applicable to the three PWM modes.
 568:.\Generated_Source\PSoC4/PWM.c **** *
 569:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 570:.\Generated_Source\PSoC4/PWM.c **** *  mask: Mask of outputs to invert.
 571:.\Generated_Source\PSoC4/PWM.c **** *   Values:
 572:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_INVERT_LINE   - Inverts the line output
 573:.\Generated_Source\PSoC4/PWM.c **** *         - PWM_INVERT_LINE_N - Inverts the line_n output
 574:.\Generated_Source\PSoC4/PWM.c **** *
 575:.\Generated_Source\PSoC4/PWM.c **** * Return:
 576:.\Generated_Source\PSoC4/PWM.c **** *  None
 577:.\Generated_Source\PSoC4/PWM.c **** *
 578:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetPWMInvert(uint32 mask)
 580:.\Generated_Source\PSoC4/PWM.c **** {
 702              		.loc 1 580 0
 703              		.cfi_startproc
 704 0000 90B5     		push	{r4, r7, lr}
 705              		.cfi_def_cfa_offset 12
 706              		.cfi_offset 4, -12
 707              		.cfi_offset 7, -8
 708              		.cfi_offset 14, -4
 709 0002 85B0     		sub	sp, sp, #20
 710              		.cfi_def_cfa_offset 32
 711 0004 00AF     		add	r7, sp, #0
 712              		.cfi_def_cfa_register 7
 713 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 582:.\Generated_Source\PSoC4/PWM.c **** 
 583:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 714              		.loc 1 583 0
 715 0008 0F23     		mov	r3, #15
 716 000a FC18     		add	r4, r7, r3
 717 000c FFF7FEFF 		bl	CyEnterCriticalSection
 718 0010 031C     		mov	r3, r0
 719 0012 2370     		strb	r3, [r4]
 584:.\Generated_Source\PSoC4/PWM.c **** 
 585:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_INV_OUT_MASK;
 720              		.loc 1 585 0
 721 0014 0A4B     		ldr	r3, .L39
 722 0016 0A4A     		ldr	r2, .L39
 723 0018 1268     		ldr	r2, [r2]
 724 001a 0A49     		ldr	r1, .L39+4
 725 001c 0A40     		and	r2, r1
 726 001e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 24


 586:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= mask;
 727              		.loc 1 586 0
 728 0020 074B     		ldr	r3, .L39
 729 0022 074A     		ldr	r2, .L39
 730 0024 1168     		ldr	r1, [r2]
 731 0026 7A68     		ldr	r2, [r7, #4]
 732 0028 0A43     		orr	r2, r1
 733 002a 1A60     		str	r2, [r3]
 587:.\Generated_Source\PSoC4/PWM.c **** 
 588:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 734              		.loc 1 588 0
 735 002c 0F23     		mov	r3, #15
 736 002e FB18     		add	r3, r7, r3
 737 0030 1B78     		ldrb	r3, [r3]
 738 0032 181C     		mov	r0, r3
 739 0034 FFF7FEFF 		bl	CyExitCriticalSection
 589:.\Generated_Source\PSoC4/PWM.c **** }
 740              		.loc 1 589 0
 741 0038 BD46     		mov	sp, r7
 742 003a 05B0     		add	sp, sp, #20
 743              		@ sp needed
 744 003c 90BD     		pop	{r4, r7, pc}
 745              	.L40:
 746 003e C046     		.align	2
 747              	.L39:
 748 0040 00010540 		.word	1074069760
 749 0044 FFFFCFFF 		.word	-3145729
 750              		.cfi_endproc
 751              	.LFE12:
 752              		.size	PWM_SetPWMInvert, .-PWM_SetPWMInvert
 753              		.section	.text.PWM_WriteCounter,"ax",%progbits
 754              		.align	2
 755              		.global	PWM_WriteCounter
 756              		.code	16
 757              		.thumb_func
 758              		.type	PWM_WriteCounter, %function
 759              	PWM_WriteCounter:
 760              	.LFB13:
 590:.\Generated_Source\PSoC4/PWM.c **** 
 591:.\Generated_Source\PSoC4/PWM.c **** 
 592:.\Generated_Source\PSoC4/PWM.c **** 
 593:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 594:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_WriteCounter
 595:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 596:.\Generated_Source\PSoC4/PWM.c **** *
 597:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 598:.\Generated_Source\PSoC4/PWM.c **** *  Writes a new 16bit counter value directly into the counter register, thus
 599:.\Generated_Source\PSoC4/PWM.c **** *  setting the counter (not the period) to the value written. It is not
 600:.\Generated_Source\PSoC4/PWM.c **** *  advised to write to this field when the counter is running.
 601:.\Generated_Source\PSoC4/PWM.c **** *
 602:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 603:.\Generated_Source\PSoC4/PWM.c **** *  count: value to write
 604:.\Generated_Source\PSoC4/PWM.c **** *
 605:.\Generated_Source\PSoC4/PWM.c **** * Return:
 606:.\Generated_Source\PSoC4/PWM.c **** *  None
 607:.\Generated_Source\PSoC4/PWM.c **** *
 608:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 25


 609:.\Generated_Source\PSoC4/PWM.c **** void PWM_WriteCounter(uint32 count)
 610:.\Generated_Source\PSoC4/PWM.c **** {
 761              		.loc 1 610 0
 762              		.cfi_startproc
 763 0000 80B5     		push	{r7, lr}
 764              		.cfi_def_cfa_offset 8
 765              		.cfi_offset 7, -8
 766              		.cfi_offset 14, -4
 767 0002 82B0     		sub	sp, sp, #8
 768              		.cfi_def_cfa_offset 16
 769 0004 00AF     		add	r7, sp, #0
 770              		.cfi_def_cfa_register 7
 771 0006 7860     		str	r0, [r7, #4]
 611:.\Generated_Source\PSoC4/PWM.c ****     PWM_COUNTER_REG = (count & PWM_16BIT_MASK);
 772              		.loc 1 611 0
 773 0008 034B     		ldr	r3, .L42
 774 000a 7A68     		ldr	r2, [r7, #4]
 775 000c 1204     		lsl	r2, r2, #16
 776 000e 120C     		lsr	r2, r2, #16
 777 0010 1A60     		str	r2, [r3]
 612:.\Generated_Source\PSoC4/PWM.c **** }
 778              		.loc 1 612 0
 779 0012 BD46     		mov	sp, r7
 780 0014 02B0     		add	sp, sp, #8
 781              		@ sp needed
 782 0016 80BD     		pop	{r7, pc}
 783              	.L43:
 784              		.align	2
 785              	.L42:
 786 0018 08010540 		.word	1074069768
 787              		.cfi_endproc
 788              	.LFE13:
 789              		.size	PWM_WriteCounter, .-PWM_WriteCounter
 790              		.section	.text.PWM_ReadCounter,"ax",%progbits
 791              		.align	2
 792              		.global	PWM_ReadCounter
 793              		.code	16
 794              		.thumb_func
 795              		.type	PWM_ReadCounter, %function
 796              	PWM_ReadCounter:
 797              	.LFB14:
 613:.\Generated_Source\PSoC4/PWM.c **** 
 614:.\Generated_Source\PSoC4/PWM.c **** 
 615:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 616:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadCounter
 617:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 618:.\Generated_Source\PSoC4/PWM.c **** *
 619:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 620:.\Generated_Source\PSoC4/PWM.c **** *  Reads the current counter value.
 621:.\Generated_Source\PSoC4/PWM.c **** *
 622:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 623:.\Generated_Source\PSoC4/PWM.c **** *  None
 624:.\Generated_Source\PSoC4/PWM.c **** *
 625:.\Generated_Source\PSoC4/PWM.c **** * Return:
 626:.\Generated_Source\PSoC4/PWM.c **** *  Current counter value
 627:.\Generated_Source\PSoC4/PWM.c **** *
 628:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 26


 629:.\Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadCounter(void)
 630:.\Generated_Source\PSoC4/PWM.c **** {
 798              		.loc 1 630 0
 799              		.cfi_startproc
 800 0000 80B5     		push	{r7, lr}
 801              		.cfi_def_cfa_offset 8
 802              		.cfi_offset 7, -8
 803              		.cfi_offset 14, -4
 804 0002 00AF     		add	r7, sp, #0
 805              		.cfi_def_cfa_register 7
 631:.\Generated_Source\PSoC4/PWM.c ****     return (PWM_COUNTER_REG & PWM_16BIT_MASK);
 806              		.loc 1 631 0
 807 0004 034B     		ldr	r3, .L46
 808 0006 1B68     		ldr	r3, [r3]
 809 0008 1B04     		lsl	r3, r3, #16
 810 000a 1B0C     		lsr	r3, r3, #16
 632:.\Generated_Source\PSoC4/PWM.c **** }
 811              		.loc 1 632 0
 812 000c 181C     		mov	r0, r3
 813 000e BD46     		mov	sp, r7
 814              		@ sp needed
 815 0010 80BD     		pop	{r7, pc}
 816              	.L47:
 817 0012 C046     		.align	2
 818              	.L46:
 819 0014 08010540 		.word	1074069768
 820              		.cfi_endproc
 821              	.LFE14:
 822              		.size	PWM_ReadCounter, .-PWM_ReadCounter
 823              		.section	.text.PWM_SetCounterMode,"ax",%progbits
 824              		.align	2
 825              		.global	PWM_SetCounterMode
 826              		.code	16
 827              		.thumb_func
 828              		.type	PWM_SetCounterMode, %function
 829              	PWM_SetCounterMode:
 830              	.LFB15:
 633:.\Generated_Source\PSoC4/PWM.c **** 
 634:.\Generated_Source\PSoC4/PWM.c **** 
 635:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 636:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetCounterMode
 637:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 638:.\Generated_Source\PSoC4/PWM.c **** *
 639:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 640:.\Generated_Source\PSoC4/PWM.c **** *  Sets the counter mode.  Applicable to all modes except Quadrature Decoder
 641:.\Generated_Source\PSoC4/PWM.c **** *  and the PWM with a pseudo random output.
 642:.\Generated_Source\PSoC4/PWM.c **** *
 643:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 644:.\Generated_Source\PSoC4/PWM.c **** *  counterMode: Enumerated counter type values
 645:.\Generated_Source\PSoC4/PWM.c **** *   Values:
 646:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_COUNT_UP       - Counts up
 647:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_COUNT_DOWN     - Counts down
 648:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_COUNT_UPDOWN0  - Counts up and down. Terminal count
 649:.\Generated_Source\PSoC4/PWM.c **** *                                         generated when counter reaches 0
 650:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_COUNT_UPDOWN1  - Counts up and down. Terminal count
 651:.\Generated_Source\PSoC4/PWM.c **** *                                         generated both when counter reaches 0
 652:.\Generated_Source\PSoC4/PWM.c **** *                                         and period
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 27


 653:.\Generated_Source\PSoC4/PWM.c **** *
 654:.\Generated_Source\PSoC4/PWM.c **** * Return:
 655:.\Generated_Source\PSoC4/PWM.c **** *  None
 656:.\Generated_Source\PSoC4/PWM.c **** *
 657:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 658:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetCounterMode(uint32 counterMode)
 659:.\Generated_Source\PSoC4/PWM.c **** {
 831              		.loc 1 659 0
 832              		.cfi_startproc
 833 0000 90B5     		push	{r4, r7, lr}
 834              		.cfi_def_cfa_offset 12
 835              		.cfi_offset 4, -12
 836              		.cfi_offset 7, -8
 837              		.cfi_offset 14, -4
 838 0002 85B0     		sub	sp, sp, #20
 839              		.cfi_def_cfa_offset 32
 840 0004 00AF     		add	r7, sp, #0
 841              		.cfi_def_cfa_register 7
 842 0006 7860     		str	r0, [r7, #4]
 660:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 661:.\Generated_Source\PSoC4/PWM.c **** 
 662:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 843              		.loc 1 662 0
 844 0008 0F23     		mov	r3, #15
 845 000a FC18     		add	r4, r7, r3
 846 000c FFF7FEFF 		bl	CyEnterCriticalSection
 847 0010 031C     		mov	r3, r0
 848 0012 2370     		strb	r3, [r4]
 663:.\Generated_Source\PSoC4/PWM.c **** 
 664:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_UPDOWN_MASK;
 849              		.loc 1 664 0
 850 0014 0A4B     		ldr	r3, .L49
 851 0016 0A4A     		ldr	r2, .L49
 852 0018 1268     		ldr	r2, [r2]
 853 001a 0A49     		ldr	r1, .L49+4
 854 001c 0A40     		and	r2, r1
 855 001e 1A60     		str	r2, [r3]
 665:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= counterMode;
 856              		.loc 1 665 0
 857 0020 074B     		ldr	r3, .L49
 858 0022 074A     		ldr	r2, .L49
 859 0024 1168     		ldr	r1, [r2]
 860 0026 7A68     		ldr	r2, [r7, #4]
 861 0028 0A43     		orr	r2, r1
 862 002a 1A60     		str	r2, [r3]
 666:.\Generated_Source\PSoC4/PWM.c **** 
 667:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 863              		.loc 1 667 0
 864 002c 0F23     		mov	r3, #15
 865 002e FB18     		add	r3, r7, r3
 866 0030 1B78     		ldrb	r3, [r3]
 867 0032 181C     		mov	r0, r3
 868 0034 FFF7FEFF 		bl	CyExitCriticalSection
 668:.\Generated_Source\PSoC4/PWM.c **** }
 869              		.loc 1 668 0
 870 0038 BD46     		mov	sp, r7
 871 003a 05B0     		add	sp, sp, #20
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 28


 872              		@ sp needed
 873 003c 90BD     		pop	{r4, r7, pc}
 874              	.L50:
 875 003e C046     		.align	2
 876              	.L49:
 877 0040 00010540 		.word	1074069760
 878 0044 FFFFFCFF 		.word	-196609
 879              		.cfi_endproc
 880              	.LFE15:
 881              		.size	PWM_SetCounterMode, .-PWM_SetCounterMode
 882              		.section	.text.PWM_WritePeriod,"ax",%progbits
 883              		.align	2
 884              		.global	PWM_WritePeriod
 885              		.code	16
 886              		.thumb_func
 887              		.type	PWM_WritePeriod, %function
 888              	PWM_WritePeriod:
 889              	.LFB16:
 669:.\Generated_Source\PSoC4/PWM.c **** 
 670:.\Generated_Source\PSoC4/PWM.c **** 
 671:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 672:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_WritePeriod
 673:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 674:.\Generated_Source\PSoC4/PWM.c **** *
 675:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 676:.\Generated_Source\PSoC4/PWM.c **** *  Writes the 16 bit period register with the new period value.
 677:.\Generated_Source\PSoC4/PWM.c **** *  To cause the counter to count for N cycles this register should be written
 678:.\Generated_Source\PSoC4/PWM.c **** *  with N-1 (counts from 0 to period inclusive).
 679:.\Generated_Source\PSoC4/PWM.c **** *
 680:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 681:.\Generated_Source\PSoC4/PWM.c **** *  period: Period value
 682:.\Generated_Source\PSoC4/PWM.c **** *
 683:.\Generated_Source\PSoC4/PWM.c **** * Return:
 684:.\Generated_Source\PSoC4/PWM.c **** *  None
 685:.\Generated_Source\PSoC4/PWM.c **** *
 686:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 687:.\Generated_Source\PSoC4/PWM.c **** void PWM_WritePeriod(uint32 period)
 688:.\Generated_Source\PSoC4/PWM.c **** {
 890              		.loc 1 688 0
 891              		.cfi_startproc
 892 0000 80B5     		push	{r7, lr}
 893              		.cfi_def_cfa_offset 8
 894              		.cfi_offset 7, -8
 895              		.cfi_offset 14, -4
 896 0002 82B0     		sub	sp, sp, #8
 897              		.cfi_def_cfa_offset 16
 898 0004 00AF     		add	r7, sp, #0
 899              		.cfi_def_cfa_register 7
 900 0006 7860     		str	r0, [r7, #4]
 689:.\Generated_Source\PSoC4/PWM.c ****     PWM_PERIOD_REG = (period & PWM_16BIT_MASK);
 901              		.loc 1 689 0
 902 0008 034B     		ldr	r3, .L52
 903 000a 7A68     		ldr	r2, [r7, #4]
 904 000c 1204     		lsl	r2, r2, #16
 905 000e 120C     		lsr	r2, r2, #16
 906 0010 1A60     		str	r2, [r3]
 690:.\Generated_Source\PSoC4/PWM.c **** }
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 29


 907              		.loc 1 690 0
 908 0012 BD46     		mov	sp, r7
 909 0014 02B0     		add	sp, sp, #8
 910              		@ sp needed
 911 0016 80BD     		pop	{r7, pc}
 912              	.L53:
 913              		.align	2
 914              	.L52:
 915 0018 14010540 		.word	1074069780
 916              		.cfi_endproc
 917              	.LFE16:
 918              		.size	PWM_WritePeriod, .-PWM_WritePeriod
 919              		.section	.text.PWM_ReadPeriod,"ax",%progbits
 920              		.align	2
 921              		.global	PWM_ReadPeriod
 922              		.code	16
 923              		.thumb_func
 924              		.type	PWM_ReadPeriod, %function
 925              	PWM_ReadPeriod:
 926              	.LFB17:
 691:.\Generated_Source\PSoC4/PWM.c **** 
 692:.\Generated_Source\PSoC4/PWM.c **** 
 693:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 694:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadPeriod
 695:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 696:.\Generated_Source\PSoC4/PWM.c **** *
 697:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 698:.\Generated_Source\PSoC4/PWM.c **** *  Reads the 16 bit period register.
 699:.\Generated_Source\PSoC4/PWM.c **** *
 700:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 701:.\Generated_Source\PSoC4/PWM.c **** *  None
 702:.\Generated_Source\PSoC4/PWM.c **** *
 703:.\Generated_Source\PSoC4/PWM.c **** * Return:
 704:.\Generated_Source\PSoC4/PWM.c **** *  Period value
 705:.\Generated_Source\PSoC4/PWM.c **** *
 706:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 707:.\Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadPeriod(void)
 708:.\Generated_Source\PSoC4/PWM.c **** {
 927              		.loc 1 708 0
 928              		.cfi_startproc
 929 0000 80B5     		push	{r7, lr}
 930              		.cfi_def_cfa_offset 8
 931              		.cfi_offset 7, -8
 932              		.cfi_offset 14, -4
 933 0002 00AF     		add	r7, sp, #0
 934              		.cfi_def_cfa_register 7
 709:.\Generated_Source\PSoC4/PWM.c ****     return (PWM_PERIOD_REG & PWM_16BIT_MASK);
 935              		.loc 1 709 0
 936 0004 034B     		ldr	r3, .L56
 937 0006 1B68     		ldr	r3, [r3]
 938 0008 1B04     		lsl	r3, r3, #16
 939 000a 1B0C     		lsr	r3, r3, #16
 710:.\Generated_Source\PSoC4/PWM.c **** }
 940              		.loc 1 710 0
 941 000c 181C     		mov	r0, r3
 942 000e BD46     		mov	sp, r7
 943              		@ sp needed
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 30


 944 0010 80BD     		pop	{r7, pc}
 945              	.L57:
 946 0012 C046     		.align	2
 947              	.L56:
 948 0014 14010540 		.word	1074069780
 949              		.cfi_endproc
 950              	.LFE17:
 951              		.size	PWM_ReadPeriod, .-PWM_ReadPeriod
 952              		.section	.text.PWM_SetCompareSwap,"ax",%progbits
 953              		.align	2
 954              		.global	PWM_SetCompareSwap
 955              		.code	16
 956              		.thumb_func
 957              		.type	PWM_SetCompareSwap, %function
 958              	PWM_SetCompareSwap:
 959              	.LFB18:
 711:.\Generated_Source\PSoC4/PWM.c **** 
 712:.\Generated_Source\PSoC4/PWM.c **** 
 713:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 714:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetCompareSwap
 715:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 716:.\Generated_Source\PSoC4/PWM.c **** *
 717:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 718:.\Generated_Source\PSoC4/PWM.c **** *  Writes the register that controls whether the compare registers are
 719:.\Generated_Source\PSoC4/PWM.c **** *  swapped. When enabled in the Timer/Counter mode(without capture) the swap
 720:.\Generated_Source\PSoC4/PWM.c **** *  occurs at a TC event. In the PWM mode the swap occurs at the next TC event
 721:.\Generated_Source\PSoC4/PWM.c **** *  following a hardware switch event.
 722:.\Generated_Source\PSoC4/PWM.c **** *
 723:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 724:.\Generated_Source\PSoC4/PWM.c **** *  swapEnable
 725:.\Generated_Source\PSoC4/PWM.c **** *   Values:
 726:.\Generated_Source\PSoC4/PWM.c **** *     - 0 - Disable swap
 727:.\Generated_Source\PSoC4/PWM.c **** *     - 1 - Enable swap
 728:.\Generated_Source\PSoC4/PWM.c **** *
 729:.\Generated_Source\PSoC4/PWM.c **** * Return:
 730:.\Generated_Source\PSoC4/PWM.c **** *  None
 731:.\Generated_Source\PSoC4/PWM.c **** *
 732:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 733:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetCompareSwap(uint32 swapEnable)
 734:.\Generated_Source\PSoC4/PWM.c **** {
 960              		.loc 1 734 0
 961              		.cfi_startproc
 962 0000 90B5     		push	{r4, r7, lr}
 963              		.cfi_def_cfa_offset 12
 964              		.cfi_offset 4, -12
 965              		.cfi_offset 7, -8
 966              		.cfi_offset 14, -4
 967 0002 85B0     		sub	sp, sp, #20
 968              		.cfi_def_cfa_offset 32
 969 0004 00AF     		add	r7, sp, #0
 970              		.cfi_def_cfa_register 7
 971 0006 7860     		str	r0, [r7, #4]
 735:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 736:.\Generated_Source\PSoC4/PWM.c **** 
 737:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 972              		.loc 1 737 0
 973 0008 0F23     		mov	r3, #15
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 31


 974 000a FC18     		add	r4, r7, r3
 975 000c FFF7FEFF 		bl	CyEnterCriticalSection
 976 0010 031C     		mov	r3, r0
 977 0012 2370     		strb	r3, [r4]
 738:.\Generated_Source\PSoC4/PWM.c **** 
 739:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_RELOAD_CC_MASK;
 978              		.loc 1 739 0
 979 0014 0B4B     		ldr	r3, .L59
 980 0016 0B4A     		ldr	r2, .L59
 981 0018 1268     		ldr	r2, [r2]
 982 001a 0121     		mov	r1, #1
 983 001c 8A43     		bic	r2, r1
 984 001e 1A60     		str	r2, [r3]
 740:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= (swapEnable & PWM_1BIT_MASK);
 985              		.loc 1 740 0
 986 0020 084B     		ldr	r3, .L59
 987 0022 084A     		ldr	r2, .L59
 988 0024 1168     		ldr	r1, [r2]
 989 0026 7A68     		ldr	r2, [r7, #4]
 990 0028 0120     		mov	r0, #1
 991 002a 0240     		and	r2, r0
 992 002c 0A43     		orr	r2, r1
 993 002e 1A60     		str	r2, [r3]
 741:.\Generated_Source\PSoC4/PWM.c **** 
 742:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 994              		.loc 1 742 0
 995 0030 0F23     		mov	r3, #15
 996 0032 FB18     		add	r3, r7, r3
 997 0034 1B78     		ldrb	r3, [r3]
 998 0036 181C     		mov	r0, r3
 999 0038 FFF7FEFF 		bl	CyExitCriticalSection
 743:.\Generated_Source\PSoC4/PWM.c **** }
 1000              		.loc 1 743 0
 1001 003c BD46     		mov	sp, r7
 1002 003e 05B0     		add	sp, sp, #20
 1003              		@ sp needed
 1004 0040 90BD     		pop	{r4, r7, pc}
 1005              	.L60:
 1006 0042 C046     		.align	2
 1007              	.L59:
 1008 0044 00010540 		.word	1074069760
 1009              		.cfi_endproc
 1010              	.LFE18:
 1011              		.size	PWM_SetCompareSwap, .-PWM_SetCompareSwap
 1012              		.section	.text.PWM_WritePeriodBuf,"ax",%progbits
 1013              		.align	2
 1014              		.global	PWM_WritePeriodBuf
 1015              		.code	16
 1016              		.thumb_func
 1017              		.type	PWM_WritePeriodBuf, %function
 1018              	PWM_WritePeriodBuf:
 1019              	.LFB19:
 744:.\Generated_Source\PSoC4/PWM.c **** 
 745:.\Generated_Source\PSoC4/PWM.c **** 
 746:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 747:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_WritePeriodBuf
 748:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 32


 749:.\Generated_Source\PSoC4/PWM.c **** *
 750:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 751:.\Generated_Source\PSoC4/PWM.c **** *  Writes the 16 bit period buf register with the new period value.
 752:.\Generated_Source\PSoC4/PWM.c **** *
 753:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 754:.\Generated_Source\PSoC4/PWM.c **** *  periodBuf: Period value
 755:.\Generated_Source\PSoC4/PWM.c **** *
 756:.\Generated_Source\PSoC4/PWM.c **** * Return:
 757:.\Generated_Source\PSoC4/PWM.c **** *  None
 758:.\Generated_Source\PSoC4/PWM.c **** *
 759:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 760:.\Generated_Source\PSoC4/PWM.c **** void PWM_WritePeriodBuf(uint32 periodBuf)
 761:.\Generated_Source\PSoC4/PWM.c **** {
 1020              		.loc 1 761 0
 1021              		.cfi_startproc
 1022 0000 80B5     		push	{r7, lr}
 1023              		.cfi_def_cfa_offset 8
 1024              		.cfi_offset 7, -8
 1025              		.cfi_offset 14, -4
 1026 0002 82B0     		sub	sp, sp, #8
 1027              		.cfi_def_cfa_offset 16
 1028 0004 00AF     		add	r7, sp, #0
 1029              		.cfi_def_cfa_register 7
 1030 0006 7860     		str	r0, [r7, #4]
 762:.\Generated_Source\PSoC4/PWM.c ****     PWM_PERIOD_BUF_REG = (periodBuf & PWM_16BIT_MASK);
 1031              		.loc 1 762 0
 1032 0008 034B     		ldr	r3, .L62
 1033 000a 7A68     		ldr	r2, [r7, #4]
 1034 000c 1204     		lsl	r2, r2, #16
 1035 000e 120C     		lsr	r2, r2, #16
 1036 0010 1A60     		str	r2, [r3]
 763:.\Generated_Source\PSoC4/PWM.c **** }
 1037              		.loc 1 763 0
 1038 0012 BD46     		mov	sp, r7
 1039 0014 02B0     		add	sp, sp, #8
 1040              		@ sp needed
 1041 0016 80BD     		pop	{r7, pc}
 1042              	.L63:
 1043              		.align	2
 1044              	.L62:
 1045 0018 18010540 		.word	1074069784
 1046              		.cfi_endproc
 1047              	.LFE19:
 1048              		.size	PWM_WritePeriodBuf, .-PWM_WritePeriodBuf
 1049              		.section	.text.PWM_ReadPeriodBuf,"ax",%progbits
 1050              		.align	2
 1051              		.global	PWM_ReadPeriodBuf
 1052              		.code	16
 1053              		.thumb_func
 1054              		.type	PWM_ReadPeriodBuf, %function
 1055              	PWM_ReadPeriodBuf:
 1056              	.LFB20:
 764:.\Generated_Source\PSoC4/PWM.c **** 
 765:.\Generated_Source\PSoC4/PWM.c **** 
 766:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 767:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadPeriodBuf
 768:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 33


 769:.\Generated_Source\PSoC4/PWM.c **** *
 770:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 771:.\Generated_Source\PSoC4/PWM.c **** *  Reads the 16 bit period buf register.
 772:.\Generated_Source\PSoC4/PWM.c **** *
 773:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 774:.\Generated_Source\PSoC4/PWM.c **** *  None
 775:.\Generated_Source\PSoC4/PWM.c **** *
 776:.\Generated_Source\PSoC4/PWM.c **** * Return:
 777:.\Generated_Source\PSoC4/PWM.c **** *  Period value
 778:.\Generated_Source\PSoC4/PWM.c **** *
 779:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 780:.\Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadPeriodBuf(void)
 781:.\Generated_Source\PSoC4/PWM.c **** {
 1057              		.loc 1 781 0
 1058              		.cfi_startproc
 1059 0000 80B5     		push	{r7, lr}
 1060              		.cfi_def_cfa_offset 8
 1061              		.cfi_offset 7, -8
 1062              		.cfi_offset 14, -4
 1063 0002 00AF     		add	r7, sp, #0
 1064              		.cfi_def_cfa_register 7
 782:.\Generated_Source\PSoC4/PWM.c ****     return (PWM_PERIOD_BUF_REG & PWM_16BIT_MASK);
 1065              		.loc 1 782 0
 1066 0004 034B     		ldr	r3, .L66
 1067 0006 1B68     		ldr	r3, [r3]
 1068 0008 1B04     		lsl	r3, r3, #16
 1069 000a 1B0C     		lsr	r3, r3, #16
 783:.\Generated_Source\PSoC4/PWM.c **** }
 1070              		.loc 1 783 0
 1071 000c 181C     		mov	r0, r3
 1072 000e BD46     		mov	sp, r7
 1073              		@ sp needed
 1074 0010 80BD     		pop	{r7, pc}
 1075              	.L67:
 1076 0012 C046     		.align	2
 1077              	.L66:
 1078 0014 18010540 		.word	1074069784
 1079              		.cfi_endproc
 1080              	.LFE20:
 1081              		.size	PWM_ReadPeriodBuf, .-PWM_ReadPeriodBuf
 1082              		.section	.text.PWM_SetPeriodSwap,"ax",%progbits
 1083              		.align	2
 1084              		.global	PWM_SetPeriodSwap
 1085              		.code	16
 1086              		.thumb_func
 1087              		.type	PWM_SetPeriodSwap, %function
 1088              	PWM_SetPeriodSwap:
 1089              	.LFB21:
 784:.\Generated_Source\PSoC4/PWM.c **** 
 785:.\Generated_Source\PSoC4/PWM.c **** 
 786:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 787:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetPeriodSwap
 788:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 789:.\Generated_Source\PSoC4/PWM.c **** *
 790:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 791:.\Generated_Source\PSoC4/PWM.c **** *  Writes the register that controls whether the period registers are
 792:.\Generated_Source\PSoC4/PWM.c **** *  swapped. When enabled in Timer/Counter mode the swap occurs at a TC event.
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 34


 793:.\Generated_Source\PSoC4/PWM.c **** *  In the PWM mode the swap occurs at the next TC event following a hardware
 794:.\Generated_Source\PSoC4/PWM.c **** *  switch event.
 795:.\Generated_Source\PSoC4/PWM.c **** *
 796:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 797:.\Generated_Source\PSoC4/PWM.c **** *  swapEnable
 798:.\Generated_Source\PSoC4/PWM.c **** *   Values:
 799:.\Generated_Source\PSoC4/PWM.c **** *     - 0 - Disable swap
 800:.\Generated_Source\PSoC4/PWM.c **** *     - 1 - Enable swap
 801:.\Generated_Source\PSoC4/PWM.c **** *
 802:.\Generated_Source\PSoC4/PWM.c **** * Return:
 803:.\Generated_Source\PSoC4/PWM.c **** *  None
 804:.\Generated_Source\PSoC4/PWM.c **** *
 805:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 806:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetPeriodSwap(uint32 swapEnable)
 807:.\Generated_Source\PSoC4/PWM.c **** {
 1090              		.loc 1 807 0
 1091              		.cfi_startproc
 1092 0000 90B5     		push	{r4, r7, lr}
 1093              		.cfi_def_cfa_offset 12
 1094              		.cfi_offset 4, -12
 1095              		.cfi_offset 7, -8
 1096              		.cfi_offset 14, -4
 1097 0002 85B0     		sub	sp, sp, #20
 1098              		.cfi_def_cfa_offset 32
 1099 0004 00AF     		add	r7, sp, #0
 1100              		.cfi_def_cfa_register 7
 1101 0006 7860     		str	r0, [r7, #4]
 808:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
 809:.\Generated_Source\PSoC4/PWM.c **** 
 810:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 1102              		.loc 1 810 0
 1103 0008 0F23     		mov	r3, #15
 1104 000a FC18     		add	r4, r7, r3
 1105 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1106 0010 031C     		mov	r3, r0
 1107 0012 2370     		strb	r3, [r4]
 811:.\Generated_Source\PSoC4/PWM.c **** 
 812:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG &= (uint32)~PWM_RELOAD_PERIOD_MASK;
 1108              		.loc 1 812 0
 1109 0014 0B4B     		ldr	r3, .L69
 1110 0016 0B4A     		ldr	r2, .L69
 1111 0018 1268     		ldr	r2, [r2]
 1112 001a 0221     		mov	r1, #2
 1113 001c 8A43     		bic	r2, r1
 1114 001e 1A60     		str	r2, [r3]
 813:.\Generated_Source\PSoC4/PWM.c ****     PWM_CONTROL_REG |= ((uint32)((swapEnable & PWM_1BIT_MASK) <<
 1115              		.loc 1 813 0
 1116 0020 084B     		ldr	r3, .L69
 1117 0022 084A     		ldr	r2, .L69
 1118 0024 1168     		ldr	r1, [r2]
 1119 0026 7A68     		ldr	r2, [r7, #4]
 1120 0028 0120     		mov	r0, #1
 1121 002a 0240     		and	r2, r0
 1122 002c 5200     		lsl	r2, r2, #1
 1123 002e 0A43     		orr	r2, r1
 1124 0030 1A60     		str	r2, [r3]
 814:.\Generated_Source\PSoC4/PWM.c ****                                                             PWM_RELOAD_PERIOD_SHIFT));
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 35


 815:.\Generated_Source\PSoC4/PWM.c **** 
 816:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 1125              		.loc 1 816 0
 1126 0032 0F23     		mov	r3, #15
 1127 0034 FB18     		add	r3, r7, r3
 1128 0036 1B78     		ldrb	r3, [r3]
 1129 0038 181C     		mov	r0, r3
 1130 003a FFF7FEFF 		bl	CyExitCriticalSection
 817:.\Generated_Source\PSoC4/PWM.c **** }
 1131              		.loc 1 817 0
 1132 003e BD46     		mov	sp, r7
 1133 0040 05B0     		add	sp, sp, #20
 1134              		@ sp needed
 1135 0042 90BD     		pop	{r4, r7, pc}
 1136              	.L70:
 1137              		.align	2
 1138              	.L69:
 1139 0044 00010540 		.word	1074069760
 1140              		.cfi_endproc
 1141              	.LFE21:
 1142              		.size	PWM_SetPeriodSwap, .-PWM_SetPeriodSwap
 1143              		.section	.text.PWM_WriteCompare,"ax",%progbits
 1144              		.align	2
 1145              		.global	PWM_WriteCompare
 1146              		.code	16
 1147              		.thumb_func
 1148              		.type	PWM_WriteCompare, %function
 1149              	PWM_WriteCompare:
 1150              	.LFB22:
 818:.\Generated_Source\PSoC4/PWM.c **** 
 819:.\Generated_Source\PSoC4/PWM.c **** 
 820:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 821:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_WriteCompare
 822:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 823:.\Generated_Source\PSoC4/PWM.c **** *
 824:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 825:.\Generated_Source\PSoC4/PWM.c **** *  Writes the 16 bit compare register with the new compare value. Not
 826:.\Generated_Source\PSoC4/PWM.c **** *  applicable for Timer/Counter with Capture or in Quadrature Decoder modes.
 827:.\Generated_Source\PSoC4/PWM.c **** *
 828:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 829:.\Generated_Source\PSoC4/PWM.c **** *  compare: Compare value
 830:.\Generated_Source\PSoC4/PWM.c **** *
 831:.\Generated_Source\PSoC4/PWM.c **** * Return:
 832:.\Generated_Source\PSoC4/PWM.c **** *  None
 833:.\Generated_Source\PSoC4/PWM.c **** *
 834:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 835:.\Generated_Source\PSoC4/PWM.c **** void PWM_WriteCompare(uint32 compare)
 836:.\Generated_Source\PSoC4/PWM.c **** {
 1151              		.loc 1 836 0
 1152              		.cfi_startproc
 1153 0000 80B5     		push	{r7, lr}
 1154              		.cfi_def_cfa_offset 8
 1155              		.cfi_offset 7, -8
 1156              		.cfi_offset 14, -4
 1157 0002 82B0     		sub	sp, sp, #8
 1158              		.cfi_def_cfa_offset 16
 1159 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 36


 1160              		.cfi_def_cfa_register 7
 1161 0006 7860     		str	r0, [r7, #4]
 837:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 838:.\Generated_Source\PSoC4/PWM.c ****         uint32 currentMode;
 839:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 840:.\Generated_Source\PSoC4/PWM.c **** 
 841:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 842:.\Generated_Source\PSoC4/PWM.c ****         currentMode = ((PWM_CONTROL_REG & PWM_UPDOWN_MASK) >> PWM_UPDOWN_SHIFT);
 843:.\Generated_Source\PSoC4/PWM.c **** 
 844:.\Generated_Source\PSoC4/PWM.c ****         if (((uint32)PWM__COUNT_DOWN == currentMode) && (0xFFFFu != compare))
 845:.\Generated_Source\PSoC4/PWM.c ****         {
 846:.\Generated_Source\PSoC4/PWM.c ****             compare++;
 847:.\Generated_Source\PSoC4/PWM.c ****         }
 848:.\Generated_Source\PSoC4/PWM.c ****         else if (((uint32)PWM__COUNT_UP == currentMode) && (0u != compare))
 849:.\Generated_Source\PSoC4/PWM.c ****         {
 850:.\Generated_Source\PSoC4/PWM.c ****             compare--;
 851:.\Generated_Source\PSoC4/PWM.c ****         }
 852:.\Generated_Source\PSoC4/PWM.c ****         else
 853:.\Generated_Source\PSoC4/PWM.c ****         {
 854:.\Generated_Source\PSoC4/PWM.c ****         }
 855:.\Generated_Source\PSoC4/PWM.c ****         
 856:.\Generated_Source\PSoC4/PWM.c ****     
 857:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 858:.\Generated_Source\PSoC4/PWM.c ****     
 859:.\Generated_Source\PSoC4/PWM.c ****     PWM_COMP_CAP_REG = (compare & PWM_16BIT_MASK);
 1162              		.loc 1 859 0
 1163 0008 034B     		ldr	r3, .L72
 1164 000a 7A68     		ldr	r2, [r7, #4]
 1165 000c 1204     		lsl	r2, r2, #16
 1166 000e 120C     		lsr	r2, r2, #16
 1167 0010 1A60     		str	r2, [r3]
 860:.\Generated_Source\PSoC4/PWM.c **** }
 1168              		.loc 1 860 0
 1169 0012 BD46     		mov	sp, r7
 1170 0014 02B0     		add	sp, sp, #8
 1171              		@ sp needed
 1172 0016 80BD     		pop	{r7, pc}
 1173              	.L73:
 1174              		.align	2
 1175              	.L72:
 1176 0018 0C010540 		.word	1074069772
 1177              		.cfi_endproc
 1178              	.LFE22:
 1179              		.size	PWM_WriteCompare, .-PWM_WriteCompare
 1180              		.section	.text.PWM_ReadCompare,"ax",%progbits
 1181              		.align	2
 1182              		.global	PWM_ReadCompare
 1183              		.code	16
 1184              		.thumb_func
 1185              		.type	PWM_ReadCompare, %function
 1186              	PWM_ReadCompare:
 1187              	.LFB23:
 861:.\Generated_Source\PSoC4/PWM.c **** 
 862:.\Generated_Source\PSoC4/PWM.c **** 
 863:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 864:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadCompare
 865:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 37


 866:.\Generated_Source\PSoC4/PWM.c **** *
 867:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 868:.\Generated_Source\PSoC4/PWM.c **** *  Reads the compare register. Not applicable for Timer/Counter with Capture
 869:.\Generated_Source\PSoC4/PWM.c **** *  or in Quadrature Decoder modes.
 870:.\Generated_Source\PSoC4/PWM.c **** *
 871:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 872:.\Generated_Source\PSoC4/PWM.c **** *  None
 873:.\Generated_Source\PSoC4/PWM.c **** *
 874:.\Generated_Source\PSoC4/PWM.c **** * Return:
 875:.\Generated_Source\PSoC4/PWM.c **** *  Compare value
 876:.\Generated_Source\PSoC4/PWM.c **** *
 877:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 878:.\Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadCompare(void)
 879:.\Generated_Source\PSoC4/PWM.c **** {
 1188              		.loc 1 879 0
 1189              		.cfi_startproc
 1190 0000 80B5     		push	{r7, lr}
 1191              		.cfi_def_cfa_offset 8
 1192              		.cfi_offset 7, -8
 1193              		.cfi_offset 14, -4
 1194 0002 00AF     		add	r7, sp, #0
 1195              		.cfi_def_cfa_register 7
 880:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 881:.\Generated_Source\PSoC4/PWM.c ****         uint32 currentMode;
 882:.\Generated_Source\PSoC4/PWM.c ****         uint32 regVal;
 883:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 884:.\Generated_Source\PSoC4/PWM.c **** 
 885:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 886:.\Generated_Source\PSoC4/PWM.c ****         currentMode = ((PWM_CONTROL_REG & PWM_UPDOWN_MASK) >> PWM_UPDOWN_SHIFT);
 887:.\Generated_Source\PSoC4/PWM.c ****         
 888:.\Generated_Source\PSoC4/PWM.c ****         regVal = PWM_COMP_CAP_REG;
 889:.\Generated_Source\PSoC4/PWM.c ****         
 890:.\Generated_Source\PSoC4/PWM.c ****         if (((uint32)PWM__COUNT_DOWN == currentMode) && (0u != regVal))
 891:.\Generated_Source\PSoC4/PWM.c ****         {
 892:.\Generated_Source\PSoC4/PWM.c ****             regVal--;
 893:.\Generated_Source\PSoC4/PWM.c ****         }
 894:.\Generated_Source\PSoC4/PWM.c ****         else if (((uint32)PWM__COUNT_UP == currentMode) && (0xFFFFu != regVal))
 895:.\Generated_Source\PSoC4/PWM.c ****         {
 896:.\Generated_Source\PSoC4/PWM.c ****             regVal++;
 897:.\Generated_Source\PSoC4/PWM.c ****         }
 898:.\Generated_Source\PSoC4/PWM.c ****         else
 899:.\Generated_Source\PSoC4/PWM.c ****         {
 900:.\Generated_Source\PSoC4/PWM.c ****         }
 901:.\Generated_Source\PSoC4/PWM.c **** 
 902:.\Generated_Source\PSoC4/PWM.c ****         return (regVal & PWM_16BIT_MASK);
 903:.\Generated_Source\PSoC4/PWM.c ****     #else
 904:.\Generated_Source\PSoC4/PWM.c ****         return (PWM_COMP_CAP_REG & PWM_16BIT_MASK);
 1196              		.loc 1 904 0
 1197 0004 034B     		ldr	r3, .L76
 1198 0006 1B68     		ldr	r3, [r3]
 1199 0008 1B04     		lsl	r3, r3, #16
 1200 000a 1B0C     		lsr	r3, r3, #16
 905:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 906:.\Generated_Source\PSoC4/PWM.c **** }
 1201              		.loc 1 906 0
 1202 000c 181C     		mov	r0, r3
 1203 000e BD46     		mov	sp, r7
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 38


 1204              		@ sp needed
 1205 0010 80BD     		pop	{r7, pc}
 1206              	.L77:
 1207 0012 C046     		.align	2
 1208              	.L76:
 1209 0014 0C010540 		.word	1074069772
 1210              		.cfi_endproc
 1211              	.LFE23:
 1212              		.size	PWM_ReadCompare, .-PWM_ReadCompare
 1213              		.section	.text.PWM_WriteCompareBuf,"ax",%progbits
 1214              		.align	2
 1215              		.global	PWM_WriteCompareBuf
 1216              		.code	16
 1217              		.thumb_func
 1218              		.type	PWM_WriteCompareBuf, %function
 1219              	PWM_WriteCompareBuf:
 1220              	.LFB24:
 907:.\Generated_Source\PSoC4/PWM.c **** 
 908:.\Generated_Source\PSoC4/PWM.c **** 
 909:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 910:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_WriteCompareBuf
 911:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 912:.\Generated_Source\PSoC4/PWM.c **** *
 913:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 914:.\Generated_Source\PSoC4/PWM.c **** *  Writes the 16 bit compare buffer register with the new compare value. Not
 915:.\Generated_Source\PSoC4/PWM.c **** *  applicable for Timer/Counter with Capture or in Quadrature Decoder modes.
 916:.\Generated_Source\PSoC4/PWM.c **** *
 917:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 918:.\Generated_Source\PSoC4/PWM.c **** *  compareBuf: Compare value
 919:.\Generated_Source\PSoC4/PWM.c **** *
 920:.\Generated_Source\PSoC4/PWM.c **** * Return:
 921:.\Generated_Source\PSoC4/PWM.c **** *  None
 922:.\Generated_Source\PSoC4/PWM.c **** *
 923:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 924:.\Generated_Source\PSoC4/PWM.c **** void PWM_WriteCompareBuf(uint32 compareBuf)
 925:.\Generated_Source\PSoC4/PWM.c **** {
 1221              		.loc 1 925 0
 1222              		.cfi_startproc
 1223 0000 80B5     		push	{r7, lr}
 1224              		.cfi_def_cfa_offset 8
 1225              		.cfi_offset 7, -8
 1226              		.cfi_offset 14, -4
 1227 0002 82B0     		sub	sp, sp, #8
 1228              		.cfi_def_cfa_offset 16
 1229 0004 00AF     		add	r7, sp, #0
 1230              		.cfi_def_cfa_register 7
 1231 0006 7860     		str	r0, [r7, #4]
 926:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 927:.\Generated_Source\PSoC4/PWM.c ****         uint32 currentMode;
 928:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 929:.\Generated_Source\PSoC4/PWM.c **** 
 930:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 931:.\Generated_Source\PSoC4/PWM.c ****         currentMode = ((PWM_CONTROL_REG & PWM_UPDOWN_MASK) >> PWM_UPDOWN_SHIFT);
 932:.\Generated_Source\PSoC4/PWM.c **** 
 933:.\Generated_Source\PSoC4/PWM.c ****         if (((uint32)PWM__COUNT_DOWN == currentMode) && (0xFFFFu != compareBuf))
 934:.\Generated_Source\PSoC4/PWM.c ****         {
 935:.\Generated_Source\PSoC4/PWM.c ****             compareBuf++;
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 39


 936:.\Generated_Source\PSoC4/PWM.c ****         }
 937:.\Generated_Source\PSoC4/PWM.c ****         else if (((uint32)PWM__COUNT_UP == currentMode) && (0u != compareBuf))
 938:.\Generated_Source\PSoC4/PWM.c ****         {
 939:.\Generated_Source\PSoC4/PWM.c ****             compareBuf --;
 940:.\Generated_Source\PSoC4/PWM.c ****         }
 941:.\Generated_Source\PSoC4/PWM.c ****         else
 942:.\Generated_Source\PSoC4/PWM.c ****         {
 943:.\Generated_Source\PSoC4/PWM.c ****         }
 944:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 945:.\Generated_Source\PSoC4/PWM.c ****     
 946:.\Generated_Source\PSoC4/PWM.c ****     PWM_COMP_CAP_BUF_REG = (compareBuf & PWM_16BIT_MASK);
 1232              		.loc 1 946 0
 1233 0008 034B     		ldr	r3, .L79
 1234 000a 7A68     		ldr	r2, [r7, #4]
 1235 000c 1204     		lsl	r2, r2, #16
 1236 000e 120C     		lsr	r2, r2, #16
 1237 0010 1A60     		str	r2, [r3]
 947:.\Generated_Source\PSoC4/PWM.c **** }
 1238              		.loc 1 947 0
 1239 0012 BD46     		mov	sp, r7
 1240 0014 02B0     		add	sp, sp, #8
 1241              		@ sp needed
 1242 0016 80BD     		pop	{r7, pc}
 1243              	.L80:
 1244              		.align	2
 1245              	.L79:
 1246 0018 10010540 		.word	1074069776
 1247              		.cfi_endproc
 1248              	.LFE24:
 1249              		.size	PWM_WriteCompareBuf, .-PWM_WriteCompareBuf
 1250              		.section	.text.PWM_ReadCompareBuf,"ax",%progbits
 1251              		.align	2
 1252              		.global	PWM_ReadCompareBuf
 1253              		.code	16
 1254              		.thumb_func
 1255              		.type	PWM_ReadCompareBuf, %function
 1256              	PWM_ReadCompareBuf:
 1257              	.LFB25:
 948:.\Generated_Source\PSoC4/PWM.c **** 
 949:.\Generated_Source\PSoC4/PWM.c **** 
 950:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 951:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadCompareBuf
 952:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 953:.\Generated_Source\PSoC4/PWM.c **** *
 954:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 955:.\Generated_Source\PSoC4/PWM.c **** *  Reads the compare buffer register. Not applicable for Timer/Counter with
 956:.\Generated_Source\PSoC4/PWM.c **** *  Capture or in Quadrature Decoder modes.
 957:.\Generated_Source\PSoC4/PWM.c **** *
 958:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 959:.\Generated_Source\PSoC4/PWM.c **** *  None
 960:.\Generated_Source\PSoC4/PWM.c **** *
 961:.\Generated_Source\PSoC4/PWM.c **** * Return:
 962:.\Generated_Source\PSoC4/PWM.c **** *  Compare buffer value
 963:.\Generated_Source\PSoC4/PWM.c **** *
 964:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 965:.\Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadCompareBuf(void)
 966:.\Generated_Source\PSoC4/PWM.c **** {
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 40


 1258              		.loc 1 966 0
 1259              		.cfi_startproc
 1260 0000 80B5     		push	{r7, lr}
 1261              		.cfi_def_cfa_offset 8
 1262              		.cfi_offset 7, -8
 1263              		.cfi_offset 14, -4
 1264 0002 00AF     		add	r7, sp, #0
 1265              		.cfi_def_cfa_register 7
 967:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 968:.\Generated_Source\PSoC4/PWM.c ****         uint32 currentMode;
 969:.\Generated_Source\PSoC4/PWM.c ****         uint32 regVal;
 970:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 971:.\Generated_Source\PSoC4/PWM.c **** 
 972:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_CY_TCPWM_4000)
 973:.\Generated_Source\PSoC4/PWM.c ****         currentMode = ((PWM_CONTROL_REG & PWM_UPDOWN_MASK) >> PWM_UPDOWN_SHIFT);
 974:.\Generated_Source\PSoC4/PWM.c **** 
 975:.\Generated_Source\PSoC4/PWM.c ****         regVal = PWM_COMP_CAP_BUF_REG;
 976:.\Generated_Source\PSoC4/PWM.c ****         
 977:.\Generated_Source\PSoC4/PWM.c ****         if (((uint32)PWM__COUNT_DOWN == currentMode) && (0u != regVal))
 978:.\Generated_Source\PSoC4/PWM.c ****         {
 979:.\Generated_Source\PSoC4/PWM.c ****             regVal--;
 980:.\Generated_Source\PSoC4/PWM.c ****         }
 981:.\Generated_Source\PSoC4/PWM.c ****         else if (((uint32)PWM__COUNT_UP == currentMode) && (0xFFFFu != regVal))
 982:.\Generated_Source\PSoC4/PWM.c ****         {
 983:.\Generated_Source\PSoC4/PWM.c ****             regVal++;
 984:.\Generated_Source\PSoC4/PWM.c ****         }
 985:.\Generated_Source\PSoC4/PWM.c ****         else
 986:.\Generated_Source\PSoC4/PWM.c ****         {
 987:.\Generated_Source\PSoC4/PWM.c ****         }
 988:.\Generated_Source\PSoC4/PWM.c **** 
 989:.\Generated_Source\PSoC4/PWM.c ****         return (regVal & PWM_16BIT_MASK);
 990:.\Generated_Source\PSoC4/PWM.c ****     #else
 991:.\Generated_Source\PSoC4/PWM.c ****         return (PWM_COMP_CAP_BUF_REG & PWM_16BIT_MASK);
 1266              		.loc 1 991 0
 1267 0004 034B     		ldr	r3, .L83
 1268 0006 1B68     		ldr	r3, [r3]
 1269 0008 1B04     		lsl	r3, r3, #16
 1270 000a 1B0C     		lsr	r3, r3, #16
 992:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_CY_TCPWM_4000) */
 993:.\Generated_Source\PSoC4/PWM.c **** }
 1271              		.loc 1 993 0
 1272 000c 181C     		mov	r0, r3
 1273 000e BD46     		mov	sp, r7
 1274              		@ sp needed
 1275 0010 80BD     		pop	{r7, pc}
 1276              	.L84:
 1277 0012 C046     		.align	2
 1278              	.L83:
 1279 0014 10010540 		.word	1074069776
 1280              		.cfi_endproc
 1281              	.LFE25:
 1282              		.size	PWM_ReadCompareBuf, .-PWM_ReadCompareBuf
 1283              		.section	.text.PWM_ReadCapture,"ax",%progbits
 1284              		.align	2
 1285              		.global	PWM_ReadCapture
 1286              		.code	16
 1287              		.thumb_func
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 41


 1288              		.type	PWM_ReadCapture, %function
 1289              	PWM_ReadCapture:
 1290              	.LFB26:
 994:.\Generated_Source\PSoC4/PWM.c **** 
 995:.\Generated_Source\PSoC4/PWM.c **** 
 996:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 997:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadCapture
 998:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 999:.\Generated_Source\PSoC4/PWM.c **** *
1000:.\Generated_Source\PSoC4/PWM.c **** * Summary:
1001:.\Generated_Source\PSoC4/PWM.c **** *  Reads the captured counter value. This API is applicable only for
1002:.\Generated_Source\PSoC4/PWM.c **** *  Timer/Counter with the capture mode and Quadrature Decoder modes.
1003:.\Generated_Source\PSoC4/PWM.c **** *
1004:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
1005:.\Generated_Source\PSoC4/PWM.c **** *  None
1006:.\Generated_Source\PSoC4/PWM.c **** *
1007:.\Generated_Source\PSoC4/PWM.c **** * Return:
1008:.\Generated_Source\PSoC4/PWM.c **** *  Capture value
1009:.\Generated_Source\PSoC4/PWM.c **** *
1010:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1011:.\Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadCapture(void)
1012:.\Generated_Source\PSoC4/PWM.c **** {
 1291              		.loc 1 1012 0
 1292              		.cfi_startproc
 1293 0000 80B5     		push	{r7, lr}
 1294              		.cfi_def_cfa_offset 8
 1295              		.cfi_offset 7, -8
 1296              		.cfi_offset 14, -4
 1297 0002 00AF     		add	r7, sp, #0
 1298              		.cfi_def_cfa_register 7
1013:.\Generated_Source\PSoC4/PWM.c ****     return (PWM_COMP_CAP_REG & PWM_16BIT_MASK);
 1299              		.loc 1 1013 0
 1300 0004 034B     		ldr	r3, .L87
 1301 0006 1B68     		ldr	r3, [r3]
 1302 0008 1B04     		lsl	r3, r3, #16
 1303 000a 1B0C     		lsr	r3, r3, #16
1014:.\Generated_Source\PSoC4/PWM.c **** }
 1304              		.loc 1 1014 0
 1305 000c 181C     		mov	r0, r3
 1306 000e BD46     		mov	sp, r7
 1307              		@ sp needed
 1308 0010 80BD     		pop	{r7, pc}
 1309              	.L88:
 1310 0012 C046     		.align	2
 1311              	.L87:
 1312 0014 0C010540 		.word	1074069772
 1313              		.cfi_endproc
 1314              	.LFE26:
 1315              		.size	PWM_ReadCapture, .-PWM_ReadCapture
 1316              		.section	.text.PWM_ReadCaptureBuf,"ax",%progbits
 1317              		.align	2
 1318              		.global	PWM_ReadCaptureBuf
 1319              		.code	16
 1320              		.thumb_func
 1321              		.type	PWM_ReadCaptureBuf, %function
 1322              	PWM_ReadCaptureBuf:
 1323              	.LFB27:
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 42


1015:.\Generated_Source\PSoC4/PWM.c **** 
1016:.\Generated_Source\PSoC4/PWM.c **** 
1017:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1018:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadCaptureBuf
1019:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1020:.\Generated_Source\PSoC4/PWM.c **** *
1021:.\Generated_Source\PSoC4/PWM.c **** * Summary:
1022:.\Generated_Source\PSoC4/PWM.c **** *  Reads the capture buffer register. This API is applicable only for
1023:.\Generated_Source\PSoC4/PWM.c **** *  Timer/Counter with the capture mode and Quadrature Decoder modes.
1024:.\Generated_Source\PSoC4/PWM.c **** *
1025:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
1026:.\Generated_Source\PSoC4/PWM.c **** *  None
1027:.\Generated_Source\PSoC4/PWM.c **** *
1028:.\Generated_Source\PSoC4/PWM.c **** * Return:
1029:.\Generated_Source\PSoC4/PWM.c **** *  Capture buffer value
1030:.\Generated_Source\PSoC4/PWM.c **** *
1031:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1032:.\Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadCaptureBuf(void)
1033:.\Generated_Source\PSoC4/PWM.c **** {
 1324              		.loc 1 1033 0
 1325              		.cfi_startproc
 1326 0000 80B5     		push	{r7, lr}
 1327              		.cfi_def_cfa_offset 8
 1328              		.cfi_offset 7, -8
 1329              		.cfi_offset 14, -4
 1330 0002 00AF     		add	r7, sp, #0
 1331              		.cfi_def_cfa_register 7
1034:.\Generated_Source\PSoC4/PWM.c ****     return (PWM_COMP_CAP_BUF_REG & PWM_16BIT_MASK);
 1332              		.loc 1 1034 0
 1333 0004 034B     		ldr	r3, .L91
 1334 0006 1B68     		ldr	r3, [r3]
 1335 0008 1B04     		lsl	r3, r3, #16
 1336 000a 1B0C     		lsr	r3, r3, #16
1035:.\Generated_Source\PSoC4/PWM.c **** }
 1337              		.loc 1 1035 0
 1338 000c 181C     		mov	r0, r3
 1339 000e BD46     		mov	sp, r7
 1340              		@ sp needed
 1341 0010 80BD     		pop	{r7, pc}
 1342              	.L92:
 1343 0012 C046     		.align	2
 1344              	.L91:
 1345 0014 10010540 		.word	1074069776
 1346              		.cfi_endproc
 1347              	.LFE27:
 1348              		.size	PWM_ReadCaptureBuf, .-PWM_ReadCaptureBuf
 1349              		.section	.text.PWM_SetCaptureMode,"ax",%progbits
 1350              		.align	2
 1351              		.global	PWM_SetCaptureMode
 1352              		.code	16
 1353              		.thumb_func
 1354              		.type	PWM_SetCaptureMode, %function
 1355              	PWM_SetCaptureMode:
 1356              	.LFB28:
1036:.\Generated_Source\PSoC4/PWM.c **** 
1037:.\Generated_Source\PSoC4/PWM.c **** 
1038:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 43


1039:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetCaptureMode
1040:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1041:.\Generated_Source\PSoC4/PWM.c **** *
1042:.\Generated_Source\PSoC4/PWM.c **** * Summary:
1043:.\Generated_Source\PSoC4/PWM.c **** *  Sets the capture trigger mode. For PWM mode this is the switch input.
1044:.\Generated_Source\PSoC4/PWM.c **** *  This input is not applicable to the Timer/Counter without Capture and
1045:.\Generated_Source\PSoC4/PWM.c **** *  Quadrature Decoder modes.
1046:.\Generated_Source\PSoC4/PWM.c **** *
1047:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
1048:.\Generated_Source\PSoC4/PWM.c **** *  triggerMode: Enumerated trigger mode value
1049:.\Generated_Source\PSoC4/PWM.c **** *   Values:
1050:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_LEVEL     - Level
1051:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_RISING    - Rising edge
1052:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_FALLING   - Falling edge
1053:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_BOTH      - Both rising and falling edge
1054:.\Generated_Source\PSoC4/PWM.c **** *
1055:.\Generated_Source\PSoC4/PWM.c **** * Return:
1056:.\Generated_Source\PSoC4/PWM.c **** *  None
1057:.\Generated_Source\PSoC4/PWM.c **** *
1058:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1059:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetCaptureMode(uint32 triggerMode)
1060:.\Generated_Source\PSoC4/PWM.c **** {
 1357              		.loc 1 1060 0
 1358              		.cfi_startproc
 1359 0000 90B5     		push	{r4, r7, lr}
 1360              		.cfi_def_cfa_offset 12
 1361              		.cfi_offset 4, -12
 1362              		.cfi_offset 7, -8
 1363              		.cfi_offset 14, -4
 1364 0002 85B0     		sub	sp, sp, #20
 1365              		.cfi_def_cfa_offset 32
 1366 0004 00AF     		add	r7, sp, #0
 1367              		.cfi_def_cfa_register 7
 1368 0006 7860     		str	r0, [r7, #4]
1061:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
1062:.\Generated_Source\PSoC4/PWM.c **** 
1063:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 1369              		.loc 1 1063 0
 1370 0008 0F23     		mov	r3, #15
 1371 000a FC18     		add	r4, r7, r3
 1372 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1373 0010 031C     		mov	r3, r0
 1374 0012 2370     		strb	r3, [r4]
1064:.\Generated_Source\PSoC4/PWM.c **** 
1065:.\Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG &= (uint32)~PWM_CAPTURE_MASK;
 1375              		.loc 1 1065 0
 1376 0014 0A4B     		ldr	r3, .L94
 1377 0016 0A4A     		ldr	r2, .L94
 1378 0018 1268     		ldr	r2, [r2]
 1379 001a 0321     		mov	r1, #3
 1380 001c 8A43     		bic	r2, r1
 1381 001e 1A60     		str	r2, [r3]
1066:.\Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG |= triggerMode;
 1382              		.loc 1 1066 0
 1383 0020 074B     		ldr	r3, .L94
 1384 0022 074A     		ldr	r2, .L94
 1385 0024 1168     		ldr	r1, [r2]
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 44


 1386 0026 7A68     		ldr	r2, [r7, #4]
 1387 0028 0A43     		orr	r2, r1
 1388 002a 1A60     		str	r2, [r3]
1067:.\Generated_Source\PSoC4/PWM.c **** 
1068:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 1389              		.loc 1 1068 0
 1390 002c 0F23     		mov	r3, #15
 1391 002e FB18     		add	r3, r7, r3
 1392 0030 1B78     		ldrb	r3, [r3]
 1393 0032 181C     		mov	r0, r3
 1394 0034 FFF7FEFF 		bl	CyExitCriticalSection
1069:.\Generated_Source\PSoC4/PWM.c **** }
 1395              		.loc 1 1069 0
 1396 0038 BD46     		mov	sp, r7
 1397 003a 05B0     		add	sp, sp, #20
 1398              		@ sp needed
 1399 003c 90BD     		pop	{r4, r7, pc}
 1400              	.L95:
 1401 003e C046     		.align	2
 1402              	.L94:
 1403 0040 24010540 		.word	1074069796
 1404              		.cfi_endproc
 1405              	.LFE28:
 1406              		.size	PWM_SetCaptureMode, .-PWM_SetCaptureMode
 1407              		.section	.text.PWM_SetReloadMode,"ax",%progbits
 1408              		.align	2
 1409              		.global	PWM_SetReloadMode
 1410              		.code	16
 1411              		.thumb_func
 1412              		.type	PWM_SetReloadMode, %function
 1413              	PWM_SetReloadMode:
 1414              	.LFB29:
1070:.\Generated_Source\PSoC4/PWM.c **** 
1071:.\Generated_Source\PSoC4/PWM.c **** 
1072:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1073:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetReloadMode
1074:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1075:.\Generated_Source\PSoC4/PWM.c **** *
1076:.\Generated_Source\PSoC4/PWM.c **** * Summary:
1077:.\Generated_Source\PSoC4/PWM.c **** *  Sets the reload trigger mode. For Quadrature Decoder mode this is the index
1078:.\Generated_Source\PSoC4/PWM.c **** *  input.
1079:.\Generated_Source\PSoC4/PWM.c **** *
1080:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
1081:.\Generated_Source\PSoC4/PWM.c **** *  triggerMode: Enumerated trigger mode value
1082:.\Generated_Source\PSoC4/PWM.c **** *   Values:
1083:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_LEVEL     - Level
1084:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_RISING    - Rising edge
1085:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_FALLING   - Falling edge
1086:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_BOTH      - Both rising and falling edge
1087:.\Generated_Source\PSoC4/PWM.c **** *
1088:.\Generated_Source\PSoC4/PWM.c **** * Return:
1089:.\Generated_Source\PSoC4/PWM.c **** *  None
1090:.\Generated_Source\PSoC4/PWM.c **** *
1091:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1092:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetReloadMode(uint32 triggerMode)
1093:.\Generated_Source\PSoC4/PWM.c **** {
 1415              		.loc 1 1093 0
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 45


 1416              		.cfi_startproc
 1417 0000 90B5     		push	{r4, r7, lr}
 1418              		.cfi_def_cfa_offset 12
 1419              		.cfi_offset 4, -12
 1420              		.cfi_offset 7, -8
 1421              		.cfi_offset 14, -4
 1422 0002 85B0     		sub	sp, sp, #20
 1423              		.cfi_def_cfa_offset 32
 1424 0004 00AF     		add	r7, sp, #0
 1425              		.cfi_def_cfa_register 7
 1426 0006 7860     		str	r0, [r7, #4]
1094:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
1095:.\Generated_Source\PSoC4/PWM.c **** 
1096:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 1427              		.loc 1 1096 0
 1428 0008 0F23     		mov	r3, #15
 1429 000a FC18     		add	r4, r7, r3
 1430 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1431 0010 031C     		mov	r3, r0
 1432 0012 2370     		strb	r3, [r4]
1097:.\Generated_Source\PSoC4/PWM.c **** 
1098:.\Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG &= (uint32)~PWM_RELOAD_MASK;
 1433              		.loc 1 1098 0
 1434 0014 0A4B     		ldr	r3, .L97
 1435 0016 0A4A     		ldr	r2, .L97
 1436 0018 1268     		ldr	r2, [r2]
 1437 001a 3021     		mov	r1, #48
 1438 001c 8A43     		bic	r2, r1
 1439 001e 1A60     		str	r2, [r3]
1099:.\Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_RELOAD_SHIFT));
 1440              		.loc 1 1099 0
 1441 0020 074B     		ldr	r3, .L97
 1442 0022 074A     		ldr	r2, .L97
 1443 0024 1168     		ldr	r1, [r2]
 1444 0026 7A68     		ldr	r2, [r7, #4]
 1445 0028 1201     		lsl	r2, r2, #4
 1446 002a 0A43     		orr	r2, r1
 1447 002c 1A60     		str	r2, [r3]
1100:.\Generated_Source\PSoC4/PWM.c **** 
1101:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 1448              		.loc 1 1101 0
 1449 002e 0F23     		mov	r3, #15
 1450 0030 FB18     		add	r3, r7, r3
 1451 0032 1B78     		ldrb	r3, [r3]
 1452 0034 181C     		mov	r0, r3
 1453 0036 FFF7FEFF 		bl	CyExitCriticalSection
1102:.\Generated_Source\PSoC4/PWM.c **** }
 1454              		.loc 1 1102 0
 1455 003a BD46     		mov	sp, r7
 1456 003c 05B0     		add	sp, sp, #20
 1457              		@ sp needed
 1458 003e 90BD     		pop	{r4, r7, pc}
 1459              	.L98:
 1460              		.align	2
 1461              	.L97:
 1462 0040 24010540 		.word	1074069796
 1463              		.cfi_endproc
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 46


 1464              	.LFE29:
 1465              		.size	PWM_SetReloadMode, .-PWM_SetReloadMode
 1466              		.section	.text.PWM_SetStartMode,"ax",%progbits
 1467              		.align	2
 1468              		.global	PWM_SetStartMode
 1469              		.code	16
 1470              		.thumb_func
 1471              		.type	PWM_SetStartMode, %function
 1472              	PWM_SetStartMode:
 1473              	.LFB30:
1103:.\Generated_Source\PSoC4/PWM.c **** 
1104:.\Generated_Source\PSoC4/PWM.c **** 
1105:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1106:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetStartMode
1107:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1108:.\Generated_Source\PSoC4/PWM.c **** *
1109:.\Generated_Source\PSoC4/PWM.c **** * Summary:
1110:.\Generated_Source\PSoC4/PWM.c **** *  Sets the start trigger mode. For Quadrature Decoder mode this is the
1111:.\Generated_Source\PSoC4/PWM.c **** *  phiB input.
1112:.\Generated_Source\PSoC4/PWM.c **** *
1113:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
1114:.\Generated_Source\PSoC4/PWM.c **** *  triggerMode: Enumerated trigger mode value
1115:.\Generated_Source\PSoC4/PWM.c **** *   Values:
1116:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_LEVEL     - Level
1117:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_RISING    - Rising edge
1118:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_FALLING   - Falling edge
1119:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_BOTH      - Both rising and falling edge
1120:.\Generated_Source\PSoC4/PWM.c **** *
1121:.\Generated_Source\PSoC4/PWM.c **** * Return:
1122:.\Generated_Source\PSoC4/PWM.c **** *  None
1123:.\Generated_Source\PSoC4/PWM.c **** *
1124:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1125:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetStartMode(uint32 triggerMode)
1126:.\Generated_Source\PSoC4/PWM.c **** {
 1474              		.loc 1 1126 0
 1475              		.cfi_startproc
 1476 0000 90B5     		push	{r4, r7, lr}
 1477              		.cfi_def_cfa_offset 12
 1478              		.cfi_offset 4, -12
 1479              		.cfi_offset 7, -8
 1480              		.cfi_offset 14, -4
 1481 0002 85B0     		sub	sp, sp, #20
 1482              		.cfi_def_cfa_offset 32
 1483 0004 00AF     		add	r7, sp, #0
 1484              		.cfi_def_cfa_register 7
 1485 0006 7860     		str	r0, [r7, #4]
1127:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
1128:.\Generated_Source\PSoC4/PWM.c **** 
1129:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 1486              		.loc 1 1129 0
 1487 0008 0F23     		mov	r3, #15
 1488 000a FC18     		add	r4, r7, r3
 1489 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1490 0010 031C     		mov	r3, r0
 1491 0012 2370     		strb	r3, [r4]
1130:.\Generated_Source\PSoC4/PWM.c **** 
1131:.\Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG &= (uint32)~PWM_START_MASK;
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 47


 1492              		.loc 1 1131 0
 1493 0014 0A4B     		ldr	r3, .L100
 1494 0016 0A4A     		ldr	r2, .L100
 1495 0018 1268     		ldr	r2, [r2]
 1496 001a 0A49     		ldr	r1, .L100+4
 1497 001c 0A40     		and	r2, r1
 1498 001e 1A60     		str	r2, [r3]
1132:.\Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_START_SHIFT));
 1499              		.loc 1 1132 0
 1500 0020 074B     		ldr	r3, .L100
 1501 0022 074A     		ldr	r2, .L100
 1502 0024 1168     		ldr	r1, [r2]
 1503 0026 7A68     		ldr	r2, [r7, #4]
 1504 0028 1202     		lsl	r2, r2, #8
 1505 002a 0A43     		orr	r2, r1
 1506 002c 1A60     		str	r2, [r3]
1133:.\Generated_Source\PSoC4/PWM.c **** 
1134:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 1507              		.loc 1 1134 0
 1508 002e 0F23     		mov	r3, #15
 1509 0030 FB18     		add	r3, r7, r3
 1510 0032 1B78     		ldrb	r3, [r3]
 1511 0034 181C     		mov	r0, r3
 1512 0036 FFF7FEFF 		bl	CyExitCriticalSection
1135:.\Generated_Source\PSoC4/PWM.c **** }
 1513              		.loc 1 1135 0
 1514 003a BD46     		mov	sp, r7
 1515 003c 05B0     		add	sp, sp, #20
 1516              		@ sp needed
 1517 003e 90BD     		pop	{r4, r7, pc}
 1518              	.L101:
 1519              		.align	2
 1520              	.L100:
 1521 0040 24010540 		.word	1074069796
 1522 0044 FFFCFFFF 		.word	-769
 1523              		.cfi_endproc
 1524              	.LFE30:
 1525              		.size	PWM_SetStartMode, .-PWM_SetStartMode
 1526              		.section	.text.PWM_SetStopMode,"ax",%progbits
 1527              		.align	2
 1528              		.global	PWM_SetStopMode
 1529              		.code	16
 1530              		.thumb_func
 1531              		.type	PWM_SetStopMode, %function
 1532              	PWM_SetStopMode:
 1533              	.LFB31:
1136:.\Generated_Source\PSoC4/PWM.c **** 
1137:.\Generated_Source\PSoC4/PWM.c **** 
1138:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1139:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetStopMode
1140:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1141:.\Generated_Source\PSoC4/PWM.c **** *
1142:.\Generated_Source\PSoC4/PWM.c **** * Summary:
1143:.\Generated_Source\PSoC4/PWM.c **** *  Sets the stop trigger mode. For PWM mode this is the kill input.
1144:.\Generated_Source\PSoC4/PWM.c **** *
1145:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
1146:.\Generated_Source\PSoC4/PWM.c **** *  triggerMode: Enumerated trigger mode value
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 48


1147:.\Generated_Source\PSoC4/PWM.c **** *   Values:
1148:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_LEVEL     - Level
1149:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_RISING    - Rising edge
1150:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_FALLING   - Falling edge
1151:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_BOTH      - Both rising and falling edge
1152:.\Generated_Source\PSoC4/PWM.c **** *
1153:.\Generated_Source\PSoC4/PWM.c **** * Return:
1154:.\Generated_Source\PSoC4/PWM.c **** *  None
1155:.\Generated_Source\PSoC4/PWM.c **** *
1156:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1157:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetStopMode(uint32 triggerMode)
1158:.\Generated_Source\PSoC4/PWM.c **** {
 1534              		.loc 1 1158 0
 1535              		.cfi_startproc
 1536 0000 90B5     		push	{r4, r7, lr}
 1537              		.cfi_def_cfa_offset 12
 1538              		.cfi_offset 4, -12
 1539              		.cfi_offset 7, -8
 1540              		.cfi_offset 14, -4
 1541 0002 85B0     		sub	sp, sp, #20
 1542              		.cfi_def_cfa_offset 32
 1543 0004 00AF     		add	r7, sp, #0
 1544              		.cfi_def_cfa_register 7
 1545 0006 7860     		str	r0, [r7, #4]
1159:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
1160:.\Generated_Source\PSoC4/PWM.c **** 
1161:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 1546              		.loc 1 1161 0
 1547 0008 0F23     		mov	r3, #15
 1548 000a FC18     		add	r4, r7, r3
 1549 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1550 0010 031C     		mov	r3, r0
 1551 0012 2370     		strb	r3, [r4]
1162:.\Generated_Source\PSoC4/PWM.c **** 
1163:.\Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG &= (uint32)~PWM_STOP_MASK;
 1552              		.loc 1 1163 0
 1553 0014 0A4B     		ldr	r3, .L103
 1554 0016 0A4A     		ldr	r2, .L103
 1555 0018 1268     		ldr	r2, [r2]
 1556 001a C021     		mov	r1, #192
 1557 001c 8A43     		bic	r2, r1
 1558 001e 1A60     		str	r2, [r3]
1164:.\Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_STOP_SHIFT));
 1559              		.loc 1 1164 0
 1560 0020 074B     		ldr	r3, .L103
 1561 0022 074A     		ldr	r2, .L103
 1562 0024 1168     		ldr	r1, [r2]
 1563 0026 7A68     		ldr	r2, [r7, #4]
 1564 0028 9201     		lsl	r2, r2, #6
 1565 002a 0A43     		orr	r2, r1
 1566 002c 1A60     		str	r2, [r3]
1165:.\Generated_Source\PSoC4/PWM.c **** 
1166:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 1567              		.loc 1 1166 0
 1568 002e 0F23     		mov	r3, #15
 1569 0030 FB18     		add	r3, r7, r3
 1570 0032 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 49


 1571 0034 181C     		mov	r0, r3
 1572 0036 FFF7FEFF 		bl	CyExitCriticalSection
1167:.\Generated_Source\PSoC4/PWM.c **** }
 1573              		.loc 1 1167 0
 1574 003a BD46     		mov	sp, r7
 1575 003c 05B0     		add	sp, sp, #20
 1576              		@ sp needed
 1577 003e 90BD     		pop	{r4, r7, pc}
 1578              	.L104:
 1579              		.align	2
 1580              	.L103:
 1581 0040 24010540 		.word	1074069796
 1582              		.cfi_endproc
 1583              	.LFE31:
 1584              		.size	PWM_SetStopMode, .-PWM_SetStopMode
 1585              		.section	.text.PWM_SetCountMode,"ax",%progbits
 1586              		.align	2
 1587              		.global	PWM_SetCountMode
 1588              		.code	16
 1589              		.thumb_func
 1590              		.type	PWM_SetCountMode, %function
 1591              	PWM_SetCountMode:
 1592              	.LFB32:
1168:.\Generated_Source\PSoC4/PWM.c **** 
1169:.\Generated_Source\PSoC4/PWM.c **** 
1170:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1171:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetCountMode
1172:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1173:.\Generated_Source\PSoC4/PWM.c **** *
1174:.\Generated_Source\PSoC4/PWM.c **** * Summary:
1175:.\Generated_Source\PSoC4/PWM.c **** *  Sets the count trigger mode. For Quadrature Decoder mode this is the phiA
1176:.\Generated_Source\PSoC4/PWM.c **** *  input.
1177:.\Generated_Source\PSoC4/PWM.c **** *
1178:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
1179:.\Generated_Source\PSoC4/PWM.c **** *  triggerMode: Enumerated trigger mode value
1180:.\Generated_Source\PSoC4/PWM.c **** *   Values:
1181:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_LEVEL     - Level
1182:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_RISING    - Rising edge
1183:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_FALLING   - Falling edge
1184:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_TRIG_BOTH      - Both rising and falling edge
1185:.\Generated_Source\PSoC4/PWM.c **** *
1186:.\Generated_Source\PSoC4/PWM.c **** * Return:
1187:.\Generated_Source\PSoC4/PWM.c **** *  None
1188:.\Generated_Source\PSoC4/PWM.c **** *
1189:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1190:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetCountMode(uint32 triggerMode)
1191:.\Generated_Source\PSoC4/PWM.c **** {
 1593              		.loc 1 1191 0
 1594              		.cfi_startproc
 1595 0000 90B5     		push	{r4, r7, lr}
 1596              		.cfi_def_cfa_offset 12
 1597              		.cfi_offset 4, -12
 1598              		.cfi_offset 7, -8
 1599              		.cfi_offset 14, -4
 1600 0002 85B0     		sub	sp, sp, #20
 1601              		.cfi_def_cfa_offset 32
 1602 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 50


 1603              		.cfi_def_cfa_register 7
 1604 0006 7860     		str	r0, [r7, #4]
1192:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
1193:.\Generated_Source\PSoC4/PWM.c **** 
1194:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 1605              		.loc 1 1194 0
 1606 0008 0F23     		mov	r3, #15
 1607 000a FC18     		add	r4, r7, r3
 1608 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1609 0010 031C     		mov	r3, r0
 1610 0012 2370     		strb	r3, [r4]
1195:.\Generated_Source\PSoC4/PWM.c **** 
1196:.\Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG &= (uint32)~PWM_COUNT_MASK;
 1611              		.loc 1 1196 0
 1612 0014 0A4B     		ldr	r3, .L106
 1613 0016 0A4A     		ldr	r2, .L106
 1614 0018 1268     		ldr	r2, [r2]
 1615 001a 0C21     		mov	r1, #12
 1616 001c 8A43     		bic	r2, r1
 1617 001e 1A60     		str	r2, [r3]
1197:.\Generated_Source\PSoC4/PWM.c ****     PWM_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_COUNT_SHIFT));
 1618              		.loc 1 1197 0
 1619 0020 074B     		ldr	r3, .L106
 1620 0022 074A     		ldr	r2, .L106
 1621 0024 1168     		ldr	r1, [r2]
 1622 0026 7A68     		ldr	r2, [r7, #4]
 1623 0028 9200     		lsl	r2, r2, #2
 1624 002a 0A43     		orr	r2, r1
 1625 002c 1A60     		str	r2, [r3]
1198:.\Generated_Source\PSoC4/PWM.c **** 
1199:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 1626              		.loc 1 1199 0
 1627 002e 0F23     		mov	r3, #15
 1628 0030 FB18     		add	r3, r7, r3
 1629 0032 1B78     		ldrb	r3, [r3]
 1630 0034 181C     		mov	r0, r3
 1631 0036 FFF7FEFF 		bl	CyExitCriticalSection
1200:.\Generated_Source\PSoC4/PWM.c **** }
 1632              		.loc 1 1200 0
 1633 003a BD46     		mov	sp, r7
 1634 003c 05B0     		add	sp, sp, #20
 1635              		@ sp needed
 1636 003e 90BD     		pop	{r4, r7, pc}
 1637              	.L107:
 1638              		.align	2
 1639              	.L106:
 1640 0040 24010540 		.word	1074069796
 1641              		.cfi_endproc
 1642              	.LFE32:
 1643              		.size	PWM_SetCountMode, .-PWM_SetCountMode
 1644              		.section	.text.PWM_TriggerCommand,"ax",%progbits
 1645              		.align	2
 1646              		.global	PWM_TriggerCommand
 1647              		.code	16
 1648              		.thumb_func
 1649              		.type	PWM_TriggerCommand, %function
 1650              	PWM_TriggerCommand:
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 51


 1651              	.LFB33:
1201:.\Generated_Source\PSoC4/PWM.c **** 
1202:.\Generated_Source\PSoC4/PWM.c **** 
1203:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1204:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_TriggerCommand
1205:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1206:.\Generated_Source\PSoC4/PWM.c **** *
1207:.\Generated_Source\PSoC4/PWM.c **** * Summary:
1208:.\Generated_Source\PSoC4/PWM.c **** *  Triggers the designated command to occur on the designated TCPWM instances.
1209:.\Generated_Source\PSoC4/PWM.c **** *  The mask can be used to apply this command simultaneously to more than one
1210:.\Generated_Source\PSoC4/PWM.c **** *  instance.  This allows multiple TCPWM instances to be synchronized.
1211:.\Generated_Source\PSoC4/PWM.c **** *
1212:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
1213:.\Generated_Source\PSoC4/PWM.c **** *  mask: A combination of mask bits for each instance of the TCPWM that the
1214:.\Generated_Source\PSoC4/PWM.c **** *        command should apply to.  This function from one instance can be used
1215:.\Generated_Source\PSoC4/PWM.c **** *        to apply the command to any of the instances in the design.
1216:.\Generated_Source\PSoC4/PWM.c **** *        The mask value for a specific instance is available with the MASK
1217:.\Generated_Source\PSoC4/PWM.c **** *        define.
1218:.\Generated_Source\PSoC4/PWM.c **** *  command: Enumerated command values. Capture command only applicable for
1219:.\Generated_Source\PSoC4/PWM.c **** *           Timer/Counter with Capture and PWM modes.
1220:.\Generated_Source\PSoC4/PWM.c **** *   Values:
1221:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_CMD_CAPTURE    - Trigger Capture command
1222:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_CMD_RELOAD     - Trigger Reload command
1223:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_CMD_STOP       - Trigger Stop command
1224:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_CMD_START      - Trigger Start command
1225:.\Generated_Source\PSoC4/PWM.c **** *
1226:.\Generated_Source\PSoC4/PWM.c **** * Return:
1227:.\Generated_Source\PSoC4/PWM.c **** *  None
1228:.\Generated_Source\PSoC4/PWM.c **** *
1229:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1230:.\Generated_Source\PSoC4/PWM.c **** void PWM_TriggerCommand(uint32 mask, uint32 command)
1231:.\Generated_Source\PSoC4/PWM.c **** {
 1652              		.loc 1 1231 0
 1653              		.cfi_startproc
 1654 0000 90B5     		push	{r4, r7, lr}
 1655              		.cfi_def_cfa_offset 12
 1656              		.cfi_offset 4, -12
 1657              		.cfi_offset 7, -8
 1658              		.cfi_offset 14, -4
 1659 0002 85B0     		sub	sp, sp, #20
 1660              		.cfi_def_cfa_offset 32
 1661 0004 00AF     		add	r7, sp, #0
 1662              		.cfi_def_cfa_register 7
 1663 0006 7860     		str	r0, [r7, #4]
 1664 0008 3960     		str	r1, [r7]
1232:.\Generated_Source\PSoC4/PWM.c ****     uint8 enableInterrupts;
1233:.\Generated_Source\PSoC4/PWM.c **** 
1234:.\Generated_Source\PSoC4/PWM.c ****     enableInterrupts = CyEnterCriticalSection();
 1665              		.loc 1 1234 0
 1666 000a 0F23     		mov	r3, #15
 1667 000c FC18     		add	r4, r7, r3
 1668 000e FFF7FEFF 		bl	CyEnterCriticalSection
 1669 0012 031C     		mov	r3, r0
 1670 0014 2370     		strb	r3, [r4]
1235:.\Generated_Source\PSoC4/PWM.c **** 
1236:.\Generated_Source\PSoC4/PWM.c ****     PWM_COMMAND_REG = ((uint32)(mask << command));
 1671              		.loc 1 1236 0
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 52


 1672 0016 074B     		ldr	r3, .L109
 1673 0018 3A68     		ldr	r2, [r7]
 1674 001a 7968     		ldr	r1, [r7, #4]
 1675 001c 9140     		lsl	r1, r1, r2
 1676 001e 0A1C     		mov	r2, r1
 1677 0020 1A60     		str	r2, [r3]
1237:.\Generated_Source\PSoC4/PWM.c **** 
1238:.\Generated_Source\PSoC4/PWM.c ****     CyExitCriticalSection(enableInterrupts);
 1678              		.loc 1 1238 0
 1679 0022 0F23     		mov	r3, #15
 1680 0024 FB18     		add	r3, r7, r3
 1681 0026 1B78     		ldrb	r3, [r3]
 1682 0028 181C     		mov	r0, r3
 1683 002a FFF7FEFF 		bl	CyExitCriticalSection
1239:.\Generated_Source\PSoC4/PWM.c **** }
 1684              		.loc 1 1239 0
 1685 002e BD46     		mov	sp, r7
 1686 0030 05B0     		add	sp, sp, #20
 1687              		@ sp needed
 1688 0032 90BD     		pop	{r4, r7, pc}
 1689              	.L110:
 1690              		.align	2
 1691              	.L109:
 1692 0034 08000540 		.word	1074069512
 1693              		.cfi_endproc
 1694              	.LFE33:
 1695              		.size	PWM_TriggerCommand, .-PWM_TriggerCommand
 1696              		.section	.text.PWM_ReadStatus,"ax",%progbits
 1697              		.align	2
 1698              		.global	PWM_ReadStatus
 1699              		.code	16
 1700              		.thumb_func
 1701              		.type	PWM_ReadStatus, %function
 1702              	PWM_ReadStatus:
 1703              	.LFB34:
1240:.\Generated_Source\PSoC4/PWM.c **** 
1241:.\Generated_Source\PSoC4/PWM.c **** 
1242:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1243:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadStatus
1244:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1245:.\Generated_Source\PSoC4/PWM.c **** *
1246:.\Generated_Source\PSoC4/PWM.c **** * Summary:
1247:.\Generated_Source\PSoC4/PWM.c **** *  Reads the status of the PWM.
1248:.\Generated_Source\PSoC4/PWM.c **** *
1249:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
1250:.\Generated_Source\PSoC4/PWM.c **** *  None
1251:.\Generated_Source\PSoC4/PWM.c **** *
1252:.\Generated_Source\PSoC4/PWM.c **** * Return:
1253:.\Generated_Source\PSoC4/PWM.c **** *  Status
1254:.\Generated_Source\PSoC4/PWM.c **** *   Values:
1255:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_STATUS_DOWN    - Set if counting down
1256:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_STATUS_RUNNING - Set if counter is running
1257:.\Generated_Source\PSoC4/PWM.c **** *
1258:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1259:.\Generated_Source\PSoC4/PWM.c **** uint32 PWM_ReadStatus(void)
1260:.\Generated_Source\PSoC4/PWM.c **** {
 1704              		.loc 1 1260 0
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 53


 1705              		.cfi_startproc
 1706 0000 80B5     		push	{r7, lr}
 1707              		.cfi_def_cfa_offset 8
 1708              		.cfi_offset 7, -8
 1709              		.cfi_offset 14, -4
 1710 0002 00AF     		add	r7, sp, #0
 1711              		.cfi_def_cfa_register 7
1261:.\Generated_Source\PSoC4/PWM.c ****     return ((PWM_STATUS_REG >> PWM_RUNNING_STATUS_SHIFT) |
 1712              		.loc 1 1261 0
 1713 0004 054B     		ldr	r3, .L113
 1714 0006 1B68     		ldr	r3, [r3]
 1715 0008 9A0F     		lsr	r2, r3, #30
1262:.\Generated_Source\PSoC4/PWM.c ****             (PWM_STATUS_REG & PWM_STATUS_DOWN));
 1716              		.loc 1 1262 0
 1717 000a 044B     		ldr	r3, .L113
 1718 000c 1B68     		ldr	r3, [r3]
 1719 000e 0121     		mov	r1, #1
 1720 0010 0B40     		and	r3, r1
1261:.\Generated_Source\PSoC4/PWM.c ****     return ((PWM_STATUS_REG >> PWM_RUNNING_STATUS_SHIFT) |
 1721              		.loc 1 1261 0
 1722 0012 1343     		orr	r3, r2
1263:.\Generated_Source\PSoC4/PWM.c **** }
 1723              		.loc 1 1263 0
 1724 0014 181C     		mov	r0, r3
 1725 0016 BD46     		mov	sp, r7
 1726              		@ sp needed
 1727 0018 80BD     		pop	{r7, pc}
 1728              	.L114:
 1729 001a C046     		.align	2
 1730              	.L113:
 1731 001c 04010540 		.word	1074069764
 1732              		.cfi_endproc
 1733              	.LFE34:
 1734              		.size	PWM_ReadStatus, .-PWM_ReadStatus
 1735              		.section	.text.PWM_SetInterruptMode,"ax",%progbits
 1736              		.align	2
 1737              		.global	PWM_SetInterruptMode
 1738              		.code	16
 1739              		.thumb_func
 1740              		.type	PWM_SetInterruptMode, %function
 1741              	PWM_SetInterruptMode:
 1742              	.LFB35:
1264:.\Generated_Source\PSoC4/PWM.c **** 
1265:.\Generated_Source\PSoC4/PWM.c **** 
1266:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1267:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetInterruptMode
1268:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1269:.\Generated_Source\PSoC4/PWM.c **** *
1270:.\Generated_Source\PSoC4/PWM.c **** * Summary:
1271:.\Generated_Source\PSoC4/PWM.c **** *  Sets the interrupt mask to control which interrupt
1272:.\Generated_Source\PSoC4/PWM.c **** *  requests generate the interrupt signal.
1273:.\Generated_Source\PSoC4/PWM.c **** *
1274:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
1275:.\Generated_Source\PSoC4/PWM.c **** *   interruptMask: Mask of bits to be enabled
1276:.\Generated_Source\PSoC4/PWM.c **** *   Values:
1277:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_TC       - Terminal count mask
1278:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_CC_MATCH - Compare count / capture mask
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 54


1279:.\Generated_Source\PSoC4/PWM.c **** *
1280:.\Generated_Source\PSoC4/PWM.c **** * Return:
1281:.\Generated_Source\PSoC4/PWM.c **** *  None
1282:.\Generated_Source\PSoC4/PWM.c **** *
1283:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1284:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetInterruptMode(uint32 interruptMask)
1285:.\Generated_Source\PSoC4/PWM.c **** {
 1743              		.loc 1 1285 0
 1744              		.cfi_startproc
 1745 0000 80B5     		push	{r7, lr}
 1746              		.cfi_def_cfa_offset 8
 1747              		.cfi_offset 7, -8
 1748              		.cfi_offset 14, -4
 1749 0002 82B0     		sub	sp, sp, #8
 1750              		.cfi_def_cfa_offset 16
 1751 0004 00AF     		add	r7, sp, #0
 1752              		.cfi_def_cfa_register 7
 1753 0006 7860     		str	r0, [r7, #4]
1286:.\Generated_Source\PSoC4/PWM.c ****     PWM_INTERRUPT_MASK_REG =  interruptMask;
 1754              		.loc 1 1286 0
 1755 0008 024B     		ldr	r3, .L116
 1756 000a 7A68     		ldr	r2, [r7, #4]
 1757 000c 1A60     		str	r2, [r3]
1287:.\Generated_Source\PSoC4/PWM.c **** }
 1758              		.loc 1 1287 0
 1759 000e BD46     		mov	sp, r7
 1760 0010 02B0     		add	sp, sp, #8
 1761              		@ sp needed
 1762 0012 80BD     		pop	{r7, pc}
 1763              	.L117:
 1764              		.align	2
 1765              	.L116:
 1766 0014 38010540 		.word	1074069816
 1767              		.cfi_endproc
 1768              	.LFE35:
 1769              		.size	PWM_SetInterruptMode, .-PWM_SetInterruptMode
 1770              		.section	.text.PWM_GetInterruptSourceMasked,"ax",%progbits
 1771              		.align	2
 1772              		.global	PWM_GetInterruptSourceMasked
 1773              		.code	16
 1774              		.thumb_func
 1775              		.type	PWM_GetInterruptSourceMasked, %function
 1776              	PWM_GetInterruptSourceMasked:
 1777              	.LFB36:
1288:.\Generated_Source\PSoC4/PWM.c **** 
1289:.\Generated_Source\PSoC4/PWM.c **** 
1290:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1291:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_GetInterruptSourceMasked
1292:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1293:.\Generated_Source\PSoC4/PWM.c **** *
1294:.\Generated_Source\PSoC4/PWM.c **** * Summary:
1295:.\Generated_Source\PSoC4/PWM.c **** *  Gets the interrupt requests masked by the interrupt mask.
1296:.\Generated_Source\PSoC4/PWM.c **** *
1297:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
1298:.\Generated_Source\PSoC4/PWM.c **** *   None
1299:.\Generated_Source\PSoC4/PWM.c **** *
1300:.\Generated_Source\PSoC4/PWM.c **** * Return:
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 55


1301:.\Generated_Source\PSoC4/PWM.c **** *  Masked interrupt source
1302:.\Generated_Source\PSoC4/PWM.c **** *   Values:
1303:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_TC       - Terminal count mask
1304:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_CC_MATCH - Compare count / capture mask
1305:.\Generated_Source\PSoC4/PWM.c **** *
1306:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1307:.\Generated_Source\PSoC4/PWM.c **** uint32 PWM_GetInterruptSourceMasked(void)
1308:.\Generated_Source\PSoC4/PWM.c **** {
 1778              		.loc 1 1308 0
 1779              		.cfi_startproc
 1780 0000 80B5     		push	{r7, lr}
 1781              		.cfi_def_cfa_offset 8
 1782              		.cfi_offset 7, -8
 1783              		.cfi_offset 14, -4
 1784 0002 00AF     		add	r7, sp, #0
 1785              		.cfi_def_cfa_register 7
1309:.\Generated_Source\PSoC4/PWM.c ****     return (PWM_INTERRUPT_MASKED_REG);
 1786              		.loc 1 1309 0
 1787 0004 024B     		ldr	r3, .L120
 1788 0006 1B68     		ldr	r3, [r3]
1310:.\Generated_Source\PSoC4/PWM.c **** }
 1789              		.loc 1 1310 0
 1790 0008 181C     		mov	r0, r3
 1791 000a BD46     		mov	sp, r7
 1792              		@ sp needed
 1793 000c 80BD     		pop	{r7, pc}
 1794              	.L121:
 1795 000e C046     		.align	2
 1796              	.L120:
 1797 0010 3C010540 		.word	1074069820
 1798              		.cfi_endproc
 1799              	.LFE36:
 1800              		.size	PWM_GetInterruptSourceMasked, .-PWM_GetInterruptSourceMasked
 1801              		.section	.text.PWM_GetInterruptSource,"ax",%progbits
 1802              		.align	2
 1803              		.global	PWM_GetInterruptSource
 1804              		.code	16
 1805              		.thumb_func
 1806              		.type	PWM_GetInterruptSource, %function
 1807              	PWM_GetInterruptSource:
 1808              	.LFB37:
1311:.\Generated_Source\PSoC4/PWM.c **** 
1312:.\Generated_Source\PSoC4/PWM.c **** 
1313:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1314:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_GetInterruptSource
1315:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1316:.\Generated_Source\PSoC4/PWM.c **** *
1317:.\Generated_Source\PSoC4/PWM.c **** * Summary:
1318:.\Generated_Source\PSoC4/PWM.c **** *  Gets the interrupt requests (without masking).
1319:.\Generated_Source\PSoC4/PWM.c **** *
1320:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
1321:.\Generated_Source\PSoC4/PWM.c **** *  None
1322:.\Generated_Source\PSoC4/PWM.c **** *
1323:.\Generated_Source\PSoC4/PWM.c **** * Return:
1324:.\Generated_Source\PSoC4/PWM.c **** *  Interrupt request value
1325:.\Generated_Source\PSoC4/PWM.c **** *   Values:
1326:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_TC       - Terminal count mask
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 56


1327:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_CC_MATCH - Compare count / capture mask
1328:.\Generated_Source\PSoC4/PWM.c **** *
1329:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1330:.\Generated_Source\PSoC4/PWM.c **** uint32 PWM_GetInterruptSource(void)
1331:.\Generated_Source\PSoC4/PWM.c **** {
 1809              		.loc 1 1331 0
 1810              		.cfi_startproc
 1811 0000 80B5     		push	{r7, lr}
 1812              		.cfi_def_cfa_offset 8
 1813              		.cfi_offset 7, -8
 1814              		.cfi_offset 14, -4
 1815 0002 00AF     		add	r7, sp, #0
 1816              		.cfi_def_cfa_register 7
1332:.\Generated_Source\PSoC4/PWM.c ****     return (PWM_INTERRUPT_REQ_REG);
 1817              		.loc 1 1332 0
 1818 0004 024B     		ldr	r3, .L124
 1819 0006 1B68     		ldr	r3, [r3]
1333:.\Generated_Source\PSoC4/PWM.c **** }
 1820              		.loc 1 1333 0
 1821 0008 181C     		mov	r0, r3
 1822 000a BD46     		mov	sp, r7
 1823              		@ sp needed
 1824 000c 80BD     		pop	{r7, pc}
 1825              	.L125:
 1826 000e C046     		.align	2
 1827              	.L124:
 1828 0010 30010540 		.word	1074069808
 1829              		.cfi_endproc
 1830              	.LFE37:
 1831              		.size	PWM_GetInterruptSource, .-PWM_GetInterruptSource
 1832              		.section	.text.PWM_ClearInterrupt,"ax",%progbits
 1833              		.align	2
 1834              		.global	PWM_ClearInterrupt
 1835              		.code	16
 1836              		.thumb_func
 1837              		.type	PWM_ClearInterrupt, %function
 1838              	PWM_ClearInterrupt:
 1839              	.LFB38:
1334:.\Generated_Source\PSoC4/PWM.c **** 
1335:.\Generated_Source\PSoC4/PWM.c **** 
1336:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1337:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ClearInterrupt
1338:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1339:.\Generated_Source\PSoC4/PWM.c **** *
1340:.\Generated_Source\PSoC4/PWM.c **** * Summary:
1341:.\Generated_Source\PSoC4/PWM.c **** *  Clears the interrupt request.
1342:.\Generated_Source\PSoC4/PWM.c **** *
1343:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
1344:.\Generated_Source\PSoC4/PWM.c **** *   interruptMask: Mask of interrupts to clear
1345:.\Generated_Source\PSoC4/PWM.c **** *   Values:
1346:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_TC       - Terminal count mask
1347:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_CC_MATCH - Compare count / capture mask
1348:.\Generated_Source\PSoC4/PWM.c **** *
1349:.\Generated_Source\PSoC4/PWM.c **** * Return:
1350:.\Generated_Source\PSoC4/PWM.c **** *  None
1351:.\Generated_Source\PSoC4/PWM.c **** *
1352:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 57


1353:.\Generated_Source\PSoC4/PWM.c **** void PWM_ClearInterrupt(uint32 interruptMask)
1354:.\Generated_Source\PSoC4/PWM.c **** {
 1840              		.loc 1 1354 0
 1841              		.cfi_startproc
 1842 0000 80B5     		push	{r7, lr}
 1843              		.cfi_def_cfa_offset 8
 1844              		.cfi_offset 7, -8
 1845              		.cfi_offset 14, -4
 1846 0002 82B0     		sub	sp, sp, #8
 1847              		.cfi_def_cfa_offset 16
 1848 0004 00AF     		add	r7, sp, #0
 1849              		.cfi_def_cfa_register 7
 1850 0006 7860     		str	r0, [r7, #4]
1355:.\Generated_Source\PSoC4/PWM.c ****     PWM_INTERRUPT_REQ_REG = interruptMask;
 1851              		.loc 1 1355 0
 1852 0008 024B     		ldr	r3, .L127
 1853 000a 7A68     		ldr	r2, [r7, #4]
 1854 000c 1A60     		str	r2, [r3]
1356:.\Generated_Source\PSoC4/PWM.c **** }
 1855              		.loc 1 1356 0
 1856 000e BD46     		mov	sp, r7
 1857 0010 02B0     		add	sp, sp, #8
 1858              		@ sp needed
 1859 0012 80BD     		pop	{r7, pc}
 1860              	.L128:
 1861              		.align	2
 1862              	.L127:
 1863 0014 30010540 		.word	1074069808
 1864              		.cfi_endproc
 1865              	.LFE38:
 1866              		.size	PWM_ClearInterrupt, .-PWM_ClearInterrupt
 1867              		.section	.text.PWM_SetInterrupt,"ax",%progbits
 1868              		.align	2
 1869              		.global	PWM_SetInterrupt
 1870              		.code	16
 1871              		.thumb_func
 1872              		.type	PWM_SetInterrupt, %function
 1873              	PWM_SetInterrupt:
 1874              	.LFB39:
1357:.\Generated_Source\PSoC4/PWM.c **** 
1358:.\Generated_Source\PSoC4/PWM.c **** 
1359:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
1360:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_SetInterrupt
1361:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
1362:.\Generated_Source\PSoC4/PWM.c **** *
1363:.\Generated_Source\PSoC4/PWM.c **** * Summary:
1364:.\Generated_Source\PSoC4/PWM.c **** *  Sets a software interrupt request.
1365:.\Generated_Source\PSoC4/PWM.c **** *
1366:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
1367:.\Generated_Source\PSoC4/PWM.c **** *   interruptMask: Mask of interrupts to set
1368:.\Generated_Source\PSoC4/PWM.c **** *   Values:
1369:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_TC       - Terminal count mask
1370:.\Generated_Source\PSoC4/PWM.c **** *     - PWM_INTR_MASK_CC_MATCH - Compare count / capture mask
1371:.\Generated_Source\PSoC4/PWM.c **** *
1372:.\Generated_Source\PSoC4/PWM.c **** * Return:
1373:.\Generated_Source\PSoC4/PWM.c **** *  None
1374:.\Generated_Source\PSoC4/PWM.c **** *
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 58


1375:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
1376:.\Generated_Source\PSoC4/PWM.c **** void PWM_SetInterrupt(uint32 interruptMask)
1377:.\Generated_Source\PSoC4/PWM.c **** {
 1875              		.loc 1 1377 0
 1876              		.cfi_startproc
 1877 0000 80B5     		push	{r7, lr}
 1878              		.cfi_def_cfa_offset 8
 1879              		.cfi_offset 7, -8
 1880              		.cfi_offset 14, -4
 1881 0002 82B0     		sub	sp, sp, #8
 1882              		.cfi_def_cfa_offset 16
 1883 0004 00AF     		add	r7, sp, #0
 1884              		.cfi_def_cfa_register 7
 1885 0006 7860     		str	r0, [r7, #4]
1378:.\Generated_Source\PSoC4/PWM.c ****     PWM_INTERRUPT_SET_REG = interruptMask;
 1886              		.loc 1 1378 0
 1887 0008 024B     		ldr	r3, .L130
 1888 000a 7A68     		ldr	r2, [r7, #4]
 1889 000c 1A60     		str	r2, [r3]
1379:.\Generated_Source\PSoC4/PWM.c **** }
 1890              		.loc 1 1379 0
 1891 000e BD46     		mov	sp, r7
 1892 0010 02B0     		add	sp, sp, #8
 1893              		@ sp needed
 1894 0012 80BD     		pop	{r7, pc}
 1895              	.L131:
 1896              		.align	2
 1897              	.L130:
 1898 0014 34010540 		.word	1074069812
 1899              		.cfi_endproc
 1900              	.LFE39:
 1901              		.size	PWM_SetInterrupt, .-PWM_SetInterrupt
 1902              		.text
 1903              	.Letext0:
 1904              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1905              		.section	.debug_info,"",%progbits
 1906              	.Ldebug_info0:
 1907 0000 EC060000 		.4byte	0x6ec
 1908 0004 0400     		.2byte	0x4
 1909 0006 00000000 		.4byte	.Ldebug_abbrev0
 1910 000a 04       		.byte	0x4
 1911 000b 01       		.uleb128 0x1
 1912 000c 5D040000 		.4byte	.LASF76
 1913 0010 01       		.byte	0x1
 1914 0011 D3000000 		.4byte	.LASF77
 1915 0015 44020000 		.4byte	.LASF78
 1916 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1917 001d 00000000 		.4byte	0
 1918 0021 00000000 		.4byte	.Ldebug_line0
 1919 0025 02       		.uleb128 0x2
 1920 0026 01       		.byte	0x1
 1921 0027 06       		.byte	0x6
 1922 0028 8B000000 		.4byte	.LASF0
 1923 002c 02       		.uleb128 0x2
 1924 002d 01       		.byte	0x1
 1925 002e 08       		.byte	0x8
 1926 002f 13030000 		.4byte	.LASF1
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 59


 1927 0033 02       		.uleb128 0x2
 1928 0034 02       		.byte	0x2
 1929 0035 05       		.byte	0x5
 1930 0036 4A030000 		.4byte	.LASF2
 1931 003a 02       		.uleb128 0x2
 1932 003b 02       		.byte	0x2
 1933 003c 07       		.byte	0x7
 1934 003d DC010000 		.4byte	.LASF3
 1935 0041 02       		.uleb128 0x2
 1936 0042 04       		.byte	0x4
 1937 0043 05       		.byte	0x5
 1938 0044 F2000000 		.4byte	.LASF4
 1939 0048 02       		.uleb128 0x2
 1940 0049 04       		.byte	0x4
 1941 004a 07       		.byte	0x7
 1942 004b C1010000 		.4byte	.LASF5
 1943 004f 02       		.uleb128 0x2
 1944 0050 08       		.byte	0x8
 1945 0051 05       		.byte	0x5
 1946 0052 7D000000 		.4byte	.LASF6
 1947 0056 02       		.uleb128 0x2
 1948 0057 08       		.byte	0x8
 1949 0058 07       		.byte	0x7
 1950 0059 2B000000 		.4byte	.LASF7
 1951 005d 03       		.uleb128 0x3
 1952 005e 04       		.byte	0x4
 1953 005f 05       		.byte	0x5
 1954 0060 696E7400 		.ascii	"int\000"
 1955 0064 02       		.uleb128 0x2
 1956 0065 04       		.byte	0x4
 1957 0066 07       		.byte	0x7
 1958 0067 99010000 		.4byte	.LASF8
 1959 006b 04       		.uleb128 0x4
 1960 006c FB000000 		.4byte	.LASF9
 1961 0070 02       		.byte	0x2
 1962 0071 A1       		.byte	0xa1
 1963 0072 2C000000 		.4byte	0x2c
 1964 0076 04       		.uleb128 0x4
 1965 0077 48010000 		.4byte	.LASF10
 1966 007b 02       		.byte	0x2
 1967 007c A3       		.byte	0xa3
 1968 007d 48000000 		.4byte	0x48
 1969 0081 02       		.uleb128 0x2
 1970 0082 04       		.byte	0x4
 1971 0083 04       		.byte	0x4
 1972 0084 E1020000 		.4byte	.LASF11
 1973 0088 02       		.uleb128 0x2
 1974 0089 08       		.byte	0x8
 1975 008a 04       		.byte	0x4
 1976 008b 01010000 		.4byte	.LASF12
 1977 008f 02       		.uleb128 0x2
 1978 0090 01       		.byte	0x1
 1979 0091 08       		.byte	0x8
 1980 0092 A0030000 		.4byte	.LASF13
 1981 0096 05       		.uleb128 0x5
 1982 0097 3E020000 		.4byte	.LASF14
 1983 009b 02       		.byte	0x2
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 60


 1984 009c 4D01     		.2byte	0x14d
 1985 009e A2000000 		.4byte	0xa2
 1986 00a2 06       		.uleb128 0x6
 1987 00a3 76000000 		.4byte	0x76
 1988 00a7 02       		.uleb128 0x2
 1989 00a8 04       		.byte	0x4
 1990 00a9 07       		.byte	0x7
 1991 00aa A0020000 		.4byte	.LASF15
 1992 00ae 07       		.uleb128 0x7
 1993 00af 21030000 		.4byte	.LASF16
 1994 00b3 01       		.byte	0x1
 1995 00b4 26       		.byte	0x26
 1996 00b5 00000000 		.4byte	.LFB0
 1997 00b9 68000000 		.4byte	.LFE0-.LFB0
 1998 00bd 01       		.uleb128 0x1
 1999 00be 9C       		.byte	0x9c
 2000 00bf 08       		.uleb128 0x8
 2001 00c0 06000000 		.4byte	.LASF18
 2002 00c4 01       		.byte	0x1
 2003 00c5 B1       		.byte	0xb1
 2004 00c6 00000000 		.4byte	.LFB1
 2005 00ca 30000000 		.4byte	.LFE1-.LFB1
 2006 00ce 01       		.uleb128 0x1
 2007 00cf 9C       		.byte	0x9c
 2008 00d0 E3000000 		.4byte	0xe3
 2009 00d4 09       		.uleb128 0x9
 2010 00d5 0C040000 		.4byte	.LASF20
 2011 00d9 01       		.byte	0x1
 2012 00da B3       		.byte	0xb3
 2013 00db 6B000000 		.4byte	0x6b
 2014 00df 02       		.uleb128 0x2
 2015 00e0 91       		.byte	0x91
 2016 00e1 6F       		.sleb128 -17
 2017 00e2 00       		.byte	0
 2018 00e3 07       		.uleb128 0x7
 2019 00e4 00020000 		.4byte	.LASF17
 2020 00e8 01       		.byte	0x1
 2021 00e9 E0       		.byte	0xe0
 2022 00ea 00000000 		.4byte	.LFB2
 2023 00ee 24000000 		.4byte	.LFE2-.LFB2
 2024 00f2 01       		.uleb128 0x1
 2025 00f3 9C       		.byte	0x9c
 2026 00f4 08       		.uleb128 0x8
 2027 00f5 2E010000 		.4byte	.LASF19
 2028 00f9 01       		.byte	0x1
 2029 00fa FA       		.byte	0xfa
 2030 00fb 00000000 		.4byte	.LFB3
 2031 00ff 30000000 		.4byte	.LFE3-.LFB3
 2032 0103 01       		.uleb128 0x1
 2033 0104 9C       		.byte	0x9c
 2034 0105 18010000 		.4byte	0x118
 2035 0109 09       		.uleb128 0x9
 2036 010a 0C040000 		.4byte	.LASF20
 2037 010e 01       		.byte	0x1
 2038 010f FC       		.byte	0xfc
 2039 0110 6B000000 		.4byte	0x6b
 2040 0114 02       		.uleb128 0x2
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 61


 2041 0115 91       		.byte	0x91
 2042 0116 6F       		.sleb128 -17
 2043 0117 00       		.byte	0
 2044 0118 0A       		.uleb128 0xa
 2045 0119 3C040000 		.4byte	.LASF21
 2046 011d 01       		.byte	0x1
 2047 011e 1F01     		.2byte	0x11f
 2048 0120 00000000 		.4byte	.LFB4
 2049 0124 48000000 		.4byte	.LFE4-.LFB4
 2050 0128 01       		.uleb128 0x1
 2051 0129 9C       		.byte	0x9c
 2052 012a 4D010000 		.4byte	0x14d
 2053 012e 0B       		.uleb128 0xb
 2054 012f A5030000 		.4byte	.LASF23
 2055 0133 01       		.byte	0x1
 2056 0134 1F01     		.2byte	0x11f
 2057 0136 76000000 		.4byte	0x76
 2058 013a 02       		.uleb128 0x2
 2059 013b 91       		.byte	0x91
 2060 013c 64       		.sleb128 -28
 2061 013d 0C       		.uleb128 0xc
 2062 013e 0C040000 		.4byte	.LASF20
 2063 0142 01       		.byte	0x1
 2064 0143 2101     		.2byte	0x121
 2065 0145 6B000000 		.4byte	0x6b
 2066 0149 02       		.uleb128 0x2
 2067 014a 91       		.byte	0x91
 2068 014b 6F       		.sleb128 -17
 2069 014c 00       		.byte	0
 2070 014d 0A       		.uleb128 0xa
 2071 014e 92030000 		.4byte	.LASF22
 2072 0152 01       		.byte	0x1
 2073 0153 4001     		.2byte	0x140
 2074 0155 00000000 		.4byte	.LFB5
 2075 0159 48000000 		.4byte	.LFE5-.LFB5
 2076 015d 01       		.uleb128 0x1
 2077 015e 9C       		.byte	0x9c
 2078 015f 82010000 		.4byte	0x182
 2079 0163 0B       		.uleb128 0xb
 2080 0164 55000000 		.4byte	.LASF24
 2081 0168 01       		.byte	0x1
 2082 0169 4001     		.2byte	0x140
 2083 016b 76000000 		.4byte	0x76
 2084 016f 02       		.uleb128 0x2
 2085 0170 91       		.byte	0x91
 2086 0171 64       		.sleb128 -28
 2087 0172 0C       		.uleb128 0xc
 2088 0173 0C040000 		.4byte	.LASF20
 2089 0177 01       		.byte	0x1
 2090 0178 4201     		.2byte	0x142
 2091 017a 6B000000 		.4byte	0x6b
 2092 017e 02       		.uleb128 0x2
 2093 017f 91       		.byte	0x91
 2094 0180 6F       		.sleb128 -17
 2095 0181 00       		.byte	0
 2096 0182 0A       		.uleb128 0xa
 2097 0183 EF010000 		.4byte	.LASF25
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 62


 2098 0187 01       		.byte	0x1
 2099 0188 6501     		.2byte	0x165
 2100 018a 00000000 		.4byte	.LFB6
 2101 018e 48000000 		.4byte	.LFE6-.LFB6
 2102 0192 01       		.uleb128 0x1
 2103 0193 9C       		.byte	0x9c
 2104 0194 B7010000 		.4byte	0x1b7
 2105 0198 0B       		.uleb128 0xb
 2106 0199 E7020000 		.4byte	.LASF26
 2107 019d 01       		.byte	0x1
 2108 019e 6501     		.2byte	0x165
 2109 01a0 76000000 		.4byte	0x76
 2110 01a4 02       		.uleb128 0x2
 2111 01a5 91       		.byte	0x91
 2112 01a6 64       		.sleb128 -28
 2113 01a7 0C       		.uleb128 0xc
 2114 01a8 0C040000 		.4byte	.LASF20
 2115 01ac 01       		.byte	0x1
 2116 01ad 6701     		.2byte	0x167
 2117 01af 6B000000 		.4byte	0x6b
 2118 01b3 02       		.uleb128 0x2
 2119 01b4 91       		.byte	0x91
 2120 01b5 6F       		.sleb128 -17
 2121 01b6 00       		.byte	0
 2122 01b7 0A       		.uleb128 0xa
 2123 01b8 C0020000 		.4byte	.LASF27
 2124 01bc 01       		.byte	0x1
 2125 01bd 8501     		.2byte	0x185
 2126 01bf 00000000 		.4byte	.LFB7
 2127 01c3 4C000000 		.4byte	.LFE7-.LFB7
 2128 01c7 01       		.uleb128 0x1
 2129 01c8 9C       		.byte	0x9c
 2130 01c9 EC010000 		.4byte	0x1ec
 2131 01cd 0B       		.uleb128 0xb
 2132 01ce 2E040000 		.4byte	.LASF28
 2133 01d2 01       		.byte	0x1
 2134 01d3 8501     		.2byte	0x185
 2135 01d5 76000000 		.4byte	0x76
 2136 01d9 02       		.uleb128 0x2
 2137 01da 91       		.byte	0x91
 2138 01db 64       		.sleb128 -28
 2139 01dc 0C       		.uleb128 0xc
 2140 01dd 0C040000 		.4byte	.LASF20
 2141 01e1 01       		.byte	0x1
 2142 01e2 8701     		.2byte	0x187
 2143 01e4 6B000000 		.4byte	0x6b
 2144 01e8 02       		.uleb128 0x2
 2145 01e9 91       		.byte	0x91
 2146 01ea 6F       		.sleb128 -17
 2147 01eb 00       		.byte	0
 2148 01ec 0D       		.uleb128 0xd
 2149 01ed 3B030000 		.4byte	.LASF29
 2150 01f1 01       		.byte	0x1
 2151 01f2 BB01     		.2byte	0x1bb
 2152 01f4 00000000 		.4byte	.LFB8
 2153 01f8 1C000000 		.4byte	.LFE8-.LFB8
 2154 01fc 01       		.uleb128 0x1
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 63


 2155 01fd 9C       		.byte	0x9c
 2156 01fe 12020000 		.4byte	0x212
 2157 0202 0B       		.uleb128 0xb
 2158 0203 D3010000 		.4byte	.LASF30
 2159 0207 01       		.byte	0x1
 2160 0208 BB01     		.2byte	0x1bb
 2161 020a 76000000 		.4byte	0x76
 2162 020e 02       		.uleb128 0x2
 2163 020f 91       		.byte	0x91
 2164 0210 74       		.sleb128 -12
 2165 0211 00       		.byte	0
 2166 0212 0A       		.uleb128 0xa
 2167 0213 11000000 		.4byte	.LASF31
 2168 0217 01       		.byte	0x1
 2169 0218 DF01     		.2byte	0x1df
 2170 021a 00000000 		.4byte	.LFB9
 2171 021e 48000000 		.4byte	.LFE9-.LFB9
 2172 0222 01       		.uleb128 0x1
 2173 0223 9C       		.byte	0x9c
 2174 0224 47020000 		.4byte	0x247
 2175 0228 0B       		.uleb128 0xb
 2176 0229 A9020000 		.4byte	.LASF32
 2177 022d 01       		.byte	0x1
 2178 022e DF01     		.2byte	0x1df
 2179 0230 76000000 		.4byte	0x76
 2180 0234 02       		.uleb128 0x2
 2181 0235 91       		.byte	0x91
 2182 0236 64       		.sleb128 -28
 2183 0237 0C       		.uleb128 0xc
 2184 0238 0C040000 		.4byte	.LASF20
 2185 023c 01       		.byte	0x1
 2186 023d E101     		.2byte	0x1e1
 2187 023f 6B000000 		.4byte	0x6b
 2188 0243 02       		.uleb128 0x2
 2189 0244 91       		.byte	0x91
 2190 0245 6F       		.sleb128 -17
 2191 0246 00       		.byte	0
 2192 0247 0A       		.uleb128 0xa
 2193 0248 48040000 		.4byte	.LASF33
 2194 024c 01       		.byte	0x1
 2195 024d 0102     		.2byte	0x201
 2196 024f 00000000 		.4byte	.LFB10
 2197 0253 48000000 		.4byte	.LFE10-.LFB10
 2198 0257 01       		.uleb128 0x1
 2199 0258 9C       		.byte	0x9c
 2200 0259 7C020000 		.4byte	0x27c
 2201 025d 0B       		.uleb128 0xb
 2202 025e 2A030000 		.4byte	.LASF34
 2203 0262 01       		.byte	0x1
 2204 0263 0102     		.2byte	0x201
 2205 0265 76000000 		.4byte	0x76
 2206 0269 02       		.uleb128 0x2
 2207 026a 91       		.byte	0x91
 2208 026b 64       		.sleb128 -28
 2209 026c 0C       		.uleb128 0xc
 2210 026d 0C040000 		.4byte	.LASF20
 2211 0271 01       		.byte	0x1
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 64


 2212 0272 0302     		.2byte	0x203
 2213 0274 6B000000 		.4byte	0x6b
 2214 0278 02       		.uleb128 0x2
 2215 0279 91       		.byte	0x91
 2216 027a 6F       		.sleb128 -17
 2217 027b 00       		.byte	0
 2218 027c 0A       		.uleb128 0xa
 2219 027d A6010000 		.4byte	.LASF35
 2220 0281 01       		.byte	0x1
 2221 0282 2202     		.2byte	0x222
 2222 0284 00000000 		.4byte	.LFB11
 2223 0288 4C000000 		.4byte	.LFE11-.LFB11
 2224 028c 01       		.uleb128 0x1
 2225 028d 9C       		.byte	0x9c
 2226 028e B1020000 		.4byte	0x2b1
 2227 0292 0B       		.uleb128 0xb
 2228 0293 80010000 		.4byte	.LASF36
 2229 0297 01       		.byte	0x1
 2230 0298 2202     		.2byte	0x222
 2231 029a 76000000 		.4byte	0x76
 2232 029e 02       		.uleb128 0x2
 2233 029f 91       		.byte	0x91
 2234 02a0 64       		.sleb128 -28
 2235 02a1 0C       		.uleb128 0xc
 2236 02a2 0C040000 		.4byte	.LASF20
 2237 02a6 01       		.byte	0x1
 2238 02a7 2402     		.2byte	0x224
 2239 02a9 6B000000 		.4byte	0x6b
 2240 02ad 02       		.uleb128 0x2
 2241 02ae 91       		.byte	0x91
 2242 02af 6F       		.sleb128 -17
 2243 02b0 00       		.byte	0
 2244 02b1 0A       		.uleb128 0xa
 2245 02b2 37010000 		.4byte	.LASF37
 2246 02b6 01       		.byte	0x1
 2247 02b7 4302     		.2byte	0x243
 2248 02b9 00000000 		.4byte	.LFB12
 2249 02bd 48000000 		.4byte	.LFE12-.LFB12
 2250 02c1 01       		.uleb128 0x1
 2251 02c2 9C       		.byte	0x9c
 2252 02c3 E6020000 		.4byte	0x2e6
 2253 02c7 0B       		.uleb128 0xb
 2254 02c8 6C010000 		.4byte	.LASF38
 2255 02cc 01       		.byte	0x1
 2256 02cd 4302     		.2byte	0x243
 2257 02cf 76000000 		.4byte	0x76
 2258 02d3 02       		.uleb128 0x2
 2259 02d4 91       		.byte	0x91
 2260 02d5 64       		.sleb128 -28
 2261 02d6 0C       		.uleb128 0xc
 2262 02d7 0C040000 		.4byte	.LASF20
 2263 02db 01       		.byte	0x1
 2264 02dc 4502     		.2byte	0x245
 2265 02de 6B000000 		.4byte	0x6b
 2266 02e2 02       		.uleb128 0x2
 2267 02e3 91       		.byte	0x91
 2268 02e4 6F       		.sleb128 -17
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 65


 2269 02e5 00       		.byte	0
 2270 02e6 0D       		.uleb128 0xd
 2271 02e7 5C000000 		.4byte	.LASF39
 2272 02eb 01       		.byte	0x1
 2273 02ec 6102     		.2byte	0x261
 2274 02ee 00000000 		.4byte	.LFB13
 2275 02f2 1C000000 		.4byte	.LFE13-.LFB13
 2276 02f6 01       		.uleb128 0x1
 2277 02f7 9C       		.byte	0x9c
 2278 02f8 0C030000 		.4byte	0x30c
 2279 02fc 0B       		.uleb128 0xb
 2280 02fd 00000000 		.4byte	.LASF40
 2281 0301 01       		.byte	0x1
 2282 0302 6102     		.2byte	0x261
 2283 0304 76000000 		.4byte	0x76
 2284 0308 02       		.uleb128 0x2
 2285 0309 91       		.byte	0x91
 2286 030a 74       		.sleb128 -12
 2287 030b 00       		.byte	0
 2288 030c 0E       		.uleb128 0xe
 2289 030d 6D000000 		.4byte	.LASF45
 2290 0311 01       		.byte	0x1
 2291 0312 7502     		.2byte	0x275
 2292 0314 76000000 		.4byte	0x76
 2293 0318 00000000 		.4byte	.LFB14
 2294 031c 18000000 		.4byte	.LFE14-.LFB14
 2295 0320 01       		.uleb128 0x1
 2296 0321 9C       		.byte	0x9c
 2297 0322 0A       		.uleb128 0xa
 2298 0323 02050000 		.4byte	.LASF41
 2299 0327 01       		.byte	0x1
 2300 0328 9202     		.2byte	0x292
 2301 032a 00000000 		.4byte	.LFB15
 2302 032e 48000000 		.4byte	.LFE15-.LFB15
 2303 0332 01       		.uleb128 0x1
 2304 0333 9C       		.byte	0x9c
 2305 0334 57030000 		.4byte	0x357
 2306 0338 0B       		.uleb128 0xb
 2307 0339 CD030000 		.4byte	.LASF42
 2308 033d 01       		.byte	0x1
 2309 033e 9202     		.2byte	0x292
 2310 0340 76000000 		.4byte	0x76
 2311 0344 02       		.uleb128 0x2
 2312 0345 91       		.byte	0x91
 2313 0346 64       		.sleb128 -28
 2314 0347 0C       		.uleb128 0xc
 2315 0348 0C040000 		.4byte	.LASF20
 2316 034c 01       		.byte	0x1
 2317 034d 9402     		.2byte	0x294
 2318 034f 6B000000 		.4byte	0x6b
 2319 0353 02       		.uleb128 0x2
 2320 0354 91       		.byte	0x91
 2321 0355 6F       		.sleb128 -17
 2322 0356 00       		.byte	0
 2323 0357 0D       		.uleb128 0xd
 2324 0358 2E020000 		.4byte	.LASF43
 2325 035c 01       		.byte	0x1
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 66


 2326 035d AF02     		.2byte	0x2af
 2327 035f 00000000 		.4byte	.LFB16
 2328 0363 1C000000 		.4byte	.LFE16-.LFB16
 2329 0367 01       		.uleb128 0x1
 2330 0368 9C       		.byte	0x9c
 2331 0369 7D030000 		.4byte	0x37d
 2332 036d 0B       		.uleb128 0xb
 2333 036e 24000000 		.4byte	.LASF44
 2334 0372 01       		.byte	0x1
 2335 0373 AF02     		.2byte	0x2af
 2336 0375 76000000 		.4byte	0x76
 2337 0379 02       		.uleb128 0x2
 2338 037a 91       		.byte	0x91
 2339 037b 74       		.sleb128 -12
 2340 037c 00       		.byte	0
 2341 037d 0E       		.uleb128 0xe
 2342 037e 91020000 		.4byte	.LASF46
 2343 0382 01       		.byte	0x1
 2344 0383 C302     		.2byte	0x2c3
 2345 0385 76000000 		.4byte	0x76
 2346 0389 00000000 		.4byte	.LFB17
 2347 038d 18000000 		.4byte	.LFE17-.LFB17
 2348 0391 01       		.uleb128 0x1
 2349 0392 9C       		.byte	0x9c
 2350 0393 0A       		.uleb128 0xa
 2351 0394 1B010000 		.4byte	.LASF47
 2352 0398 01       		.byte	0x1
 2353 0399 DD02     		.2byte	0x2dd
 2354 039b 00000000 		.4byte	.LFB18
 2355 039f 48000000 		.4byte	.LFE18-.LFB18
 2356 03a3 01       		.uleb128 0x1
 2357 03a4 9C       		.byte	0x9c
 2358 03a5 C8030000 		.4byte	0x3c8
 2359 03a9 0B       		.uleb128 0xb
 2360 03aa D9030000 		.4byte	.LASF48
 2361 03ae 01       		.byte	0x1
 2362 03af DD02     		.2byte	0x2dd
 2363 03b1 76000000 		.4byte	0x76
 2364 03b5 02       		.uleb128 0x2
 2365 03b6 91       		.byte	0x91
 2366 03b7 64       		.sleb128 -28
 2367 03b8 0C       		.uleb128 0xc
 2368 03b9 0C040000 		.4byte	.LASF20
 2369 03bd 01       		.byte	0x1
 2370 03be DF02     		.2byte	0x2df
 2371 03c0 6B000000 		.4byte	0x6b
 2372 03c4 02       		.uleb128 0x2
 2373 03c5 91       		.byte	0x91
 2374 03c6 6F       		.sleb128 -17
 2375 03c7 00       		.byte	0
 2376 03c8 0D       		.uleb128 0xd
 2377 03c9 7F030000 		.4byte	.LASF49
 2378 03cd 01       		.byte	0x1
 2379 03ce F802     		.2byte	0x2f8
 2380 03d0 00000000 		.4byte	.LFB19
 2381 03d4 1C000000 		.4byte	.LFE19-.LFB19
 2382 03d8 01       		.uleb128 0x1
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 67


 2383 03d9 9C       		.byte	0x9c
 2384 03da EE030000 		.4byte	0x3ee
 2385 03de 0B       		.uleb128 0xb
 2386 03df EF030000 		.4byte	.LASF50
 2387 03e3 01       		.byte	0x1
 2388 03e4 F802     		.2byte	0x2f8
 2389 03e6 76000000 		.4byte	0x76
 2390 03ea 02       		.uleb128 0x2
 2391 03eb 91       		.byte	0x91
 2392 03ec 74       		.sleb128 -12
 2393 03ed 00       		.byte	0
 2394 03ee 0E       		.uleb128 0xe
 2395 03ef CF020000 		.4byte	.LASF51
 2396 03f3 01       		.byte	0x1
 2397 03f4 0C03     		.2byte	0x30c
 2398 03f6 76000000 		.4byte	0x76
 2399 03fa 00000000 		.4byte	.LFB20
 2400 03fe 18000000 		.4byte	.LFE20-.LFB20
 2401 0402 01       		.uleb128 0x1
 2402 0403 9C       		.byte	0x9c
 2403 0404 0A       		.uleb128 0xa
 2404 0405 01030000 		.4byte	.LASF52
 2405 0409 01       		.byte	0x1
 2406 040a 2603     		.2byte	0x326
 2407 040c 00000000 		.4byte	.LFB21
 2408 0410 48000000 		.4byte	.LFE21-.LFB21
 2409 0414 01       		.uleb128 0x1
 2410 0415 9C       		.byte	0x9c
 2411 0416 39040000 		.4byte	0x439
 2412 041a 0B       		.uleb128 0xb
 2413 041b D9030000 		.4byte	.LASF48
 2414 041f 01       		.byte	0x1
 2415 0420 2603     		.2byte	0x326
 2416 0422 76000000 		.4byte	0x76
 2417 0426 02       		.uleb128 0x2
 2418 0427 91       		.byte	0x91
 2419 0428 64       		.sleb128 -28
 2420 0429 0C       		.uleb128 0xc
 2421 042a 0C040000 		.4byte	.LASF20
 2422 042e 01       		.byte	0x1
 2423 042f 2803     		.2byte	0x328
 2424 0431 6B000000 		.4byte	0x6b
 2425 0435 02       		.uleb128 0x2
 2426 0436 91       		.byte	0x91
 2427 0437 6F       		.sleb128 -17
 2428 0438 00       		.byte	0
 2429 0439 0D       		.uleb128 0xd
 2430 043a 1D020000 		.4byte	.LASF53
 2431 043e 01       		.byte	0x1
 2432 043f 4303     		.2byte	0x343
 2433 0441 00000000 		.4byte	.LFB22
 2434 0445 1C000000 		.4byte	.LFE22-.LFB22
 2435 0449 01       		.uleb128 0x1
 2436 044a 9C       		.byte	0x9c
 2437 044b 5F040000 		.4byte	0x45f
 2438 044f 0B       		.uleb128 0xb
 2439 0450 B8020000 		.4byte	.LASF54
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 68


 2440 0454 01       		.byte	0x1
 2441 0455 4303     		.2byte	0x343
 2442 0457 76000000 		.4byte	0x76
 2443 045b 02       		.uleb128 0x2
 2444 045c 91       		.byte	0x91
 2445 045d 74       		.sleb128 -12
 2446 045e 00       		.byte	0
 2447 045f 0E       		.uleb128 0xe
 2448 0460 15050000 		.4byte	.LASF55
 2449 0464 01       		.byte	0x1
 2450 0465 6E03     		.2byte	0x36e
 2451 0467 76000000 		.4byte	0x76
 2452 046b 00000000 		.4byte	.LFB23
 2453 046f 18000000 		.4byte	.LFE23-.LFB23
 2454 0473 01       		.uleb128 0x1
 2455 0474 9C       		.byte	0x9c
 2456 0475 0D       		.uleb128 0xd
 2457 0476 97000000 		.4byte	.LASF56
 2458 047a 01       		.byte	0x1
 2459 047b 9C03     		.2byte	0x39c
 2460 047d 00000000 		.4byte	.LFB24
 2461 0481 1C000000 		.4byte	.LFE24-.LFB24
 2462 0485 01       		.uleb128 0x1
 2463 0486 9C       		.byte	0x9c
 2464 0487 9B040000 		.4byte	0x49b
 2465 048b 0B       		.uleb128 0xb
 2466 048c E4030000 		.4byte	.LASF57
 2467 0490 01       		.byte	0x1
 2468 0491 9C03     		.2byte	0x39c
 2469 0493 76000000 		.4byte	0x76
 2470 0497 02       		.uleb128 0x2
 2471 0498 91       		.byte	0x91
 2472 0499 74       		.sleb128 -12
 2473 049a 00       		.byte	0
 2474 049b 0E       		.uleb128 0xe
 2475 049c 08010000 		.4byte	.LASF58
 2476 04a0 01       		.byte	0x1
 2477 04a1 C503     		.2byte	0x3c5
 2478 04a3 76000000 		.4byte	0x76
 2479 04a7 00000000 		.4byte	.LFB25
 2480 04ab 18000000 		.4byte	.LFE25-.LFB25
 2481 04af 01       		.uleb128 0x1
 2482 04b0 9C       		.byte	0x9c
 2483 04b1 0E       		.uleb128 0xe
 2484 04b2 F1020000 		.4byte	.LASF59
 2485 04b6 01       		.byte	0x1
 2486 04b7 F303     		.2byte	0x3f3
 2487 04b9 76000000 		.4byte	0x76
 2488 04bd 00000000 		.4byte	.LFB26
 2489 04c1 18000000 		.4byte	.LFE26-.LFB26
 2490 04c5 01       		.uleb128 0x1
 2491 04c6 9C       		.byte	0x9c
 2492 04c7 0E       		.uleb128 0xe
 2493 04c8 F9030000 		.4byte	.LASF60
 2494 04cc 01       		.byte	0x1
 2495 04cd 0804     		.2byte	0x408
 2496 04cf 76000000 		.4byte	0x76
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 69


 2497 04d3 00000000 		.4byte	.LFB27
 2498 04d7 18000000 		.4byte	.LFE27-.LFB27
 2499 04db 01       		.uleb128 0x1
 2500 04dc 9C       		.byte	0x9c
 2501 04dd 0A       		.uleb128 0xa
 2502 04de 42000000 		.4byte	.LASF61
 2503 04e2 01       		.byte	0x1
 2504 04e3 2304     		.2byte	0x423
 2505 04e5 00000000 		.4byte	.LFB28
 2506 04e9 44000000 		.4byte	.LFE28-.LFB28
 2507 04ed 01       		.uleb128 0x1
 2508 04ee 9C       		.byte	0x9c
 2509 04ef 12050000 		.4byte	0x512
 2510 04f3 0B       		.uleb128 0xb
 2511 04f4 60010000 		.4byte	.LASF62
 2512 04f8 01       		.byte	0x1
 2513 04f9 2304     		.2byte	0x423
 2514 04fb 76000000 		.4byte	0x76
 2515 04ff 02       		.uleb128 0x2
 2516 0500 91       		.byte	0x91
 2517 0501 64       		.sleb128 -28
 2518 0502 0C       		.uleb128 0xc
 2519 0503 0C040000 		.4byte	.LASF20
 2520 0507 01       		.byte	0x1
 2521 0508 2504     		.2byte	0x425
 2522 050a 6B000000 		.4byte	0x6b
 2523 050e 02       		.uleb128 0x2
 2524 050f 91       		.byte	0x91
 2525 0510 6F       		.sleb128 -17
 2526 0511 00       		.byte	0
 2527 0512 0A       		.uleb128 0xa
 2528 0513 BB030000 		.4byte	.LASF63
 2529 0517 01       		.byte	0x1
 2530 0518 4404     		.2byte	0x444
 2531 051a 00000000 		.4byte	.LFB29
 2532 051e 44000000 		.4byte	.LFE29-.LFB29
 2533 0522 01       		.uleb128 0x1
 2534 0523 9C       		.byte	0x9c
 2535 0524 47050000 		.4byte	0x547
 2536 0528 0B       		.uleb128 0xb
 2537 0529 60010000 		.4byte	.LASF62
 2538 052d 01       		.byte	0x1
 2539 052e 4404     		.2byte	0x444
 2540 0530 76000000 		.4byte	0x76
 2541 0534 02       		.uleb128 0x2
 2542 0535 91       		.byte	0x91
 2543 0536 64       		.sleb128 -28
 2544 0537 0C       		.uleb128 0xc
 2545 0538 0C040000 		.4byte	.LASF20
 2546 053c 01       		.byte	0x1
 2547 053d 4604     		.2byte	0x446
 2548 053f 6B000000 		.4byte	0x6b
 2549 0543 02       		.uleb128 0x2
 2550 0544 91       		.byte	0x91
 2551 0545 6F       		.sleb128 -17
 2552 0546 00       		.byte	0
 2553 0547 0A       		.uleb128 0xa
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 70


 2554 0548 4F010000 		.4byte	.LASF64
 2555 054c 01       		.byte	0x1
 2556 054d 6504     		.2byte	0x465
 2557 054f 00000000 		.4byte	.LFB30
 2558 0553 48000000 		.4byte	.LFE30-.LFB30
 2559 0557 01       		.uleb128 0x1
 2560 0558 9C       		.byte	0x9c
 2561 0559 7C050000 		.4byte	0x57c
 2562 055d 0B       		.uleb128 0xb
 2563 055e 60010000 		.4byte	.LASF62
 2564 0562 01       		.byte	0x1
 2565 0563 6504     		.2byte	0x465
 2566 0565 76000000 		.4byte	0x76
 2567 0569 02       		.uleb128 0x2
 2568 056a 91       		.byte	0x91
 2569 056b 64       		.sleb128 -28
 2570 056c 0C       		.uleb128 0xc
 2571 056d 0C040000 		.4byte	.LASF20
 2572 0571 01       		.byte	0x1
 2573 0572 6704     		.2byte	0x467
 2574 0574 6B000000 		.4byte	0x6b
 2575 0578 02       		.uleb128 0x2
 2576 0579 91       		.byte	0x91
 2577 057a 6F       		.sleb128 -17
 2578 057b 00       		.byte	0
 2579 057c 0A       		.uleb128 0xa
 2580 057d 89010000 		.4byte	.LASF65
 2581 0581 01       		.byte	0x1
 2582 0582 8504     		.2byte	0x485
 2583 0584 00000000 		.4byte	.LFB31
 2584 0588 44000000 		.4byte	.LFE31-.LFB31
 2585 058c 01       		.uleb128 0x1
 2586 058d 9C       		.byte	0x9c
 2587 058e B1050000 		.4byte	0x5b1
 2588 0592 0B       		.uleb128 0xb
 2589 0593 60010000 		.4byte	.LASF62
 2590 0597 01       		.byte	0x1
 2591 0598 8504     		.2byte	0x485
 2592 059a 76000000 		.4byte	0x76
 2593 059e 02       		.uleb128 0x2
 2594 059f 91       		.byte	0x91
 2595 05a0 64       		.sleb128 -28
 2596 05a1 0C       		.uleb128 0xc
 2597 05a2 0C040000 		.4byte	.LASF20
 2598 05a6 01       		.byte	0x1
 2599 05a7 8704     		.2byte	0x487
 2600 05a9 6B000000 		.4byte	0x6b
 2601 05ad 02       		.uleb128 0x2
 2602 05ae 91       		.byte	0x91
 2603 05af 6F       		.sleb128 -17
 2604 05b0 00       		.byte	0
 2605 05b1 0A       		.uleb128 0xa
 2606 05b2 1D040000 		.4byte	.LASF66
 2607 05b6 01       		.byte	0x1
 2608 05b7 A604     		.2byte	0x4a6
 2609 05b9 00000000 		.4byte	.LFB32
 2610 05bd 44000000 		.4byte	.LFE32-.LFB32
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 71


 2611 05c1 01       		.uleb128 0x1
 2612 05c2 9C       		.byte	0x9c
 2613 05c3 E6050000 		.4byte	0x5e6
 2614 05c7 0B       		.uleb128 0xb
 2615 05c8 60010000 		.4byte	.LASF62
 2616 05cc 01       		.byte	0x1
 2617 05cd A604     		.2byte	0x4a6
 2618 05cf 76000000 		.4byte	0x76
 2619 05d3 02       		.uleb128 0x2
 2620 05d4 91       		.byte	0x91
 2621 05d5 64       		.sleb128 -28
 2622 05d6 0C       		.uleb128 0xc
 2623 05d7 0C040000 		.4byte	.LASF20
 2624 05db 01       		.byte	0x1
 2625 05dc A804     		.2byte	0x4a8
 2626 05de 6B000000 		.4byte	0x6b
 2627 05e2 02       		.uleb128 0x2
 2628 05e3 91       		.byte	0x91
 2629 05e4 6F       		.sleb128 -17
 2630 05e5 00       		.byte	0
 2631 05e6 0A       		.uleb128 0xa
 2632 05e7 0A020000 		.4byte	.LASF67
 2633 05eb 01       		.byte	0x1
 2634 05ec CE04     		.2byte	0x4ce
 2635 05ee 00000000 		.4byte	.LFB33
 2636 05f2 38000000 		.4byte	.LFE33-.LFB33
 2637 05f6 01       		.uleb128 0x1
 2638 05f7 9C       		.byte	0x9c
 2639 05f8 2A060000 		.4byte	0x62a
 2640 05fc 0B       		.uleb128 0xb
 2641 05fd 6C010000 		.4byte	.LASF38
 2642 0601 01       		.byte	0x1
 2643 0602 CE04     		.2byte	0x4ce
 2644 0604 76000000 		.4byte	0x76
 2645 0608 02       		.uleb128 0x2
 2646 0609 91       		.byte	0x91
 2647 060a 64       		.sleb128 -28
 2648 060b 0B       		.uleb128 0xb
 2649 060c B9010000 		.4byte	.LASF68
 2650 0610 01       		.byte	0x1
 2651 0611 CE04     		.2byte	0x4ce
 2652 0613 76000000 		.4byte	0x76
 2653 0617 02       		.uleb128 0x2
 2654 0618 91       		.byte	0x91
 2655 0619 60       		.sleb128 -32
 2656 061a 0C       		.uleb128 0xc
 2657 061b 0C040000 		.4byte	.LASF20
 2658 061f 01       		.byte	0x1
 2659 0620 D004     		.2byte	0x4d0
 2660 0622 6B000000 		.4byte	0x6b
 2661 0626 02       		.uleb128 0x2
 2662 0627 91       		.byte	0x91
 2663 0628 6F       		.sleb128 -17
 2664 0629 00       		.byte	0
 2665 062a 0E       		.uleb128 0xe
 2666 062b 71010000 		.4byte	.LASF69
 2667 062f 01       		.byte	0x1
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 72


 2668 0630 EB04     		.2byte	0x4eb
 2669 0632 76000000 		.4byte	0x76
 2670 0636 00000000 		.4byte	.LFB34
 2671 063a 20000000 		.4byte	.LFE34-.LFB34
 2672 063e 01       		.uleb128 0x1
 2673 063f 9C       		.byte	0x9c
 2674 0640 0D       		.uleb128 0xd
 2675 0641 AB000000 		.4byte	.LASF70
 2676 0645 01       		.byte	0x1
 2677 0646 0405     		.2byte	0x504
 2678 0648 00000000 		.4byte	.LFB35
 2679 064c 18000000 		.4byte	.LFE35-.LFB35
 2680 0650 01       		.uleb128 0x1
 2681 0651 9C       		.byte	0x9c
 2682 0652 66060000 		.4byte	0x666
 2683 0656 0B       		.uleb128 0xb
 2684 0657 71030000 		.4byte	.LASF71
 2685 065b 01       		.byte	0x1
 2686 065c 0405     		.2byte	0x504
 2687 065e 76000000 		.4byte	0x76
 2688 0662 02       		.uleb128 0x2
 2689 0663 91       		.byte	0x91
 2690 0664 74       		.sleb128 -12
 2691 0665 00       		.byte	0
 2692 0666 0E       		.uleb128 0xe
 2693 0667 54030000 		.4byte	.LASF72
 2694 066b 01       		.byte	0x1
 2695 066c 1B05     		.2byte	0x51b
 2696 066e 76000000 		.4byte	0x76
 2697 0672 00000000 		.4byte	.LFB36
 2698 0676 14000000 		.4byte	.LFE36-.LFB36
 2699 067a 01       		.uleb128 0x1
 2700 067b 9C       		.byte	0x9c
 2701 067c 0E       		.uleb128 0xe
 2702 067d EB040000 		.4byte	.LASF73
 2703 0681 01       		.byte	0x1
 2704 0682 3205     		.2byte	0x532
 2705 0684 76000000 		.4byte	0x76
 2706 0688 00000000 		.4byte	.LFB37
 2707 068c 14000000 		.4byte	.LFE37-.LFB37
 2708 0690 01       		.uleb128 0x1
 2709 0691 9C       		.byte	0x9c
 2710 0692 0D       		.uleb128 0xd
 2711 0693 C0000000 		.4byte	.LASF74
 2712 0697 01       		.byte	0x1
 2713 0698 4905     		.2byte	0x549
 2714 069a 00000000 		.4byte	.LFB38
 2715 069e 18000000 		.4byte	.LFE38-.LFB38
 2716 06a2 01       		.uleb128 0x1
 2717 06a3 9C       		.byte	0x9c
 2718 06a4 B8060000 		.4byte	0x6b8
 2719 06a8 0B       		.uleb128 0xb
 2720 06a9 71030000 		.4byte	.LASF71
 2721 06ad 01       		.byte	0x1
 2722 06ae 4905     		.2byte	0x549
 2723 06b0 76000000 		.4byte	0x76
 2724 06b4 02       		.uleb128 0x2
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 73


 2725 06b5 91       		.byte	0x91
 2726 06b6 74       		.sleb128 -12
 2727 06b7 00       		.byte	0
 2728 06b8 0D       		.uleb128 0xd
 2729 06b9 AA030000 		.4byte	.LASF75
 2730 06bd 01       		.byte	0x1
 2731 06be 6005     		.2byte	0x560
 2732 06c0 00000000 		.4byte	.LFB39
 2733 06c4 18000000 		.4byte	.LFE39-.LFB39
 2734 06c8 01       		.uleb128 0x1
 2735 06c9 9C       		.byte	0x9c
 2736 06ca DE060000 		.4byte	0x6de
 2737 06ce 0B       		.uleb128 0xb
 2738 06cf 71030000 		.4byte	.LASF71
 2739 06d3 01       		.byte	0x1
 2740 06d4 6005     		.2byte	0x560
 2741 06d6 76000000 		.4byte	0x76
 2742 06da 02       		.uleb128 0x2
 2743 06db 91       		.byte	0x91
 2744 06dc 74       		.sleb128 -12
 2745 06dd 00       		.byte	0
 2746 06de 0F       		.uleb128 0xf
 2747 06df 85020000 		.4byte	.LASF79
 2748 06e3 01       		.byte	0x1
 2749 06e4 15       		.byte	0x15
 2750 06e5 6B000000 		.4byte	0x6b
 2751 06e9 05       		.uleb128 0x5
 2752 06ea 03       		.byte	0x3
 2753 06eb 00000000 		.4byte	PWM_initVar
 2754 06ef 00       		.byte	0
 2755              		.section	.debug_abbrev,"",%progbits
 2756              	.Ldebug_abbrev0:
 2757 0000 01       		.uleb128 0x1
 2758 0001 11       		.uleb128 0x11
 2759 0002 01       		.byte	0x1
 2760 0003 25       		.uleb128 0x25
 2761 0004 0E       		.uleb128 0xe
 2762 0005 13       		.uleb128 0x13
 2763 0006 0B       		.uleb128 0xb
 2764 0007 03       		.uleb128 0x3
 2765 0008 0E       		.uleb128 0xe
 2766 0009 1B       		.uleb128 0x1b
 2767 000a 0E       		.uleb128 0xe
 2768 000b 55       		.uleb128 0x55
 2769 000c 17       		.uleb128 0x17
 2770 000d 11       		.uleb128 0x11
 2771 000e 01       		.uleb128 0x1
 2772 000f 10       		.uleb128 0x10
 2773 0010 17       		.uleb128 0x17
 2774 0011 00       		.byte	0
 2775 0012 00       		.byte	0
 2776 0013 02       		.uleb128 0x2
 2777 0014 24       		.uleb128 0x24
 2778 0015 00       		.byte	0
 2779 0016 0B       		.uleb128 0xb
 2780 0017 0B       		.uleb128 0xb
 2781 0018 3E       		.uleb128 0x3e
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 74


 2782 0019 0B       		.uleb128 0xb
 2783 001a 03       		.uleb128 0x3
 2784 001b 0E       		.uleb128 0xe
 2785 001c 00       		.byte	0
 2786 001d 00       		.byte	0
 2787 001e 03       		.uleb128 0x3
 2788 001f 24       		.uleb128 0x24
 2789 0020 00       		.byte	0
 2790 0021 0B       		.uleb128 0xb
 2791 0022 0B       		.uleb128 0xb
 2792 0023 3E       		.uleb128 0x3e
 2793 0024 0B       		.uleb128 0xb
 2794 0025 03       		.uleb128 0x3
 2795 0026 08       		.uleb128 0x8
 2796 0027 00       		.byte	0
 2797 0028 00       		.byte	0
 2798 0029 04       		.uleb128 0x4
 2799 002a 16       		.uleb128 0x16
 2800 002b 00       		.byte	0
 2801 002c 03       		.uleb128 0x3
 2802 002d 0E       		.uleb128 0xe
 2803 002e 3A       		.uleb128 0x3a
 2804 002f 0B       		.uleb128 0xb
 2805 0030 3B       		.uleb128 0x3b
 2806 0031 0B       		.uleb128 0xb
 2807 0032 49       		.uleb128 0x49
 2808 0033 13       		.uleb128 0x13
 2809 0034 00       		.byte	0
 2810 0035 00       		.byte	0
 2811 0036 05       		.uleb128 0x5
 2812 0037 16       		.uleb128 0x16
 2813 0038 00       		.byte	0
 2814 0039 03       		.uleb128 0x3
 2815 003a 0E       		.uleb128 0xe
 2816 003b 3A       		.uleb128 0x3a
 2817 003c 0B       		.uleb128 0xb
 2818 003d 3B       		.uleb128 0x3b
 2819 003e 05       		.uleb128 0x5
 2820 003f 49       		.uleb128 0x49
 2821 0040 13       		.uleb128 0x13
 2822 0041 00       		.byte	0
 2823 0042 00       		.byte	0
 2824 0043 06       		.uleb128 0x6
 2825 0044 35       		.uleb128 0x35
 2826 0045 00       		.byte	0
 2827 0046 49       		.uleb128 0x49
 2828 0047 13       		.uleb128 0x13
 2829 0048 00       		.byte	0
 2830 0049 00       		.byte	0
 2831 004a 07       		.uleb128 0x7
 2832 004b 2E       		.uleb128 0x2e
 2833 004c 00       		.byte	0
 2834 004d 3F       		.uleb128 0x3f
 2835 004e 19       		.uleb128 0x19
 2836 004f 03       		.uleb128 0x3
 2837 0050 0E       		.uleb128 0xe
 2838 0051 3A       		.uleb128 0x3a
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 75


 2839 0052 0B       		.uleb128 0xb
 2840 0053 3B       		.uleb128 0x3b
 2841 0054 0B       		.uleb128 0xb
 2842 0055 27       		.uleb128 0x27
 2843 0056 19       		.uleb128 0x19
 2844 0057 11       		.uleb128 0x11
 2845 0058 01       		.uleb128 0x1
 2846 0059 12       		.uleb128 0x12
 2847 005a 06       		.uleb128 0x6
 2848 005b 40       		.uleb128 0x40
 2849 005c 18       		.uleb128 0x18
 2850 005d 9642     		.uleb128 0x2116
 2851 005f 19       		.uleb128 0x19
 2852 0060 00       		.byte	0
 2853 0061 00       		.byte	0
 2854 0062 08       		.uleb128 0x8
 2855 0063 2E       		.uleb128 0x2e
 2856 0064 01       		.byte	0x1
 2857 0065 3F       		.uleb128 0x3f
 2858 0066 19       		.uleb128 0x19
 2859 0067 03       		.uleb128 0x3
 2860 0068 0E       		.uleb128 0xe
 2861 0069 3A       		.uleb128 0x3a
 2862 006a 0B       		.uleb128 0xb
 2863 006b 3B       		.uleb128 0x3b
 2864 006c 0B       		.uleb128 0xb
 2865 006d 27       		.uleb128 0x27
 2866 006e 19       		.uleb128 0x19
 2867 006f 11       		.uleb128 0x11
 2868 0070 01       		.uleb128 0x1
 2869 0071 12       		.uleb128 0x12
 2870 0072 06       		.uleb128 0x6
 2871 0073 40       		.uleb128 0x40
 2872 0074 18       		.uleb128 0x18
 2873 0075 9642     		.uleb128 0x2116
 2874 0077 19       		.uleb128 0x19
 2875 0078 01       		.uleb128 0x1
 2876 0079 13       		.uleb128 0x13
 2877 007a 00       		.byte	0
 2878 007b 00       		.byte	0
 2879 007c 09       		.uleb128 0x9
 2880 007d 34       		.uleb128 0x34
 2881 007e 00       		.byte	0
 2882 007f 03       		.uleb128 0x3
 2883 0080 0E       		.uleb128 0xe
 2884 0081 3A       		.uleb128 0x3a
 2885 0082 0B       		.uleb128 0xb
 2886 0083 3B       		.uleb128 0x3b
 2887 0084 0B       		.uleb128 0xb
 2888 0085 49       		.uleb128 0x49
 2889 0086 13       		.uleb128 0x13
 2890 0087 02       		.uleb128 0x2
 2891 0088 18       		.uleb128 0x18
 2892 0089 00       		.byte	0
 2893 008a 00       		.byte	0
 2894 008b 0A       		.uleb128 0xa
 2895 008c 2E       		.uleb128 0x2e
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 76


 2896 008d 01       		.byte	0x1
 2897 008e 3F       		.uleb128 0x3f
 2898 008f 19       		.uleb128 0x19
 2899 0090 03       		.uleb128 0x3
 2900 0091 0E       		.uleb128 0xe
 2901 0092 3A       		.uleb128 0x3a
 2902 0093 0B       		.uleb128 0xb
 2903 0094 3B       		.uleb128 0x3b
 2904 0095 05       		.uleb128 0x5
 2905 0096 27       		.uleb128 0x27
 2906 0097 19       		.uleb128 0x19
 2907 0098 11       		.uleb128 0x11
 2908 0099 01       		.uleb128 0x1
 2909 009a 12       		.uleb128 0x12
 2910 009b 06       		.uleb128 0x6
 2911 009c 40       		.uleb128 0x40
 2912 009d 18       		.uleb128 0x18
 2913 009e 9642     		.uleb128 0x2116
 2914 00a0 19       		.uleb128 0x19
 2915 00a1 01       		.uleb128 0x1
 2916 00a2 13       		.uleb128 0x13
 2917 00a3 00       		.byte	0
 2918 00a4 00       		.byte	0
 2919 00a5 0B       		.uleb128 0xb
 2920 00a6 05       		.uleb128 0x5
 2921 00a7 00       		.byte	0
 2922 00a8 03       		.uleb128 0x3
 2923 00a9 0E       		.uleb128 0xe
 2924 00aa 3A       		.uleb128 0x3a
 2925 00ab 0B       		.uleb128 0xb
 2926 00ac 3B       		.uleb128 0x3b
 2927 00ad 05       		.uleb128 0x5
 2928 00ae 49       		.uleb128 0x49
 2929 00af 13       		.uleb128 0x13
 2930 00b0 02       		.uleb128 0x2
 2931 00b1 18       		.uleb128 0x18
 2932 00b2 00       		.byte	0
 2933 00b3 00       		.byte	0
 2934 00b4 0C       		.uleb128 0xc
 2935 00b5 34       		.uleb128 0x34
 2936 00b6 00       		.byte	0
 2937 00b7 03       		.uleb128 0x3
 2938 00b8 0E       		.uleb128 0xe
 2939 00b9 3A       		.uleb128 0x3a
 2940 00ba 0B       		.uleb128 0xb
 2941 00bb 3B       		.uleb128 0x3b
 2942 00bc 05       		.uleb128 0x5
 2943 00bd 49       		.uleb128 0x49
 2944 00be 13       		.uleb128 0x13
 2945 00bf 02       		.uleb128 0x2
 2946 00c0 18       		.uleb128 0x18
 2947 00c1 00       		.byte	0
 2948 00c2 00       		.byte	0
 2949 00c3 0D       		.uleb128 0xd
 2950 00c4 2E       		.uleb128 0x2e
 2951 00c5 01       		.byte	0x1
 2952 00c6 3F       		.uleb128 0x3f
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 77


 2953 00c7 19       		.uleb128 0x19
 2954 00c8 03       		.uleb128 0x3
 2955 00c9 0E       		.uleb128 0xe
 2956 00ca 3A       		.uleb128 0x3a
 2957 00cb 0B       		.uleb128 0xb
 2958 00cc 3B       		.uleb128 0x3b
 2959 00cd 05       		.uleb128 0x5
 2960 00ce 27       		.uleb128 0x27
 2961 00cf 19       		.uleb128 0x19
 2962 00d0 11       		.uleb128 0x11
 2963 00d1 01       		.uleb128 0x1
 2964 00d2 12       		.uleb128 0x12
 2965 00d3 06       		.uleb128 0x6
 2966 00d4 40       		.uleb128 0x40
 2967 00d5 18       		.uleb128 0x18
 2968 00d6 9742     		.uleb128 0x2117
 2969 00d8 19       		.uleb128 0x19
 2970 00d9 01       		.uleb128 0x1
 2971 00da 13       		.uleb128 0x13
 2972 00db 00       		.byte	0
 2973 00dc 00       		.byte	0
 2974 00dd 0E       		.uleb128 0xe
 2975 00de 2E       		.uleb128 0x2e
 2976 00df 00       		.byte	0
 2977 00e0 3F       		.uleb128 0x3f
 2978 00e1 19       		.uleb128 0x19
 2979 00e2 03       		.uleb128 0x3
 2980 00e3 0E       		.uleb128 0xe
 2981 00e4 3A       		.uleb128 0x3a
 2982 00e5 0B       		.uleb128 0xb
 2983 00e6 3B       		.uleb128 0x3b
 2984 00e7 05       		.uleb128 0x5
 2985 00e8 27       		.uleb128 0x27
 2986 00e9 19       		.uleb128 0x19
 2987 00ea 49       		.uleb128 0x49
 2988 00eb 13       		.uleb128 0x13
 2989 00ec 11       		.uleb128 0x11
 2990 00ed 01       		.uleb128 0x1
 2991 00ee 12       		.uleb128 0x12
 2992 00ef 06       		.uleb128 0x6
 2993 00f0 40       		.uleb128 0x40
 2994 00f1 18       		.uleb128 0x18
 2995 00f2 9742     		.uleb128 0x2117
 2996 00f4 19       		.uleb128 0x19
 2997 00f5 00       		.byte	0
 2998 00f6 00       		.byte	0
 2999 00f7 0F       		.uleb128 0xf
 3000 00f8 34       		.uleb128 0x34
 3001 00f9 00       		.byte	0
 3002 00fa 03       		.uleb128 0x3
 3003 00fb 0E       		.uleb128 0xe
 3004 00fc 3A       		.uleb128 0x3a
 3005 00fd 0B       		.uleb128 0xb
 3006 00fe 3B       		.uleb128 0x3b
 3007 00ff 0B       		.uleb128 0xb
 3008 0100 49       		.uleb128 0x49
 3009 0101 13       		.uleb128 0x13
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 78


 3010 0102 3F       		.uleb128 0x3f
 3011 0103 19       		.uleb128 0x19
 3012 0104 02       		.uleb128 0x2
 3013 0105 18       		.uleb128 0x18
 3014 0106 00       		.byte	0
 3015 0107 00       		.byte	0
 3016 0108 00       		.byte	0
 3017              		.section	.debug_aranges,"",%progbits
 3018 0000 54010000 		.4byte	0x154
 3019 0004 0200     		.2byte	0x2
 3020 0006 00000000 		.4byte	.Ldebug_info0
 3021 000a 04       		.byte	0x4
 3022 000b 00       		.byte	0
 3023 000c 0000     		.2byte	0
 3024 000e 0000     		.2byte	0
 3025 0010 00000000 		.4byte	.LFB0
 3026 0014 68000000 		.4byte	.LFE0-.LFB0
 3027 0018 00000000 		.4byte	.LFB1
 3028 001c 30000000 		.4byte	.LFE1-.LFB1
 3029 0020 00000000 		.4byte	.LFB2
 3030 0024 24000000 		.4byte	.LFE2-.LFB2
 3031 0028 00000000 		.4byte	.LFB3
 3032 002c 30000000 		.4byte	.LFE3-.LFB3
 3033 0030 00000000 		.4byte	.LFB4
 3034 0034 48000000 		.4byte	.LFE4-.LFB4
 3035 0038 00000000 		.4byte	.LFB5
 3036 003c 48000000 		.4byte	.LFE5-.LFB5
 3037 0040 00000000 		.4byte	.LFB6
 3038 0044 48000000 		.4byte	.LFE6-.LFB6
 3039 0048 00000000 		.4byte	.LFB7
 3040 004c 4C000000 		.4byte	.LFE7-.LFB7
 3041 0050 00000000 		.4byte	.LFB8
 3042 0054 1C000000 		.4byte	.LFE8-.LFB8
 3043 0058 00000000 		.4byte	.LFB9
 3044 005c 48000000 		.4byte	.LFE9-.LFB9
 3045 0060 00000000 		.4byte	.LFB10
 3046 0064 48000000 		.4byte	.LFE10-.LFB10
 3047 0068 00000000 		.4byte	.LFB11
 3048 006c 4C000000 		.4byte	.LFE11-.LFB11
 3049 0070 00000000 		.4byte	.LFB12
 3050 0074 48000000 		.4byte	.LFE12-.LFB12
 3051 0078 00000000 		.4byte	.LFB13
 3052 007c 1C000000 		.4byte	.LFE13-.LFB13
 3053 0080 00000000 		.4byte	.LFB14
 3054 0084 18000000 		.4byte	.LFE14-.LFB14
 3055 0088 00000000 		.4byte	.LFB15
 3056 008c 48000000 		.4byte	.LFE15-.LFB15
 3057 0090 00000000 		.4byte	.LFB16
 3058 0094 1C000000 		.4byte	.LFE16-.LFB16
 3059 0098 00000000 		.4byte	.LFB17
 3060 009c 18000000 		.4byte	.LFE17-.LFB17
 3061 00a0 00000000 		.4byte	.LFB18
 3062 00a4 48000000 		.4byte	.LFE18-.LFB18
 3063 00a8 00000000 		.4byte	.LFB19
 3064 00ac 1C000000 		.4byte	.LFE19-.LFB19
 3065 00b0 00000000 		.4byte	.LFB20
 3066 00b4 18000000 		.4byte	.LFE20-.LFB20
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 79


 3067 00b8 00000000 		.4byte	.LFB21
 3068 00bc 48000000 		.4byte	.LFE21-.LFB21
 3069 00c0 00000000 		.4byte	.LFB22
 3070 00c4 1C000000 		.4byte	.LFE22-.LFB22
 3071 00c8 00000000 		.4byte	.LFB23
 3072 00cc 18000000 		.4byte	.LFE23-.LFB23
 3073 00d0 00000000 		.4byte	.LFB24
 3074 00d4 1C000000 		.4byte	.LFE24-.LFB24
 3075 00d8 00000000 		.4byte	.LFB25
 3076 00dc 18000000 		.4byte	.LFE25-.LFB25
 3077 00e0 00000000 		.4byte	.LFB26
 3078 00e4 18000000 		.4byte	.LFE26-.LFB26
 3079 00e8 00000000 		.4byte	.LFB27
 3080 00ec 18000000 		.4byte	.LFE27-.LFB27
 3081 00f0 00000000 		.4byte	.LFB28
 3082 00f4 44000000 		.4byte	.LFE28-.LFB28
 3083 00f8 00000000 		.4byte	.LFB29
 3084 00fc 44000000 		.4byte	.LFE29-.LFB29
 3085 0100 00000000 		.4byte	.LFB30
 3086 0104 48000000 		.4byte	.LFE30-.LFB30
 3087 0108 00000000 		.4byte	.LFB31
 3088 010c 44000000 		.4byte	.LFE31-.LFB31
 3089 0110 00000000 		.4byte	.LFB32
 3090 0114 44000000 		.4byte	.LFE32-.LFB32
 3091 0118 00000000 		.4byte	.LFB33
 3092 011c 38000000 		.4byte	.LFE33-.LFB33
 3093 0120 00000000 		.4byte	.LFB34
 3094 0124 20000000 		.4byte	.LFE34-.LFB34
 3095 0128 00000000 		.4byte	.LFB35
 3096 012c 18000000 		.4byte	.LFE35-.LFB35
 3097 0130 00000000 		.4byte	.LFB36
 3098 0134 14000000 		.4byte	.LFE36-.LFB36
 3099 0138 00000000 		.4byte	.LFB37
 3100 013c 14000000 		.4byte	.LFE37-.LFB37
 3101 0140 00000000 		.4byte	.LFB38
 3102 0144 18000000 		.4byte	.LFE38-.LFB38
 3103 0148 00000000 		.4byte	.LFB39
 3104 014c 18000000 		.4byte	.LFE39-.LFB39
 3105 0150 00000000 		.4byte	0
 3106 0154 00000000 		.4byte	0
 3107              		.section	.debug_ranges,"",%progbits
 3108              	.Ldebug_ranges0:
 3109 0000 00000000 		.4byte	.LFB0
 3110 0004 68000000 		.4byte	.LFE0
 3111 0008 00000000 		.4byte	.LFB1
 3112 000c 30000000 		.4byte	.LFE1
 3113 0010 00000000 		.4byte	.LFB2
 3114 0014 24000000 		.4byte	.LFE2
 3115 0018 00000000 		.4byte	.LFB3
 3116 001c 30000000 		.4byte	.LFE3
 3117 0020 00000000 		.4byte	.LFB4
 3118 0024 48000000 		.4byte	.LFE4
 3119 0028 00000000 		.4byte	.LFB5
 3120 002c 48000000 		.4byte	.LFE5
 3121 0030 00000000 		.4byte	.LFB6
 3122 0034 48000000 		.4byte	.LFE6
 3123 0038 00000000 		.4byte	.LFB7
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 80


 3124 003c 4C000000 		.4byte	.LFE7
 3125 0040 00000000 		.4byte	.LFB8
 3126 0044 1C000000 		.4byte	.LFE8
 3127 0048 00000000 		.4byte	.LFB9
 3128 004c 48000000 		.4byte	.LFE9
 3129 0050 00000000 		.4byte	.LFB10
 3130 0054 48000000 		.4byte	.LFE10
 3131 0058 00000000 		.4byte	.LFB11
 3132 005c 4C000000 		.4byte	.LFE11
 3133 0060 00000000 		.4byte	.LFB12
 3134 0064 48000000 		.4byte	.LFE12
 3135 0068 00000000 		.4byte	.LFB13
 3136 006c 1C000000 		.4byte	.LFE13
 3137 0070 00000000 		.4byte	.LFB14
 3138 0074 18000000 		.4byte	.LFE14
 3139 0078 00000000 		.4byte	.LFB15
 3140 007c 48000000 		.4byte	.LFE15
 3141 0080 00000000 		.4byte	.LFB16
 3142 0084 1C000000 		.4byte	.LFE16
 3143 0088 00000000 		.4byte	.LFB17
 3144 008c 18000000 		.4byte	.LFE17
 3145 0090 00000000 		.4byte	.LFB18
 3146 0094 48000000 		.4byte	.LFE18
 3147 0098 00000000 		.4byte	.LFB19
 3148 009c 1C000000 		.4byte	.LFE19
 3149 00a0 00000000 		.4byte	.LFB20
 3150 00a4 18000000 		.4byte	.LFE20
 3151 00a8 00000000 		.4byte	.LFB21
 3152 00ac 48000000 		.4byte	.LFE21
 3153 00b0 00000000 		.4byte	.LFB22
 3154 00b4 1C000000 		.4byte	.LFE22
 3155 00b8 00000000 		.4byte	.LFB23
 3156 00bc 18000000 		.4byte	.LFE23
 3157 00c0 00000000 		.4byte	.LFB24
 3158 00c4 1C000000 		.4byte	.LFE24
 3159 00c8 00000000 		.4byte	.LFB25
 3160 00cc 18000000 		.4byte	.LFE25
 3161 00d0 00000000 		.4byte	.LFB26
 3162 00d4 18000000 		.4byte	.LFE26
 3163 00d8 00000000 		.4byte	.LFB27
 3164 00dc 18000000 		.4byte	.LFE27
 3165 00e0 00000000 		.4byte	.LFB28
 3166 00e4 44000000 		.4byte	.LFE28
 3167 00e8 00000000 		.4byte	.LFB29
 3168 00ec 44000000 		.4byte	.LFE29
 3169 00f0 00000000 		.4byte	.LFB30
 3170 00f4 48000000 		.4byte	.LFE30
 3171 00f8 00000000 		.4byte	.LFB31
 3172 00fc 44000000 		.4byte	.LFE31
 3173 0100 00000000 		.4byte	.LFB32
 3174 0104 44000000 		.4byte	.LFE32
 3175 0108 00000000 		.4byte	.LFB33
 3176 010c 38000000 		.4byte	.LFE33
 3177 0110 00000000 		.4byte	.LFB34
 3178 0114 20000000 		.4byte	.LFE34
 3179 0118 00000000 		.4byte	.LFB35
 3180 011c 18000000 		.4byte	.LFE35
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 81


 3181 0120 00000000 		.4byte	.LFB36
 3182 0124 14000000 		.4byte	.LFE36
 3183 0128 00000000 		.4byte	.LFB37
 3184 012c 14000000 		.4byte	.LFE37
 3185 0130 00000000 		.4byte	.LFB38
 3186 0134 18000000 		.4byte	.LFE38
 3187 0138 00000000 		.4byte	.LFB39
 3188 013c 18000000 		.4byte	.LFE39
 3189 0140 00000000 		.4byte	0
 3190 0144 00000000 		.4byte	0
 3191              		.section	.debug_line,"",%progbits
 3192              	.Ldebug_line0:
 3193 0000 6E030000 		.section	.debug_str,"MS",%progbits,1
 3193      02004200 
 3193      00000201 
 3193      FB0E0D00 
 3193      01010101 
 3194              	.LASF40:
 3195 0000 636F756E 		.ascii	"count\000"
 3195      7400
 3196              	.LASF18:
 3197 0006 50574D5F 		.ascii	"PWM_Enable\000"
 3197      456E6162 
 3197      6C6500
 3198              	.LASF31:
 3199 0011 50574D5F 		.ascii	"PWM_SetPWMSyncKill\000"
 3199      53657450 
 3199      574D5379 
 3199      6E634B69 
 3199      6C6C00
 3200              	.LASF44:
 3201 0024 70657269 		.ascii	"period\000"
 3201      6F6400
 3202              	.LASF7:
 3203 002b 6C6F6E67 		.ascii	"long long unsigned int\000"
 3203      206C6F6E 
 3203      6720756E 
 3203      7369676E 
 3203      65642069 
 3204              	.LASF61:
 3205 0042 50574D5F 		.ascii	"PWM_SetCaptureMode\000"
 3205      53657443 
 3205      61707475 
 3205      72654D6F 
 3205      646500
 3206              	.LASF24:
 3207 0055 71644D6F 		.ascii	"qdMode\000"
 3207      646500
 3208              	.LASF39:
 3209 005c 50574D5F 		.ascii	"PWM_WriteCounter\000"
 3209      57726974 
 3209      65436F75 
 3209      6E746572 
 3209      00
 3210              	.LASF45:
 3211 006d 50574D5F 		.ascii	"PWM_ReadCounter\000"
 3211      52656164 
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 82


 3211      436F756E 
 3211      74657200 
 3212              	.LASF6:
 3213 007d 6C6F6E67 		.ascii	"long long int\000"
 3213      206C6F6E 
 3213      6720696E 
 3213      7400
 3214              	.LASF0:
 3215 008b 7369676E 		.ascii	"signed char\000"
 3215      65642063 
 3215      68617200 
 3216              	.LASF56:
 3217 0097 50574D5F 		.ascii	"PWM_WriteCompareBuf\000"
 3217      57726974 
 3217      65436F6D 
 3217      70617265 
 3217      42756600 
 3218              	.LASF70:
 3219 00ab 50574D5F 		.ascii	"PWM_SetInterruptMode\000"
 3219      53657449 
 3219      6E746572 
 3219      72757074 
 3219      4D6F6465 
 3220              	.LASF74:
 3221 00c0 50574D5F 		.ascii	"PWM_ClearInterrupt\000"
 3221      436C6561 
 3221      72496E74 
 3221      65727275 
 3221      707400
 3222              	.LASF77:
 3223 00d3 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\PWM.c\000"
 3223      6E657261 
 3223      7465645F 
 3223      536F7572 
 3223      63655C50 
 3224              	.LASF4:
 3225 00f2 6C6F6E67 		.ascii	"long int\000"
 3225      20696E74 
 3225      00
 3226              	.LASF9:
 3227 00fb 75696E74 		.ascii	"uint8\000"
 3227      3800
 3228              	.LASF12:
 3229 0101 646F7562 		.ascii	"double\000"
 3229      6C6500
 3230              	.LASF58:
 3231 0108 50574D5F 		.ascii	"PWM_ReadCompareBuf\000"
 3231      52656164 
 3231      436F6D70 
 3231      61726542 
 3231      756600
 3232              	.LASF47:
 3233 011b 50574D5F 		.ascii	"PWM_SetCompareSwap\000"
 3233      53657443 
 3233      6F6D7061 
 3233      72655377 
 3233      617000
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 83


 3234              	.LASF19:
 3235 012e 50574D5F 		.ascii	"PWM_Stop\000"
 3235      53746F70 
 3235      00
 3236              	.LASF37:
 3237 0137 50574D5F 		.ascii	"PWM_SetPWMInvert\000"
 3237      53657450 
 3237      574D496E 
 3237      76657274 
 3237      00
 3238              	.LASF10:
 3239 0148 75696E74 		.ascii	"uint32\000"
 3239      333200
 3240              	.LASF64:
 3241 014f 50574D5F 		.ascii	"PWM_SetStartMode\000"
 3241      53657453 
 3241      74617274 
 3241      4D6F6465 
 3241      00
 3242              	.LASF62:
 3243 0160 74726967 		.ascii	"triggerMode\000"
 3243      6765724D 
 3243      6F646500 
 3244              	.LASF38:
 3245 016c 6D61736B 		.ascii	"mask\000"
 3245      00
 3246              	.LASF69:
 3247 0171 50574D5F 		.ascii	"PWM_ReadStatus\000"
 3247      52656164 
 3247      53746174 
 3247      757300
 3248              	.LASF36:
 3249 0180 64656164 		.ascii	"deadTime\000"
 3249      54696D65 
 3249      00
 3250              	.LASF65:
 3251 0189 50574D5F 		.ascii	"PWM_SetStopMode\000"
 3251      53657453 
 3251      746F704D 
 3251      6F646500 
 3252              	.LASF8:
 3253 0199 756E7369 		.ascii	"unsigned int\000"
 3253      676E6564 
 3253      20696E74 
 3253      00
 3254              	.LASF35:
 3255 01a6 50574D5F 		.ascii	"PWM_SetPWMDeadTime\000"
 3255      53657450 
 3255      574D4465 
 3255      61645469 
 3255      6D6500
 3256              	.LASF68:
 3257 01b9 636F6D6D 		.ascii	"command\000"
 3257      616E6400 
 3258              	.LASF5:
 3259 01c1 6C6F6E67 		.ascii	"long unsigned int\000"
 3259      20756E73 
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 84


 3259      69676E65 
 3259      6420696E 
 3259      7400
 3260              	.LASF30:
 3261 01d3 6D6F6465 		.ascii	"modeMask\000"
 3261      4D61736B 
 3261      00
 3262              	.LASF3:
 3263 01dc 73686F72 		.ascii	"short unsigned int\000"
 3263      7420756E 
 3263      7369676E 
 3263      65642069 
 3263      6E7400
 3264              	.LASF25:
 3265 01ef 50574D5F 		.ascii	"PWM_SetPrescaler\000"
 3265      53657450 
 3265      72657363 
 3265      616C6572 
 3265      00
 3266              	.LASF17:
 3267 0200 50574D5F 		.ascii	"PWM_Start\000"
 3267      53746172 
 3267      7400
 3268              	.LASF67:
 3269 020a 50574D5F 		.ascii	"PWM_TriggerCommand\000"
 3269      54726967 
 3269      67657243 
 3269      6F6D6D61 
 3269      6E6400
 3270              	.LASF53:
 3271 021d 50574D5F 		.ascii	"PWM_WriteCompare\000"
 3271      57726974 
 3271      65436F6D 
 3271      70617265 
 3271      00
 3272              	.LASF43:
 3273 022e 50574D5F 		.ascii	"PWM_WritePeriod\000"
 3273      57726974 
 3273      65506572 
 3273      696F6400 
 3274              	.LASF14:
 3275 023e 72656733 		.ascii	"reg32\000"
 3275      3200
 3276              	.LASF78:
 3277 0244 433A5C55 		.ascii	"C:\\Users\\vangelis\\SCB_Bootloader\\Bootloadable B"
 3277      73657273 
 3277      5C76616E 
 3277      67656C69 
 3277      735C5343 
 3278 0273 6C696E6B 		.ascii	"linking LED.cydsn\000"
 3278      696E6720 
 3278      4C45442E 
 3278      63796473 
 3278      6E00
 3279              	.LASF79:
 3280 0285 50574D5F 		.ascii	"PWM_initVar\000"
 3280      696E6974 
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 85


 3280      56617200 
 3281              	.LASF46:
 3282 0291 50574D5F 		.ascii	"PWM_ReadPeriod\000"
 3282      52656164 
 3282      50657269 
 3282      6F6400
 3283              	.LASF15:
 3284 02a0 73697A65 		.ascii	"sizetype\000"
 3284      74797065 
 3284      00
 3285              	.LASF32:
 3286 02a9 73796E63 		.ascii	"syncKillEnable\000"
 3286      4B696C6C 
 3286      456E6162 
 3286      6C6500
 3287              	.LASF54:
 3288 02b8 636F6D70 		.ascii	"compare\000"
 3288      61726500 
 3289              	.LASF27:
 3290 02c0 50574D5F 		.ascii	"PWM_SetOneShot\000"
 3290      5365744F 
 3290      6E655368 
 3290      6F7400
 3291              	.LASF51:
 3292 02cf 50574D5F 		.ascii	"PWM_ReadPeriodBuf\000"
 3292      52656164 
 3292      50657269 
 3292      6F644275 
 3292      6600
 3293              	.LASF11:
 3294 02e1 666C6F61 		.ascii	"float\000"
 3294      7400
 3295              	.LASF26:
 3296 02e7 70726573 		.ascii	"prescaler\000"
 3296      63616C65 
 3296      7200
 3297              	.LASF59:
 3298 02f1 50574D5F 		.ascii	"PWM_ReadCapture\000"
 3298      52656164 
 3298      43617074 
 3298      75726500 
 3299              	.LASF52:
 3300 0301 50574D5F 		.ascii	"PWM_SetPeriodSwap\000"
 3300      53657450 
 3300      6572696F 
 3300      64537761 
 3300      7000
 3301              	.LASF1:
 3302 0313 756E7369 		.ascii	"unsigned char\000"
 3302      676E6564 
 3302      20636861 
 3302      7200
 3303              	.LASF16:
 3304 0321 50574D5F 		.ascii	"PWM_Init\000"
 3304      496E6974 
 3304      00
 3305              	.LASF34:
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 86


 3306 032a 73746F70 		.ascii	"stopOnKillEnable\000"
 3306      4F6E4B69 
 3306      6C6C456E 
 3306      61626C65 
 3306      00
 3307              	.LASF29:
 3308 033b 50574D5F 		.ascii	"PWM_SetPWMMode\000"
 3308      53657450 
 3308      574D4D6F 
 3308      646500
 3309              	.LASF2:
 3310 034a 73686F72 		.ascii	"short int\000"
 3310      7420696E 
 3310      7400
 3311              	.LASF72:
 3312 0354 50574D5F 		.ascii	"PWM_GetInterruptSourceMasked\000"
 3312      47657449 
 3312      6E746572 
 3312      72757074 
 3312      536F7572 
 3313              	.LASF71:
 3314 0371 696E7465 		.ascii	"interruptMask\000"
 3314      72727570 
 3314      744D6173 
 3314      6B00
 3315              	.LASF49:
 3316 037f 50574D5F 		.ascii	"PWM_WritePeriodBuf\000"
 3316      57726974 
 3316      65506572 
 3316      696F6442 
 3316      756600
 3317              	.LASF22:
 3318 0392 50574D5F 		.ascii	"PWM_SetQDMode\000"
 3318      53657451 
 3318      444D6F64 
 3318      6500
 3319              	.LASF13:
 3320 03a0 63686172 		.ascii	"char\000"
 3320      00
 3321              	.LASF23:
 3322 03a5 6D6F6465 		.ascii	"mode\000"
 3322      00
 3323              	.LASF75:
 3324 03aa 50574D5F 		.ascii	"PWM_SetInterrupt\000"
 3324      53657449 
 3324      6E746572 
 3324      72757074 
 3324      00
 3325              	.LASF63:
 3326 03bb 50574D5F 		.ascii	"PWM_SetReloadMode\000"
 3326      53657452 
 3326      656C6F61 
 3326      644D6F64 
 3326      6500
 3327              	.LASF42:
 3328 03cd 636F756E 		.ascii	"counterMode\000"
 3328      7465724D 
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 87


 3328      6F646500 
 3329              	.LASF48:
 3330 03d9 73776170 		.ascii	"swapEnable\000"
 3330      456E6162 
 3330      6C6500
 3331              	.LASF57:
 3332 03e4 636F6D70 		.ascii	"compareBuf\000"
 3332      61726542 
 3332      756600
 3333              	.LASF50:
 3334 03ef 70657269 		.ascii	"periodBuf\000"
 3334      6F644275 
 3334      6600
 3335              	.LASF60:
 3336 03f9 50574D5F 		.ascii	"PWM_ReadCaptureBuf\000"
 3336      52656164 
 3336      43617074 
 3336      75726542 
 3336      756600
 3337              	.LASF20:
 3338 040c 656E6162 		.ascii	"enableInterrupts\000"
 3338      6C65496E 
 3338      74657272 
 3338      75707473 
 3338      00
 3339              	.LASF66:
 3340 041d 50574D5F 		.ascii	"PWM_SetCountMode\000"
 3340      53657443 
 3340      6F756E74 
 3340      4D6F6465 
 3340      00
 3341              	.LASF28:
 3342 042e 6F6E6553 		.ascii	"oneShotEnable\000"
 3342      686F7445 
 3342      6E61626C 
 3342      6500
 3343              	.LASF21:
 3344 043c 50574D5F 		.ascii	"PWM_SetMode\000"
 3344      5365744D 
 3344      6F646500 
 3345              	.LASF33:
 3346 0448 50574D5F 		.ascii	"PWM_SetPWMStopOnKill\000"
 3346      53657450 
 3346      574D5374 
 3346      6F704F6E 
 3346      4B696C6C 
 3347              	.LASF76:
 3348 045d 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3348      4320342E 
 3348      392E3320 
 3348      32303135 
 3348      30333033 
 3349 0490 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 3349      20726576 
 3349      6973696F 
 3349      6E203232 
 3349      31323230 
ARM GAS  C:\Users\vangelis\AppData\Local\Temp\ccUoOHgR.s 			page 88


 3350 04c3 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3350      66756E63 
 3350      74696F6E 
 3350      2D736563 
 3350      74696F6E 
 3351              	.LASF73:
 3352 04eb 50574D5F 		.ascii	"PWM_GetInterruptSource\000"
 3352      47657449 
 3352      6E746572 
 3352      72757074 
 3352      536F7572 
 3353              	.LASF41:
 3354 0502 50574D5F 		.ascii	"PWM_SetCounterMode\000"
 3354      53657443 
 3354      6F756E74 
 3354      65724D6F 
 3354      646500
 3355              	.LASF55:
 3356 0515 50574D5F 		.ascii	"PWM_ReadCompare\000"
 3356      52656164 
 3356      436F6D70 
 3356      61726500 
 3357              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
